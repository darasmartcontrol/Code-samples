
Crang1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a728  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800a908  0800a908  0000b908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a984  0800a984  0000c06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a984  0800a984  0000b984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a98c  0800a98c  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a98c  0800a98c  0000b98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a990  0800a990  0000b990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800a994  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d60  2000006c  0800aa00  0000c06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dcc  0800aa00  0000cdcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b52f  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a96  00000000  00000000  000275cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  0002b068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001150  00000000  00000000  0002c6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002170b  00000000  00000000  0002d820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0ce  00000000  00000000  0004ef2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db881  00000000  00000000  0006aff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014687a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006468  00000000  00000000  001468c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0014cd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a8f0 	.word	0x0800a8f0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	0800a8f0 	.word	0x0800a8f0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96a 	b.w	8000da8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	460c      	mov	r4, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14e      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000af8:	4694      	mov	ip, r2
 8000afa:	458c      	cmp	ip, r1
 8000afc:	4686      	mov	lr, r0
 8000afe:	fab2 f282 	clz	r2, r2
 8000b02:	d962      	bls.n	8000bca <__udivmoddi4+0xde>
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b14:	4319      	orrs	r1, r3
 8000b16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f f68c 	uxth.w	r6, ip
 8000b22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb04 f106 	mul.w	r1, r4, r6
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b42:	f080 8112 	bcs.w	8000d6a <__udivmoddi4+0x27e>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 810f 	bls.w	8000d6a <__udivmoddi4+0x27e>
 8000b4c:	3c02      	subs	r4, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a59      	subs	r1, r3, r1
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb00 f606 	mul.w	r6, r0, r6
 8000b66:	429e      	cmp	r6, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x94>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b72:	f080 80fc 	bcs.w	8000d6e <__udivmoddi4+0x282>
 8000b76:	429e      	cmp	r6, r3
 8000b78:	f240 80f9 	bls.w	8000d6e <__udivmoddi4+0x282>
 8000b7c:	4463      	add	r3, ip
 8000b7e:	3802      	subs	r0, #2
 8000b80:	1b9b      	subs	r3, r3, r6
 8000b82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b86:	2100      	movs	r1, #0
 8000b88:	b11d      	cbz	r5, 8000b92 <__udivmoddi4+0xa6>
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d905      	bls.n	8000ba6 <__udivmoddi4+0xba>
 8000b9a:	b10d      	cbz	r5, 8000ba0 <__udivmoddi4+0xb4>
 8000b9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e7f5      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000ba6:	fab3 f183 	clz	r1, r3
 8000baa:	2900      	cmp	r1, #0
 8000bac:	d146      	bne.n	8000c3c <__udivmoddi4+0x150>
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xcc>
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	f0c0 80f0 	bcc.w	8000d98 <__udivmoddi4+0x2ac>
 8000bb8:	1a86      	subs	r6, r0, r2
 8000bba:	eb64 0303 	sbc.w	r3, r4, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d0e6      	beq.n	8000b92 <__udivmoddi4+0xa6>
 8000bc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc8:	e7e3      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	f040 8090 	bne.w	8000cf0 <__udivmoddi4+0x204>
 8000bd0:	eba1 040c 	sub.w	r4, r1, ip
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	fa1f f78c 	uxth.w	r7, ip
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bee:	fb07 f006 	mul.w	r0, r7, r6
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x11c>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x11a>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f200 80cd 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000c06:	4626      	mov	r6, r4
 8000c08:	1a1c      	subs	r4, r3, r0
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c12:	fb08 4410 	mls	r4, r8, r0, r4
 8000c16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1a:	fb00 f707 	mul.w	r7, r0, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x148>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x146>
 8000c2c:	429f      	cmp	r7, r3
 8000c2e:	f200 80b0 	bhi.w	8000d92 <__udivmoddi4+0x2a6>
 8000c32:	4620      	mov	r0, r4
 8000c34:	1bdb      	subs	r3, r3, r7
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	e7a5      	b.n	8000b88 <__udivmoddi4+0x9c>
 8000c3c:	f1c1 0620 	rsb	r6, r1, #32
 8000c40:	408b      	lsls	r3, r1
 8000c42:	fa22 f706 	lsr.w	r7, r2, r6
 8000c46:	431f      	orrs	r7, r3
 8000c48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c50:	ea43 030c 	orr.w	r3, r3, ip
 8000c54:	40f4      	lsrs	r4, r6
 8000c56:	fa00 f801 	lsl.w	r8, r0, r1
 8000c5a:	0c38      	lsrs	r0, r7, #16
 8000c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c60:	fbb4 fef0 	udiv	lr, r4, r0
 8000c64:	fa1f fc87 	uxth.w	ip, r7
 8000c68:	fb00 441e 	mls	r4, r0, lr, r4
 8000c6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c70:	fb0e f90c 	mul.w	r9, lr, ip
 8000c74:	45a1      	cmp	r9, r4
 8000c76:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x1a6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c82:	f080 8084 	bcs.w	8000d8e <__udivmoddi4+0x2a2>
 8000c86:	45a1      	cmp	r9, r4
 8000c88:	f240 8081 	bls.w	8000d8e <__udivmoddi4+0x2a2>
 8000c8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	eba4 0409 	sub.w	r4, r4, r9
 8000c96:	fa1f f983 	uxth.w	r9, r3
 8000c9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ca2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x1d2>
 8000cae:	193c      	adds	r4, r7, r4
 8000cb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cb4:	d267      	bcs.n	8000d86 <__udivmoddi4+0x29a>
 8000cb6:	45a4      	cmp	ip, r4
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0x29a>
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cc6:	eba4 040c 	sub.w	r4, r4, ip
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	46ce      	mov	lr, r9
 8000cce:	469c      	mov	ip, r3
 8000cd0:	d351      	bcc.n	8000d76 <__udivmoddi4+0x28a>
 8000cd2:	d04e      	beq.n	8000d72 <__udivmoddi4+0x286>
 8000cd4:	b155      	cbz	r5, 8000cec <__udivmoddi4+0x200>
 8000cd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cda:	eb64 040c 	sbc.w	r4, r4, ip
 8000cde:	fa04 f606 	lsl.w	r6, r4, r6
 8000ce2:	40cb      	lsrs	r3, r1
 8000ce4:	431e      	orrs	r6, r3
 8000ce6:	40cc      	lsrs	r4, r1
 8000ce8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	e750      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000d00:	4094      	lsls	r4, r2
 8000d02:	430c      	orrs	r4, r1
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3110 	mls	r1, r8, r0, r3
 8000d18:	0c23      	lsrs	r3, r4, #16
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f107 	mul.w	r1, r0, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x24c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d2e:	d22c      	bcs.n	8000d8a <__udivmoddi4+0x29e>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d92a      	bls.n	8000d8a <__udivmoddi4+0x29e>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d40:	fb08 3311 	mls	r3, r8, r1, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb01 f307 	mul.w	r3, r1, r7
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x276>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d58:	d213      	bcs.n	8000d82 <__udivmoddi4+0x296>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d911      	bls.n	8000d82 <__udivmoddi4+0x296>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	1ae4      	subs	r4, r4, r3
 8000d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d68:	e739      	b.n	8000bde <__udivmoddi4+0xf2>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	e6f0      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e706      	b.n	8000b80 <__udivmoddi4+0x94>
 8000d72:	45c8      	cmp	r8, r9
 8000d74:	d2ae      	bcs.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7a8      	b.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d82:	4631      	mov	r1, r6
 8000d84:	e7ed      	b.n	8000d62 <__udivmoddi4+0x276>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e799      	b.n	8000cbe <__udivmoddi4+0x1d2>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e7d4      	b.n	8000d38 <__udivmoddi4+0x24c>
 8000d8e:	46d6      	mov	lr, sl
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1a6>
 8000d92:	4463      	add	r3, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e74d      	b.n	8000c34 <__udivmoddi4+0x148>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e70f      	b.n	8000bc0 <__udivmoddi4+0xd4>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	e730      	b.n	8000c08 <__udivmoddi4+0x11c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <setup_param>:
#include <stdbool.h>
#include "ws2812.h"

extern uint16_t wr_buf[WR_BUF_LEN];
struct LedStates LED[NUM_ledStates] = { 0 };
void setup_param(struct LedStates *LED, int Red, int Green, int Blue) {
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	603b      	str	r3, [r7, #0]
	LED->red = Red;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	601a      	str	r2, [r3, #0]
	LED->green = Green;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	605a      	str	r2, [r3, #4]
	LED->blue = Blue;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	683a      	ldr	r2, [r7, #0]
 8000dca:	609a      	str	r2, [r3, #8]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <fadeNeopixels>:

void fadeNeopixels(void) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
	int n = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 512; i++) {
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	e03a      	b.n	8000e5e <fadeNeopixels+0x86>
		uint8_t brightness;
		if (i >= 256) {
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	2bff      	cmp	r3, #255	@ 0xff
 8000dec:	dd0b      	ble.n	8000e06 <fadeNeopixels+0x2e>
			brightness = i - n - 1;
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	71fb      	strb	r3, [r7, #7]
			n += 2;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	3302      	adds	r3, #2
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	e001      	b.n	8000e0a <fadeNeopixels+0x32>
		} else {
			brightness = i;
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	71fb      	strb	r3, [r7, #7]
		}

		// Scale RGB values based on brightness (0-255)
		uint8_t red = (200 * brightness) / 255;    // Scale red
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	22c8      	movs	r2, #200	@ 0xc8
 8000e0e:	fb02 f303 	mul.w	r3, r2, r3
 8000e12:	4a17      	ldr	r2, [pc, #92]	@ (8000e70 <fadeNeopixels+0x98>)
 8000e14:	fb82 1203 	smull	r1, r2, r2, r3
 8000e18:	441a      	add	r2, r3
 8000e1a:	11d2      	asrs	r2, r2, #7
 8000e1c:	17db      	asrs	r3, r3, #31
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	71bb      	strb	r3, [r7, #6]
		uint8_t green = (200 * brightness) / 255; // Scale green
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	22c8      	movs	r2, #200	@ 0xc8
 8000e26:	fb02 f303 	mul.w	r3, r2, r3
 8000e2a:	4a11      	ldr	r2, [pc, #68]	@ (8000e70 <fadeNeopixels+0x98>)
 8000e2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e30:	441a      	add	r2, r3
 8000e32:	11d2      	asrs	r2, r2, #7
 8000e34:	17db      	asrs	r3, r3, #31
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	717b      	strb	r3, [r7, #5]
		uint8_t blue = 0;   // Scale blue
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	713b      	strb	r3, [r7, #4]

		// Set brightness for strip1 (LEDs 0 and 1)
		led_set_all_RGB(red, green, blue);  // LED 0
 8000e3e:	793a      	ldrb	r2, [r7, #4]
 8000e40:	7979      	ldrb	r1, [r7, #5]
 8000e42:	79bb      	ldrb	r3, [r7, #6]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 ff8b 	bl	8002d60 <led_set_all_RGB>
		fillBufferAll();
 8000e4a:	f002 f82d 	bl	8002ea8 <fillBufferAll>
		led_render(); // Update Neopixels
 8000e4e:	f002 f8b9 	bl	8002fc4 <led_render>

		// Add delay to control fade speed (e.g., 5 ms per step)
		HAL_Delay(5); // Adjust as needed
 8000e52:	2005      	movs	r0, #5
 8000e54:	f002 fb1c 	bl	8003490 <HAL_Delay>
	for (int i = 0; i < 512; i++) {
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e64:	dbc0      	blt.n	8000de8 <fadeNeopixels+0x10>
	}
}
 8000e66:	bf00      	nop
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	80808081 	.word	0x80808081

08000e74 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	@ 0x30
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2220      	movs	r2, #32
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f009 f8af 	bl	8009ff0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e92:	4b57      	ldr	r3, [pc, #348]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000e94:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e9a:	4b55      	ldr	r3, [pc, #340]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000e9c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000ea0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ea2:	4b53      	ldr	r3, [pc, #332]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ea8:	4b51      	ldr	r3, [pc, #324]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000eae:	4b50      	ldr	r3, [pc, #320]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eb4:	4b4e      	ldr	r3, [pc, #312]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000eba:	4b4d      	ldr	r3, [pc, #308]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ec0:	4b4b      	ldr	r3, [pc, #300]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 8000ecc:	4b48      	ldr	r3, [pc, #288]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000ece:	2206      	movs	r2, #6
 8000ed0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed2:	4b47      	ldr	r3, [pc, #284]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000eda:	4b45      	ldr	r3, [pc, #276]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000edc:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ee2:	4b43      	ldr	r3, [pc, #268]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000ee4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ee8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000eea:	4b41      	ldr	r3, [pc, #260]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ef2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ef8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f00:	483b      	ldr	r0, [pc, #236]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000f02:	f002 fd4d 	bl	80039a0 <HAL_ADC_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000f0c:	f001 fa47 	bl	800239e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4835      	ldr	r0, [pc, #212]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000f1c:	f004 f800 	bl	8004f20 <HAL_ADCEx_MultiModeConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000f26:	f001 fa3a 	bl	800239e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f2a:	4b32      	ldr	r3, [pc, #200]	@ (8000ff4 <MX_ADC1_Init+0x180>)
 8000f2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f2e:	2306      	movs	r3, #6
 8000f30:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f36:	237f      	movs	r3, #127	@ 0x7f
 8000f38:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	4619      	mov	r1, r3
 8000f46:	482a      	ldr	r0, [pc, #168]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000f48:	f003 f99a 	bl	8004280 <HAL_ADC_ConfigChannel>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f52:	f001 fa24 	bl	800239e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f56:	4b28      	ldr	r3, [pc, #160]	@ (8000ff8 <MX_ADC1_Init+0x184>)
 8000f58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	4619      	mov	r1, r3
 8000f62:	4823      	ldr	r0, [pc, #140]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000f64:	f003 f98c 	bl	8004280 <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000f6e:	f001 fa16 	bl	800239e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f72:	4b22      	ldr	r3, [pc, #136]	@ (8000ffc <MX_ADC1_Init+0x188>)
 8000f74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f76:	2312      	movs	r3, #18
 8000f78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	481c      	ldr	r0, [pc, #112]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000f80:	f003 f97e 	bl	8004280 <HAL_ADC_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000f8a:	f001 fa08 	bl	800239e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <MX_ADC1_Init+0x18c>)
 8000f90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f92:	2318      	movs	r3, #24
 8000f94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4815      	ldr	r0, [pc, #84]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000f9c:	f003 f970 	bl	8004280 <HAL_ADC_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000fa6:	f001 f9fa 	bl	800239e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000faa:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <MX_ADC1_Init+0x190>)
 8000fac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000fae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480d      	ldr	r0, [pc, #52]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000fba:	f003 f961 	bl	8004280 <HAL_ADC_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000fc4:	f001 f9eb 	bl	800239e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <MX_ADC1_Init+0x194>)
 8000fca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000fcc:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000fd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4806      	ldr	r0, [pc, #24]	@ (8000ff0 <MX_ADC1_Init+0x17c>)
 8000fd8:	f003 f952 	bl	8004280 <HAL_ADC_ConfigChannel>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 8000fe2:	f001 f9dc 	bl	800239e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	3730      	adds	r7, #48	@ 0x30
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200000d0 	.word	0x200000d0
 8000ff4:	19200040 	.word	0x19200040
 8000ff8:	1d500080 	.word	0x1d500080
 8000ffc:	21800100 	.word	0x21800100
 8001000:	25b00200 	.word	0x25b00200
 8001004:	04300002 	.word	0x04300002
 8001008:	08600004 	.word	0x08600004

0800100c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001012:	463b      	mov	r3, r7
 8001014:	2220      	movs	r2, #32
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f008 ffe9 	bl	8009ff0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800101e:	4b50      	ldr	r3, [pc, #320]	@ (8001160 <MX_ADC2_Init+0x154>)
 8001020:	4a50      	ldr	r2, [pc, #320]	@ (8001164 <MX_ADC2_Init+0x158>)
 8001022:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001024:	4b4e      	ldr	r3, [pc, #312]	@ (8001160 <MX_ADC2_Init+0x154>)
 8001026:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800102a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800102c:	4b4c      	ldr	r3, [pc, #304]	@ (8001160 <MX_ADC2_Init+0x154>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001032:	4b4b      	ldr	r3, [pc, #300]	@ (8001160 <MX_ADC2_Init+0x154>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001038:	4b49      	ldr	r3, [pc, #292]	@ (8001160 <MX_ADC2_Init+0x154>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800103e:	4b48      	ldr	r3, [pc, #288]	@ (8001160 <MX_ADC2_Init+0x154>)
 8001040:	2201      	movs	r2, #1
 8001042:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001044:	4b46      	ldr	r3, [pc, #280]	@ (8001160 <MX_ADC2_Init+0x154>)
 8001046:	2208      	movs	r2, #8
 8001048:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800104a:	4b45      	ldr	r3, [pc, #276]	@ (8001160 <MX_ADC2_Init+0x154>)
 800104c:	2200      	movs	r2, #0
 800104e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001050:	4b43      	ldr	r3, [pc, #268]	@ (8001160 <MX_ADC2_Init+0x154>)
 8001052:	2200      	movs	r2, #0
 8001054:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 6;
 8001056:	4b42      	ldr	r3, [pc, #264]	@ (8001160 <MX_ADC2_Init+0x154>)
 8001058:	2206      	movs	r2, #6
 800105a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800105c:	4b40      	ldr	r3, [pc, #256]	@ (8001160 <MX_ADC2_Init+0x154>)
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001064:	4b3e      	ldr	r3, [pc, #248]	@ (8001160 <MX_ADC2_Init+0x154>)
 8001066:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 800106a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800106c:	4b3c      	ldr	r3, [pc, #240]	@ (8001160 <MX_ADC2_Init+0x154>)
 800106e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001072:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001074:	4b3a      	ldr	r3, [pc, #232]	@ (8001160 <MX_ADC2_Init+0x154>)
 8001076:	2201      	movs	r2, #1
 8001078:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800107c:	4b38      	ldr	r3, [pc, #224]	@ (8001160 <MX_ADC2_Init+0x154>)
 800107e:	2200      	movs	r2, #0
 8001080:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001082:	4b37      	ldr	r3, [pc, #220]	@ (8001160 <MX_ADC2_Init+0x154>)
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800108a:	4835      	ldr	r0, [pc, #212]	@ (8001160 <MX_ADC2_Init+0x154>)
 800108c:	f002 fc88 	bl	80039a0 <HAL_ADC_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001096:	f001 f982 	bl	800239e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800109a:	4b33      	ldr	r3, [pc, #204]	@ (8001168 <MX_ADC2_Init+0x15c>)
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800109e:	2306      	movs	r3, #6
 80010a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010a6:	237f      	movs	r3, #127	@ 0x7f
 80010a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010aa:	2304      	movs	r3, #4
 80010ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010b2:	463b      	mov	r3, r7
 80010b4:	4619      	mov	r1, r3
 80010b6:	482a      	ldr	r0, [pc, #168]	@ (8001160 <MX_ADC2_Init+0x154>)
 80010b8:	f003 f8e2 	bl	8004280 <HAL_ADC_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80010c2:	f001 f96c 	bl	800239e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010c6:	4b29      	ldr	r3, [pc, #164]	@ (800116c <MX_ADC2_Init+0x160>)
 80010c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010ca:	230c      	movs	r3, #12
 80010cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010ce:	463b      	mov	r3, r7
 80010d0:	4619      	mov	r1, r3
 80010d2:	4823      	ldr	r0, [pc, #140]	@ (8001160 <MX_ADC2_Init+0x154>)
 80010d4:	f003 f8d4 	bl	8004280 <HAL_ADC_ConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80010de:	f001 f95e 	bl	800239e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010e2:	4b23      	ldr	r3, [pc, #140]	@ (8001170 <MX_ADC2_Init+0x164>)
 80010e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010e6:	2312      	movs	r3, #18
 80010e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010ea:	463b      	mov	r3, r7
 80010ec:	4619      	mov	r1, r3
 80010ee:	481c      	ldr	r0, [pc, #112]	@ (8001160 <MX_ADC2_Init+0x154>)
 80010f0:	f003 f8c6 	bl	8004280 <HAL_ADC_ConfigChannel>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 80010fa:	f001 f950 	bl	800239e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <MX_ADC2_Init+0x168>)
 8001100:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001102:	2318      	movs	r3, #24
 8001104:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	4619      	mov	r1, r3
 800110a:	4815      	ldr	r0, [pc, #84]	@ (8001160 <MX_ADC2_Init+0x154>)
 800110c:	f003 f8b8 	bl	8004280 <HAL_ADC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_ADC2_Init+0x10e>
  {
    Error_Handler();
 8001116:	f001 f942 	bl	800239e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800111a:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <MX_ADC2_Init+0x16c>)
 800111c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800111e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001122:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001124:	463b      	mov	r3, r7
 8001126:	4619      	mov	r1, r3
 8001128:	480d      	ldr	r0, [pc, #52]	@ (8001160 <MX_ADC2_Init+0x154>)
 800112a:	f003 f8a9 	bl	8004280 <HAL_ADC_ConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_ADC2_Init+0x12c>
  {
    Error_Handler();
 8001134:	f001 f933 	bl	800239e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001138:	4b10      	ldr	r3, [pc, #64]	@ (800117c <MX_ADC2_Init+0x170>)
 800113a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800113c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001140:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	4619      	mov	r1, r3
 8001146:	4806      	ldr	r0, [pc, #24]	@ (8001160 <MX_ADC2_Init+0x154>)
 8001148:	f003 f89a 	bl	8004280 <HAL_ADC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_ADC2_Init+0x14a>
  {
    Error_Handler();
 8001152:	f001 f924 	bl	800239e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	3720      	adds	r7, #32
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000013c 	.word	0x2000013c
 8001164:	50000100 	.word	0x50000100
 8001168:	47520000 	.word	0x47520000
 800116c:	36902000 	.word	0x36902000
 8001170:	0c900008 	.word	0x0c900008
 8001174:	10c00010 	.word	0x10c00010
 8001178:	14f00020 	.word	0x14f00020
 800117c:	2e300800 	.word	0x2e300800

08001180 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b09e      	sub	sp, #120	@ 0x78
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001198:	f107 0320 	add.w	r3, r7, #32
 800119c:	2244      	movs	r2, #68	@ 0x44
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f008 ff25 	bl	8009ff0 <memset>
  if(adcHandle->Instance==ADC1)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011ae:	f040 808b 	bne.w	80012c8 <HAL_ADC_MspInit+0x148>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011b6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011b8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011be:	f107 0320 	add.w	r3, r7, #32
 80011c2:	4618      	mov	r0, r3
 80011c4:	f005 face 	bl	8006764 <HAL_RCCEx_PeriphCLKConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80011ce:	f001 f8e6 	bl	800239e <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011d2:	4b87      	ldr	r3, [pc, #540]	@ (80013f0 <HAL_ADC_MspInit+0x270>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	4a85      	ldr	r2, [pc, #532]	@ (80013f0 <HAL_ADC_MspInit+0x270>)
 80011da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011dc:	4b84      	ldr	r3, [pc, #528]	@ (80013f0 <HAL_ADC_MspInit+0x270>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d10b      	bne.n	80011fc <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011e4:	4b83      	ldr	r3, [pc, #524]	@ (80013f4 <HAL_ADC_MspInit+0x274>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e8:	4a82      	ldr	r2, [pc, #520]	@ (80013f4 <HAL_ADC_MspInit+0x274>)
 80011ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f0:	4b80      	ldr	r3, [pc, #512]	@ (80013f4 <HAL_ADC_MspInit+0x274>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011f8:	61fb      	str	r3, [r7, #28]
 80011fa:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fc:	4b7d      	ldr	r3, [pc, #500]	@ (80013f4 <HAL_ADC_MspInit+0x274>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001200:	4a7c      	ldr	r2, [pc, #496]	@ (80013f4 <HAL_ADC_MspInit+0x274>)
 8001202:	f043 0304 	orr.w	r3, r3, #4
 8001206:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001208:	4b7a      	ldr	r3, [pc, #488]	@ (80013f4 <HAL_ADC_MspInit+0x274>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	61bb      	str	r3, [r7, #24]
 8001212:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001214:	4b77      	ldr	r3, [pc, #476]	@ (80013f4 <HAL_ADC_MspInit+0x274>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001218:	4a76      	ldr	r2, [pc, #472]	@ (80013f4 <HAL_ADC_MspInit+0x274>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001220:	4b74      	ldr	r3, [pc, #464]	@ (80013f4 <HAL_ADC_MspInit+0x274>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	697b      	ldr	r3, [r7, #20]
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800122c:	230f      	movs	r3, #15
 800122e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001230:	2303      	movs	r3, #3
 8001232:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001238:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800123c:	4619      	mov	r1, r3
 800123e:	486e      	ldr	r0, [pc, #440]	@ (80013f8 <HAL_ADC_MspInit+0x278>)
 8001240:	f004 fafc 	bl	800583c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001244:	2303      	movs	r3, #3
 8001246:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001248:	2303      	movs	r3, #3
 800124a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800125a:	f004 faef 	bl	800583c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800125e:	4b67      	ldr	r3, [pc, #412]	@ (80013fc <HAL_ADC_MspInit+0x27c>)
 8001260:	4a67      	ldr	r2, [pc, #412]	@ (8001400 <HAL_ADC_MspInit+0x280>)
 8001262:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001264:	4b65      	ldr	r3, [pc, #404]	@ (80013fc <HAL_ADC_MspInit+0x27c>)
 8001266:	2205      	movs	r2, #5
 8001268:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800126a:	4b64      	ldr	r3, [pc, #400]	@ (80013fc <HAL_ADC_MspInit+0x27c>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001270:	4b62      	ldr	r3, [pc, #392]	@ (80013fc <HAL_ADC_MspInit+0x27c>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001276:	4b61      	ldr	r3, [pc, #388]	@ (80013fc <HAL_ADC_MspInit+0x27c>)
 8001278:	2280      	movs	r2, #128	@ 0x80
 800127a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800127c:	4b5f      	ldr	r3, [pc, #380]	@ (80013fc <HAL_ADC_MspInit+0x27c>)
 800127e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001282:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001284:	4b5d      	ldr	r3, [pc, #372]	@ (80013fc <HAL_ADC_MspInit+0x27c>)
 8001286:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800128a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800128c:	4b5b      	ldr	r3, [pc, #364]	@ (80013fc <HAL_ADC_MspInit+0x27c>)
 800128e:	2220      	movs	r2, #32
 8001290:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001292:	4b5a      	ldr	r3, [pc, #360]	@ (80013fc <HAL_ADC_MspInit+0x27c>)
 8001294:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001298:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800129a:	4858      	ldr	r0, [pc, #352]	@ (80013fc <HAL_ADC_MspInit+0x27c>)
 800129c:	f003 fff4 	bl	8005288 <HAL_DMA_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 80012a6:	f001 f87a 	bl	800239e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a53      	ldr	r2, [pc, #332]	@ (80013fc <HAL_ADC_MspInit+0x27c>)
 80012ae:	655a      	str	r2, [r3, #84]	@ 0x54
 80012b0:	4a52      	ldr	r2, [pc, #328]	@ (80013fc <HAL_ADC_MspInit+0x27c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 4, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2104      	movs	r1, #4
 80012ba:	2012      	movs	r0, #18
 80012bc:	f003 ffaf 	bl	800521e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012c0:	2012      	movs	r0, #18
 80012c2:	f003 ffc6 	bl	8005252 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80012c6:	e08f      	b.n	80013e8 <HAL_ADC_MspInit+0x268>
  else if(adcHandle->Instance==ADC2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001404 <HAL_ADC_MspInit+0x284>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	f040 808a 	bne.w	80013e8 <HAL_ADC_MspInit+0x268>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012d8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012da:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e0:	f107 0320 	add.w	r3, r7, #32
 80012e4:	4618      	mov	r0, r3
 80012e6:	f005 fa3d 	bl	8006764 <HAL_RCCEx_PeriphCLKConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_ADC_MspInit+0x174>
      Error_Handler();
 80012f0:	f001 f855 	bl	800239e <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012f4:	4b3e      	ldr	r3, [pc, #248]	@ (80013f0 <HAL_ADC_MspInit+0x270>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	4a3d      	ldr	r2, [pc, #244]	@ (80013f0 <HAL_ADC_MspInit+0x270>)
 80012fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012fe:	4b3c      	ldr	r3, [pc, #240]	@ (80013f0 <HAL_ADC_MspInit+0x270>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d10b      	bne.n	800131e <HAL_ADC_MspInit+0x19e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001306:	4b3b      	ldr	r3, [pc, #236]	@ (80013f4 <HAL_ADC_MspInit+0x274>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	4a3a      	ldr	r2, [pc, #232]	@ (80013f4 <HAL_ADC_MspInit+0x274>)
 800130c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001312:	4b38      	ldr	r3, [pc, #224]	@ (80013f4 <HAL_ADC_MspInit+0x274>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	4b35      	ldr	r3, [pc, #212]	@ (80013f4 <HAL_ADC_MspInit+0x274>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	4a34      	ldr	r2, [pc, #208]	@ (80013f4 <HAL_ADC_MspInit+0x274>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132a:	4b32      	ldr	r3, [pc, #200]	@ (80013f4 <HAL_ADC_MspInit+0x274>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <HAL_ADC_MspInit+0x274>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	4a2e      	ldr	r2, [pc, #184]	@ (80013f4 <HAL_ADC_MspInit+0x274>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001342:	4b2c      	ldr	r3, [pc, #176]	@ (80013f4 <HAL_ADC_MspInit+0x274>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800134e:	23f0      	movs	r3, #240	@ 0xf0
 8001350:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001352:	2303      	movs	r3, #3
 8001354:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800135e:	4619      	mov	r1, r3
 8001360:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001364:	f004 fa6a 	bl	800583c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001368:	2330      	movs	r3, #48	@ 0x30
 800136a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800136c:	2303      	movs	r3, #3
 800136e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001374:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001378:	4619      	mov	r1, r3
 800137a:	481f      	ldr	r0, [pc, #124]	@ (80013f8 <HAL_ADC_MspInit+0x278>)
 800137c:	f004 fa5e 	bl	800583c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001380:	4b21      	ldr	r3, [pc, #132]	@ (8001408 <HAL_ADC_MspInit+0x288>)
 8001382:	4a22      	ldr	r2, [pc, #136]	@ (800140c <HAL_ADC_MspInit+0x28c>)
 8001384:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001386:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <HAL_ADC_MspInit+0x288>)
 8001388:	2224      	movs	r2, #36	@ 0x24
 800138a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800138c:	4b1e      	ldr	r3, [pc, #120]	@ (8001408 <HAL_ADC_MspInit+0x288>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001392:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <HAL_ADC_MspInit+0x288>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001398:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <HAL_ADC_MspInit+0x288>)
 800139a:	2280      	movs	r2, #128	@ 0x80
 800139c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800139e:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <HAL_ADC_MspInit+0x288>)
 80013a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013a4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013a6:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <HAL_ADC_MspInit+0x288>)
 80013a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ac:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80013ae:	4b16      	ldr	r3, [pc, #88]	@ (8001408 <HAL_ADC_MspInit+0x288>)
 80013b0:	2220      	movs	r2, #32
 80013b2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80013b4:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <HAL_ADC_MspInit+0x288>)
 80013b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80013bc:	4812      	ldr	r0, [pc, #72]	@ (8001408 <HAL_ADC_MspInit+0x288>)
 80013be:	f003 ff63 	bl	8005288 <HAL_DMA_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_ADC_MspInit+0x24c>
      Error_Handler();
 80013c8:	f000 ffe9 	bl	800239e <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001408 <HAL_ADC_MspInit+0x288>)
 80013d0:	655a      	str	r2, [r3, #84]	@ 0x54
 80013d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001408 <HAL_ADC_MspInit+0x288>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 4, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2104      	movs	r1, #4
 80013dc:	2012      	movs	r0, #18
 80013de:	f003 ff1e 	bl	800521e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013e2:	2012      	movs	r0, #18
 80013e4:	f003 ff35 	bl	8005252 <HAL_NVIC_EnableIRQ>
}
 80013e8:	bf00      	nop
 80013ea:	3778      	adds	r7, #120	@ 0x78
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000268 	.word	0x20000268
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48000800 	.word	0x48000800
 80013fc:	200001a8 	.word	0x200001a8
 8001400:	40020008 	.word	0x40020008
 8001404:	50000100 	.word	0x50000100
 8001408:	20000208 	.word	0x20000208
 800140c:	4002001c 	.word	0x4002001c

08001410 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001416:	4b1a      	ldr	r3, [pc, #104]	@ (8001480 <MX_DMA_Init+0x70>)
 8001418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800141a:	4a19      	ldr	r2, [pc, #100]	@ (8001480 <MX_DMA_Init+0x70>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	6493      	str	r3, [r2, #72]	@ 0x48
 8001422:	4b17      	ldr	r3, [pc, #92]	@ (8001480 <MX_DMA_Init+0x70>)
 8001424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800142e:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <MX_DMA_Init+0x70>)
 8001430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001432:	4a13      	ldr	r2, [pc, #76]	@ (8001480 <MX_DMA_Init+0x70>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6493      	str	r3, [r2, #72]	@ 0x48
 800143a:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <MX_DMA_Init+0x70>)
 800143c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2102      	movs	r1, #2
 800144a:	200b      	movs	r0, #11
 800144c:	f003 fee7 	bl	800521e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001450:	200b      	movs	r0, #11
 8001452:	f003 fefe 	bl	8005252 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2102      	movs	r1, #2
 800145a:	200c      	movs	r0, #12
 800145c:	f003 fedf 	bl	800521e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001460:	200c      	movs	r0, #12
 8001462:	f003 fef6 	bl	8005252 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 3, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2103      	movs	r1, #3
 800146a:	200d      	movs	r0, #13
 800146c:	f003 fed7 	bl	800521e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001470:	200d      	movs	r0, #13
 8001472:	f003 feee 	bl	8005252 <HAL_NVIC_EnableIRQ>

}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000

08001484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	@ 0x28
 8001488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800149a:	4b2f      	ldr	r3, [pc, #188]	@ (8001558 <MX_GPIO_Init+0xd4>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	4a2e      	ldr	r2, [pc, #184]	@ (8001558 <MX_GPIO_Init+0xd4>)
 80014a0:	f043 0320 	orr.w	r3, r3, #32
 80014a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001558 <MX_GPIO_Init+0xd4>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	4b29      	ldr	r3, [pc, #164]	@ (8001558 <MX_GPIO_Init+0xd4>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b6:	4a28      	ldr	r2, [pc, #160]	@ (8001558 <MX_GPIO_Init+0xd4>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014be:	4b26      	ldr	r3, [pc, #152]	@ (8001558 <MX_GPIO_Init+0xd4>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b23      	ldr	r3, [pc, #140]	@ (8001558 <MX_GPIO_Init+0xd4>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ce:	4a22      	ldr	r2, [pc, #136]	@ (8001558 <MX_GPIO_Init+0xd4>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014d6:	4b20      	ldr	r3, [pc, #128]	@ (8001558 <MX_GPIO_Init+0xd4>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <MX_GPIO_Init+0xd4>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001558 <MX_GPIO_Init+0xd4>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <MX_GPIO_Init+0xd4>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2108      	movs	r1, #8
 80014fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001502:	f004 fb35 	bl	8005b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, output_Pin|Neopixel_regulator_Pin, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800150c:	4813      	ldr	r0, [pc, #76]	@ (800155c <MX_GPIO_Init+0xd8>)
 800150e:	f004 fb2f 	bl	8005b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001512:	2308      	movs	r3, #8
 8001514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800152c:	f004 f986 	bl	800583c <HAL_GPIO_Init>

  /*Configure GPIO pins : output_Pin Neopixel_regulator_Pin */
  GPIO_InitStruct.Pin = output_Pin|Neopixel_regulator_Pin;
 8001530:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001536:	2301      	movs	r3, #1
 8001538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	4804      	ldr	r0, [pc, #16]	@ (800155c <MX_GPIO_Init+0xd8>)
 800154a:	f004 f977 	bl	800583c <HAL_GPIO_Init>

}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	@ 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	48000800 	.word	0x48000800

08001560 <IR_Init>:
volatile uint8_t irState = 0; // 0: idle, 1: after leader low, 2: decoding
volatile uint8_t irBitCount = 0; // Bit counter for decoding
extern volatile uint8_t command; // Extracted command byte
extern volatile uint8_t newIRDataFlag;

void IR_Init(void) {
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8001564:	210c      	movs	r1, #12
 8001566:	4802      	ldr	r0, [pc, #8]	@ (8001570 <IR_Init+0x10>)
 8001568:	f006 f928 	bl	80077bc <HAL_TIM_IC_Start_IT>
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000884 	.word	0x20000884

08001574 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a94      	ldr	r2, [pc, #592]	@ (80017d4 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001582:	4293      	cmp	r3, r2
 8001584:	f040 81a9 	bne.w	80018da <HAL_TIM_IC_CaptureCallback+0x366>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7f1b      	ldrb	r3, [r3, #28]
 800158c:	2b08      	cmp	r3, #8
 800158e:	f040 81a4 	bne.w	80018da <HAL_TIM_IC_CaptureCallback+0x366>
		uint32_t capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001592:	210c      	movs	r1, #12
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f006 fec7 	bl	8008328 <HAL_TIM_ReadCapturedValue>
 800159a:	6178      	str	r0, [r7, #20]
		uint32_t currentTime = capture * 10; // Convert to µs with PSC=1700-1
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	613b      	str	r3, [r7, #16]
//        if (currentTime - lastEdgeTime < 1000) { // Debounce threshold
//            TIM3->SR = ~TIM_SR_CC4IF;
//            return;
//        }

		if (captureState == 0) {
 80015a8:	4b8b      	ldr	r3, [pc, #556]	@ (80017d8 <HAL_TIM_IC_CaptureCallback+0x264>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d133      	bne.n	800161a <HAL_TIM_IC_CaptureCallback+0xa6>
			capture1 = capture;
 80015b2:	4a8a      	ldr	r2, [pc, #552]	@ (80017dc <HAL_TIM_IC_CaptureCallback+0x268>)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6a1a      	ldr	r2, [r3, #32]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80015c6:	621a      	str	r2, [r3, #32]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6a12      	ldr	r2, [r2, #32]
 80015d2:	621a      	str	r2, [r3, #32]
					TIM_ICPOLARITY_RISING);
			lowEdgeCount++;
 80015d4:	4b82      	ldr	r3, [pc, #520]	@ (80017e0 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	3301      	adds	r3, #1
 80015dc:	b29a      	uxth	r2, r3
 80015de:	4b80      	ldr	r3, [pc, #512]	@ (80017e0 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80015e0:	801a      	strh	r2, [r3, #0]
			captureState = 1;
 80015e2:	4b7d      	ldr	r3, [pc, #500]	@ (80017d8 <HAL_TIM_IC_CaptureCallback+0x264>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]
			if (!signalActive) {
 80015e8:	4b7e      	ldr	r3, [pc, #504]	@ (80017e4 <HAL_TIM_IC_CaptureCallback+0x270>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f040 816c 	bne.w	80018cc <HAL_TIM_IC_CaptureCallback+0x358>
				signalActive = 1;
 80015f4:	4b7b      	ldr	r3, [pc, #492]	@ (80017e4 <HAL_TIM_IC_CaptureCallback+0x270>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
				irState = 0;
 80015fa:	4b7b      	ldr	r3, [pc, #492]	@ (80017e8 <HAL_TIM_IC_CaptureCallback+0x274>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
				irBitCount = 0;
 8001600:	4b7a      	ldr	r3, [pc, #488]	@ (80017ec <HAL_TIM_IC_CaptureCallback+0x278>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
				irData = 0;
 8001606:	4b7a      	ldr	r3, [pc, #488]	@ (80017f0 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
				highEdgeCount = 0;
 800160c:	4b79      	ldr	r3, [pc, #484]	@ (80017f4 <HAL_TIM_IC_CaptureCallback+0x280>)
 800160e:	2200      	movs	r2, #0
 8001610:	801a      	strh	r2, [r3, #0]
				lowEdgeCount = 0;
 8001612:	4b73      	ldr	r3, [pc, #460]	@ (80017e0 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001614:	2200      	movs	r2, #0
 8001616:	801a      	strh	r2, [r3, #0]
 8001618:	e158      	b.n	80018cc <HAL_TIM_IC_CaptureCallback+0x358>
			}
		} else if (captureState == 1) {
 800161a:	4b6f      	ldr	r3, [pc, #444]	@ (80017d8 <HAL_TIM_IC_CaptureCallback+0x264>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b01      	cmp	r3, #1
 8001622:	d161      	bne.n	80016e8 <HAL_TIM_IC_CaptureCallback+0x174>
			capture2 = capture;
 8001624:	4a74      	ldr	r2, [pc, #464]	@ (80017f8 <HAL_TIM_IC_CaptureCallback+0x284>)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6a1a      	ldr	r2, [r3, #32]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8001638:	621a      	str	r2, [r3, #32]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6a1a      	ldr	r2, [r3, #32]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001648:	621a      	str	r2, [r3, #32]
					TIM_ICPOLARITY_FALLING);
			highEdgeCount++;
 800164a:	4b6a      	ldr	r3, [pc, #424]	@ (80017f4 <HAL_TIM_IC_CaptureCallback+0x280>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	b29b      	uxth	r3, r3
 8001650:	3301      	adds	r3, #1
 8001652:	b29a      	uxth	r2, r3
 8001654:	4b67      	ldr	r3, [pc, #412]	@ (80017f4 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001656:	801a      	strh	r2, [r3, #0]

			uint32_t pulseWidth;
			if (capture2 >= capture1) {
 8001658:	4b67      	ldr	r3, [pc, #412]	@ (80017f8 <HAL_TIM_IC_CaptureCallback+0x284>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b5f      	ldr	r3, [pc, #380]	@ (80017dc <HAL_TIM_IC_CaptureCallback+0x268>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	d30a      	bcc.n	800167a <HAL_TIM_IC_CaptureCallback+0x106>
				pulseWidth = (capture2 - capture1) * 10;
 8001664:	4b64      	ldr	r3, [pc, #400]	@ (80017f8 <HAL_TIM_IC_CaptureCallback+0x284>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b5c      	ldr	r3, [pc, #368]	@ (80017dc <HAL_TIM_IC_CaptureCallback+0x268>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	1ad2      	subs	r2, r2, r3
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	61fb      	str	r3, [r7, #28]
 8001678:	e00b      	b.n	8001692 <HAL_TIM_IC_CaptureCallback+0x11e>
			} else {
				pulseWidth = (0xFFFF - capture1 + capture2 + 1) * 10;
 800167a:	4b5f      	ldr	r3, [pc, #380]	@ (80017f8 <HAL_TIM_IC_CaptureCallback+0x284>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b57      	ldr	r3, [pc, #348]	@ (80017dc <HAL_TIM_IC_CaptureCallback+0x268>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	1ad2      	subs	r2, r2, r3
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	f503 2320 	add.w	r3, r3, #655360	@ 0xa0000
 8001690:	61fb      	str	r3, [r7, #28]
			}

			if (highEdgeCount - 1 < MAX_PULSES && signalActive) {
 8001692:	4b58      	ldr	r3, [pc, #352]	@ (80017f4 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	b29b      	uxth	r3, r3
 8001698:	2b22      	cmp	r3, #34	@ 0x22
 800169a:	d80c      	bhi.n	80016b6 <HAL_TIM_IC_CaptureCallback+0x142>
 800169c:	4b51      	ldr	r3, [pc, #324]	@ (80017e4 <HAL_TIM_IC_CaptureCallback+0x270>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d007      	beq.n	80016b6 <HAL_TIM_IC_CaptureCallback+0x142>
				highPulseBuffer[highEdgeCount - 1] = pulseWidth; // Store high pulse
 80016a6:	4b53      	ldr	r3, [pc, #332]	@ (80017f4 <HAL_TIM_IC_CaptureCallback+0x280>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	3b01      	subs	r3, #1
 80016ae:	4953      	ldr	r1, [pc, #332]	@ (80017fc <HAL_TIM_IC_CaptureCallback+0x288>)
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}

			// State transition for leader low and high
			if (irState == 0 && pulseWidth > 8000 && pulseWidth < 10000) {
 80016b6:	4b4c      	ldr	r3, [pc, #304]	@ (80017e8 <HAL_TIM_IC_CaptureCallback+0x274>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10b      	bne.n	80016d8 <HAL_TIM_IC_CaptureCallback+0x164>
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80016c6:	d907      	bls.n	80016d8 <HAL_TIM_IC_CaptureCallback+0x164>
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f242 720f 	movw	r2, #9999	@ 0x270f
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d802      	bhi.n	80016d8 <HAL_TIM_IC_CaptureCallback+0x164>
				irState = 1;
 80016d2:	4b45      	ldr	r3, [pc, #276]	@ (80017e8 <HAL_TIM_IC_CaptureCallback+0x274>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	701a      	strb	r2, [r3, #0]
			}
			capture1 = capture2;
 80016d8:	4b47      	ldr	r3, [pc, #284]	@ (80017f8 <HAL_TIM_IC_CaptureCallback+0x284>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a3f      	ldr	r2, [pc, #252]	@ (80017dc <HAL_TIM_IC_CaptureCallback+0x268>)
 80016de:	6013      	str	r3, [r2, #0]
			captureState = 2;
 80016e0:	4b3d      	ldr	r3, [pc, #244]	@ (80017d8 <HAL_TIM_IC_CaptureCallback+0x264>)
 80016e2:	2202      	movs	r2, #2
 80016e4:	701a      	strb	r2, [r3, #0]
 80016e6:	e0f1      	b.n	80018cc <HAL_TIM_IC_CaptureCallback+0x358>
		} else { // captureState == 2
			capture2 = capture;
 80016e8:	4a43      	ldr	r2, [pc, #268]	@ (80017f8 <HAL_TIM_IC_CaptureCallback+0x284>)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6a1a      	ldr	r2, [r3, #32]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80016fc:	621a      	str	r2, [r3, #32]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6a12      	ldr	r2, [r2, #32]
 8001708:	621a      	str	r2, [r3, #32]
					TIM_ICPOLARITY_RISING);
			lowEdgeCount++;
 800170a:	4b35      	ldr	r3, [pc, #212]	@ (80017e0 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	b29b      	uxth	r3, r3
 8001710:	3301      	adds	r3, #1
 8001712:	b29a      	uxth	r2, r3
 8001714:	4b32      	ldr	r3, [pc, #200]	@ (80017e0 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001716:	801a      	strh	r2, [r3, #0]

			uint32_t pulseWidth;
			if (capture2 >= capture1) {
 8001718:	4b37      	ldr	r3, [pc, #220]	@ (80017f8 <HAL_TIM_IC_CaptureCallback+0x284>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b2f      	ldr	r3, [pc, #188]	@ (80017dc <HAL_TIM_IC_CaptureCallback+0x268>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d30a      	bcc.n	800173a <HAL_TIM_IC_CaptureCallback+0x1c6>
				pulseWidth = (capture2 - capture1) * 10;
 8001724:	4b34      	ldr	r3, [pc, #208]	@ (80017f8 <HAL_TIM_IC_CaptureCallback+0x284>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b2c      	ldr	r3, [pc, #176]	@ (80017dc <HAL_TIM_IC_CaptureCallback+0x268>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	1ad2      	subs	r2, r2, r3
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	61bb      	str	r3, [r7, #24]
 8001738:	e00b      	b.n	8001752 <HAL_TIM_IC_CaptureCallback+0x1de>
			} else {
				pulseWidth = (0xFFFF - capture1 + capture2 + 1) * 10;
 800173a:	4b2f      	ldr	r3, [pc, #188]	@ (80017f8 <HAL_TIM_IC_CaptureCallback+0x284>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4b27      	ldr	r3, [pc, #156]	@ (80017dc <HAL_TIM_IC_CaptureCallback+0x268>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	1ad2      	subs	r2, r2, r3
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	f503 2320 	add.w	r3, r3, #655360	@ 0xa0000
 8001750:	61bb      	str	r3, [r7, #24]
			}

			if (lowEdgeCount - 1 < MAX_PULSES && signalActive) {
 8001752:	4b23      	ldr	r3, [pc, #140]	@ (80017e0 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	2b22      	cmp	r3, #34	@ 0x22
 800175a:	d80c      	bhi.n	8001776 <HAL_TIM_IC_CaptureCallback+0x202>
 800175c:	4b21      	ldr	r3, [pc, #132]	@ (80017e4 <HAL_TIM_IC_CaptureCallback+0x270>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d007      	beq.n	8001776 <HAL_TIM_IC_CaptureCallback+0x202>
				lowPulseBuffer[lowEdgeCount - 1] = pulseWidth; // Store low pulse
 8001766:	4b1e      	ldr	r3, [pc, #120]	@ (80017e0 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29b      	uxth	r3, r3
 800176c:	3b01      	subs	r3, #1
 800176e:	4924      	ldr	r1, [pc, #144]	@ (8001800 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}

			if (irState == 1 && pulseWidth > 4000 && pulseWidth < 5000) {
 8001776:	4b1c      	ldr	r3, [pc, #112]	@ (80017e8 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b01      	cmp	r3, #1
 800177e:	d10c      	bne.n	800179a <HAL_TIM_IC_CaptureCallback+0x226>
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001786:	d908      	bls.n	800179a <HAL_TIM_IC_CaptureCallback+0x226>
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800178e:	4293      	cmp	r3, r2
 8001790:	d803      	bhi.n	800179a <HAL_TIM_IC_CaptureCallback+0x226>
				irState = 2;
 8001792:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001794:	2202      	movs	r2, #2
 8001796:	701a      	strb	r2, [r3, #0]
 8001798:	e091      	b.n	80018be <HAL_TIM_IC_CaptureCallback+0x34a>
			} else if (irState == 2 && irBitCount < 32 && highEdgeCount > 1) {
 800179a:	4b13      	ldr	r3, [pc, #76]	@ (80017e8 <HAL_TIM_IC_CaptureCallback+0x274>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d16e      	bne.n	8001882 <HAL_TIM_IC_CaptureCallback+0x30e>
 80017a4:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <HAL_TIM_IC_CaptureCallback+0x278>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b1f      	cmp	r3, #31
 80017ac:	d869      	bhi.n	8001882 <HAL_TIM_IC_CaptureCallback+0x30e>
 80017ae:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <HAL_TIM_IC_CaptureCallback+0x280>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d964      	bls.n	8001882 <HAL_TIM_IC_CaptureCallback+0x30e>
				if (pulseWidth > 500 && pulseWidth < 800) { // 560µs high (0 bit)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017be:	d921      	bls.n	8001804 <HAL_TIM_IC_CaptureCallback+0x290>
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80017c6:	d21d      	bcs.n	8001804 <HAL_TIM_IC_CaptureCallback+0x290>
					irData = (irData << 1) | 0;
 80017c8:	4b09      	ldr	r3, [pc, #36]	@ (80017f0 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4a08      	ldr	r2, [pc, #32]	@ (80017f0 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	e027      	b.n	8001824 <HAL_TIM_IC_CaptureCallback+0x2b0>
 80017d4:	40000400 	.word	0x40000400
 80017d8:	20000274 	.word	0x20000274
 80017dc:	2000026c 	.word	0x2000026c
 80017e0:	20000278 	.word	0x20000278
 80017e4:	20000280 	.word	0x20000280
 80017e8:	20000398 	.word	0x20000398
 80017ec:	20000399 	.word	0x20000399
 80017f0:	20000394 	.word	0x20000394
 80017f4:	20000276 	.word	0x20000276
 80017f8:	20000270 	.word	0x20000270
 80017fc:	2000030c 	.word	0x2000030c
 8001800:	20000284 	.word	0x20000284
				} else if (pulseWidth > 1500 && pulseWidth < 2000) { // 1690µs high (1 bit)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800180a:	4293      	cmp	r3, r2
 800180c:	d90a      	bls.n	8001824 <HAL_TIM_IC_CaptureCallback+0x2b0>
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001814:	d206      	bcs.n	8001824 <HAL_TIM_IC_CaptureCallback+0x2b0>
					irData = (irData << 1) | 1;
 8001816:	4b33      	ldr	r3, [pc, #204]	@ (80018e4 <HAL_TIM_IC_CaptureCallback+0x370>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	4a30      	ldr	r2, [pc, #192]	@ (80018e4 <HAL_TIM_IC_CaptureCallback+0x370>)
 8001822:	6013      	str	r3, [r2, #0]
				}
				irBitCount++;
 8001824:	4b30      	ldr	r3, [pc, #192]	@ (80018e8 <HAL_TIM_IC_CaptureCallback+0x374>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	3301      	adds	r3, #1
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4b2e      	ldr	r3, [pc, #184]	@ (80018e8 <HAL_TIM_IC_CaptureCallback+0x374>)
 8001830:	701a      	strb	r2, [r3, #0]
				if (irBitCount == 32) {
 8001832:	4b2d      	ldr	r3, [pc, #180]	@ (80018e8 <HAL_TIM_IC_CaptureCallback+0x374>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b20      	cmp	r3, #32
 800183a:	d13f      	bne.n	80018bc <HAL_TIM_IC_CaptureCallback+0x348>
					uint8_t address = (irData >> 24) & 0xFF;
 800183c:	4b29      	ldr	r3, [pc, #164]	@ (80018e4 <HAL_TIM_IC_CaptureCallback+0x370>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	0e1b      	lsrs	r3, r3, #24
 8001842:	73fb      	strb	r3, [r7, #15]
					uint8_t invAddress = (irData >> 16) & 0xFF;
 8001844:	4b27      	ldr	r3, [pc, #156]	@ (80018e4 <HAL_TIM_IC_CaptureCallback+0x370>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	0c1b      	lsrs	r3, r3, #16
 800184a:	73bb      	strb	r3, [r7, #14]
					command = (irData >> 8) & 0xFF;
 800184c:	4b25      	ldr	r3, [pc, #148]	@ (80018e4 <HAL_TIM_IC_CaptureCallback+0x370>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b25      	ldr	r3, [pc, #148]	@ (80018ec <HAL_TIM_IC_CaptureCallback+0x378>)
 8001856:	701a      	strb	r2, [r3, #0]
					uint8_t invCommand = irData & 0xFF;
 8001858:	4b22      	ldr	r3, [pc, #136]	@ (80018e4 <HAL_TIM_IC_CaptureCallback+0x370>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	737b      	strb	r3, [r7, #13]
					if (address == (uint8_t) ~invAddress
 800185e:	7bbb      	ldrb	r3, [r7, #14]
 8001860:	43db      	mvns	r3, r3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	429a      	cmp	r2, r3
 8001868:	d128      	bne.n	80018bc <HAL_TIM_IC_CaptureCallback+0x348>
							&& command == (uint8_t) ~invCommand) {
 800186a:	7b7b      	ldrb	r3, [r7, #13]
 800186c:	43db      	mvns	r3, r3
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b1e      	ldr	r3, [pc, #120]	@ (80018ec <HAL_TIM_IC_CaptureCallback+0x378>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	429a      	cmp	r2, r3
 8001878:	d120      	bne.n	80018bc <HAL_TIM_IC_CaptureCallback+0x348>
						newIRDataFlag = 1; // Valid data, trigger print
 800187a:	4b1d      	ldr	r3, [pc, #116]	@ (80018f0 <HAL_TIM_IC_CaptureCallback+0x37c>)
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]
				if (irBitCount == 32) {
 8001880:	e01c      	b.n	80018bc <HAL_TIM_IC_CaptureCallback+0x348>
					}
				}
			} else if (irBitCount == 32 && pulseWidth > 30000) {
 8001882:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <HAL_TIM_IC_CaptureCallback+0x374>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b20      	cmp	r3, #32
 800188a:	d118      	bne.n	80018be <HAL_TIM_IC_CaptureCallback+0x34a>
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001892:	4293      	cmp	r3, r2
 8001894:	d913      	bls.n	80018be <HAL_TIM_IC_CaptureCallback+0x34a>
				newIRDataFlag = 1; // End of frame after 32 bits
 8001896:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]
				signalActive = 0;
 800189c:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <HAL_TIM_IC_CaptureCallback+0x380>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
				irState = 0;
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <HAL_TIM_IC_CaptureCallback+0x384>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
				irBitCount = 0;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	@ (80018e8 <HAL_TIM_IC_CaptureCallback+0x374>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
				highEdgeCount = 0;
 80018ae:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <HAL_TIM_IC_CaptureCallback+0x388>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	801a      	strh	r2, [r3, #0]
				lowEdgeCount = 0;
 80018b4:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <HAL_TIM_IC_CaptureCallback+0x38c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	801a      	strh	r2, [r3, #0]
 80018ba:	e000      	b.n	80018be <HAL_TIM_IC_CaptureCallback+0x34a>
				if (irBitCount == 32) {
 80018bc:	bf00      	nop
			}

			capture1 = capture2;
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <HAL_TIM_IC_CaptureCallback+0x390>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a11      	ldr	r2, [pc, #68]	@ (8001908 <HAL_TIM_IC_CaptureCallback+0x394>)
 80018c4:	6013      	str	r3, [r2, #0]
			captureState = 1;
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <HAL_TIM_IC_CaptureCallback+0x398>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	701a      	strb	r2, [r3, #0]
		}

		lastEdgeTime = currentTime;
 80018cc:	4a10      	ldr	r2, [pc, #64]	@ (8001910 <HAL_TIM_IC_CaptureCallback+0x39c>)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	6013      	str	r3, [r2, #0]
		TIM3->SR = ~TIM_SR_CC4IF;
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <HAL_TIM_IC_CaptureCallback+0x3a0>)
 80018d4:	f06f 0210 	mvn.w	r2, #16
 80018d8:	611a      	str	r2, [r3, #16]
	}
}
 80018da:	bf00      	nop
 80018dc:	3720      	adds	r7, #32
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000394 	.word	0x20000394
 80018e8:	20000399 	.word	0x20000399
 80018ec:	20000000 	.word	0x20000000
 80018f0:	200003b4 	.word	0x200003b4
 80018f4:	20000280 	.word	0x20000280
 80018f8:	20000398 	.word	0x20000398
 80018fc:	20000276 	.word	0x20000276
 8001900:	20000278 	.word	0x20000278
 8001904:	20000270 	.word	0x20000270
 8001908:	2000026c 	.word	0x2000026c
 800190c:	20000274 	.word	0x20000274
 8001910:	2000027c 	.word	0x2000027c
 8001914:	40000400 	.word	0x40000400

08001918 <IR_GetCommand>:

uint32_t IR_GetIRData(void) {
	return irData;
}

uint8_t IR_GetCommand(void) {
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
	return command;
 800191c:	4b03      	ldr	r3, [pc, #12]	@ (800192c <IR_GetCommand+0x14>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b2db      	uxtb	r3, r3
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	20000000 	.word	0x20000000

08001930 <IR_Reset>:

void IR_Reset(void) {
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	newIRDataFlag = 0;
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <IR_Reset+0x34>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
	irData = 0; // Adjust based on your variable names
 800193a:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <IR_Reset+0x38>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
	irState = 0;
 8001940:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <IR_Reset+0x3c>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
	irBitCount = 0;
 8001946:	4b0a      	ldr	r3, [pc, #40]	@ (8001970 <IR_Reset+0x40>)
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
	memset(lowPulseBuffer, 0, sizeof(lowPulseBuffer));
 800194c:	2288      	movs	r2, #136	@ 0x88
 800194e:	2100      	movs	r1, #0
 8001950:	4808      	ldr	r0, [pc, #32]	@ (8001974 <IR_Reset+0x44>)
 8001952:	f008 fb4d 	bl	8009ff0 <memset>
	memset(highPulseBuffer, 0, sizeof(highPulseBuffer));
 8001956:	2288      	movs	r2, #136	@ 0x88
 8001958:	2100      	movs	r1, #0
 800195a:	4807      	ldr	r0, [pc, #28]	@ (8001978 <IR_Reset+0x48>)
 800195c:	f008 fb48 	bl	8009ff0 <memset>
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200003b4 	.word	0x200003b4
 8001968:	20000394 	.word	0x20000394
 800196c:	20000398 	.word	0x20000398
 8001970:	20000399 	.word	0x20000399
 8001974:	20000284 	.word	0x20000284
 8001978:	2000030c 	.word	0x2000030c

0800197c <HAL_ADC_ConvCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
//tasks after each adc read (50us) adjusted by tim1
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800198c:	d120      	bne.n	80019d0 <HAL_ADC_ConvCpltCallback+0x54>
		for (int i = 0; i < NUM_YARN / 2; i++) {
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	e019      	b.n	80019c8 <HAL_ADC_ConvCpltCallback+0x4c>
			yarn[i].read_sens = adc1_data[i];
 8001994:	4a23      	ldr	r2, [pc, #140]	@ (8001a24 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800199c:	b29b      	uxth	r3, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	4a21      	ldr	r2, [pc, #132]	@ (8001a28 <HAL_ADC_ConvCpltCallback+0xac>)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2134      	movs	r1, #52	@ 0x34
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	3320      	adds	r3, #32
 80019ae:	6018      	str	r0, [r3, #0]
			comp_thresh_perturb(&yarn[i]);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2234      	movs	r2, #52	@ 0x34
 80019b4:	fb02 f303 	mul.w	r3, r2, r3
 80019b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a28 <HAL_ADC_ConvCpltCallback+0xac>)
 80019ba:	4413      	add	r3, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f001 fbdf 	bl	8003180 <comp_thresh_perturb>
		for (int i = 0; i < NUM_YARN / 2; i++) {
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3301      	adds	r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b05      	cmp	r3, #5
 80019cc:	dde2      	ble.n	8001994 <HAL_ADC_ConvCpltCallback+0x18>
		for (int i = NUM_YARN / 2; i < NUM_YARN; i++) {
			yarn[i].read_sens = adc2_data[i - 6];
			comp_thresh_perturb(&yarn[i]);
		}
	}
}
 80019ce:	e025      	b.n	8001a1c <HAL_ADC_ConvCpltCallback+0xa0>
	} else if (hadc->Instance == ADC2) {
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a15      	ldr	r2, [pc, #84]	@ (8001a2c <HAL_ADC_ConvCpltCallback+0xb0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d120      	bne.n	8001a1c <HAL_ADC_ConvCpltCallback+0xa0>
		for (int i = NUM_YARN / 2; i < NUM_YARN; i++) {
 80019da:	2306      	movs	r3, #6
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	e01a      	b.n	8001a16 <HAL_ADC_ConvCpltCallback+0x9a>
			yarn[i].read_sens = adc2_data[i - 6];
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	3b06      	subs	r3, #6
 80019e4:	4a12      	ldr	r2, [pc, #72]	@ (8001a30 <HAL_ADC_ConvCpltCallback+0xb4>)
 80019e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	4618      	mov	r0, r3
 80019ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001a28 <HAL_ADC_ConvCpltCallback+0xac>)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2134      	movs	r1, #52	@ 0x34
 80019f4:	fb01 f303 	mul.w	r3, r1, r3
 80019f8:	4413      	add	r3, r2
 80019fa:	3320      	adds	r3, #32
 80019fc:	6018      	str	r0, [r3, #0]
			comp_thresh_perturb(&yarn[i]);
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2234      	movs	r2, #52	@ 0x34
 8001a02:	fb02 f303 	mul.w	r3, r2, r3
 8001a06:	4a08      	ldr	r2, [pc, #32]	@ (8001a28 <HAL_ADC_ConvCpltCallback+0xac>)
 8001a08:	4413      	add	r3, r2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f001 fbb8 	bl	8003180 <comp_thresh_perturb>
		for (int i = NUM_YARN / 2; i < NUM_YARN; i++) {
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	3301      	adds	r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b0b      	cmp	r3, #11
 8001a1a:	dde1      	ble.n	80019e0 <HAL_ADC_ConvCpltCallback+0x64>
}
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	2000039c 	.word	0x2000039c
 8001a28:	20000a10 	.word	0x20000a10
 8001a2c:	50000100 	.word	0x50000100
 8001a30:	200003a8 	.word	0x200003a8

08001a34 <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a44:	d10e      	bne.n	8001a64 <HAL_TIM_OC_DelayElapsedCallback+0x30>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	7f1b      	ldrb	r3, [r3, #28]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d103      	bne.n	8001a56 <HAL_TIM_OC_DelayElapsedCallback+0x22>
			FlagLedState = 1;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
			FlagCheckState = 1;
	}
}
 8001a54:	e006      	b.n	8001a64 <HAL_TIM_OC_DelayElapsedCallback+0x30>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7f1b      	ldrb	r3, [r3, #28]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d102      	bne.n	8001a64 <HAL_TIM_OC_DelayElapsedCallback+0x30>
			FlagCheckState = 1;
 8001a5e:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	701a      	strb	r2, [r3, #0]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	200003b6 	.word	0x200003b6
 8001a74:	200003b5 	.word	0x200003b5

08001a78 <manageLed>:

//manage leds (110ms)
void manageLed(void) {
 8001a78:	b5b0      	push	{r4, r5, r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0

	//decide torn_stat
	torn_stat=0;
 8001a7e:	4b96      	ldr	r3, [pc, #600]	@ (8001cd8 <manageLed+0x260>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_YARN; i++)
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	e017      	b.n	8001aba <manageLed+0x42>
		torn_stat = torn_stat || yarn[i].torn;
 8001a8a:	4b93      	ldr	r3, [pc, #588]	@ (8001cd8 <manageLed+0x260>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d108      	bne.n	8001aa4 <manageLed+0x2c>
 8001a92:	4a92      	ldr	r2, [pc, #584]	@ (8001cdc <manageLed+0x264>)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	2134      	movs	r1, #52	@ 0x34
 8001a98:	fb01 f303 	mul.w	r3, r1, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <manageLed+0x30>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <manageLed+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	4b89      	ldr	r3, [pc, #548]	@ (8001cd8 <manageLed+0x260>)
 8001ab2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_YARN; i++)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b0b      	cmp	r3, #11
 8001abe:	dde4      	ble.n	8001a8a <manageLed+0x12>

	//decide all_off leds
	all_off = 1;
 8001ac0:	4b87      	ldr	r3, [pc, #540]	@ (8001ce0 <manageLed+0x268>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_YARN; i++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	e018      	b.n	8001afe <manageLed+0x86>
		all_off = all_off && (yarn[i].ledState == 0);
 8001acc:	4b84      	ldr	r3, [pc, #528]	@ (8001ce0 <manageLed+0x268>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00b      	beq.n	8001aec <manageLed+0x74>
 8001ad4:	4a81      	ldr	r2, [pc, #516]	@ (8001cdc <manageLed+0x264>)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	2134      	movs	r1, #52	@ 0x34
 8001ada:	fb01 f303 	mul.w	r3, r1, r3
 8001ade:	4413      	add	r3, r2
 8001ae0:	332c      	adds	r3, #44	@ 0x2c
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <manageLed+0x74>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <manageLed+0x76>
 8001aec:	2300      	movs	r3, #0
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4b7a      	ldr	r3, [pc, #488]	@ (8001ce0 <manageLed+0x268>)
 8001af6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_YARN; i++)
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	3301      	adds	r3, #1
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2b0b      	cmp	r3, #11
 8001b02:	dde3      	ble.n	8001acc <manageLed+0x54>

	// turn the regulator off
	if (outCircuit == 1) {
 8001b04:	4b77      	ldr	r3, [pc, #476]	@ (8001ce4 <manageLed+0x26c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 8094 	beq.w	8001c36 <manageLed+0x1be>
		if (outCircuitPre == 0) {
 8001b0e:	4b76      	ldr	r3, [pc, #472]	@ (8001ce8 <manageLed+0x270>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	f083 0301 	eor.w	r3, r3, #1
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d018      	beq.n	8001b4e <manageLed+0xd6>
			flush();
 8001b1c:	f001 f8f4 	bl	8002d08 <flush>
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_SET) //if off
 8001b20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b24:	4871      	ldr	r0, [pc, #452]	@ (8001cec <manageLed+0x274>)
 8001b26:	f004 f80b 	bl	8005b40 <HAL_GPIO_ReadPin>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d105      	bne.n	8001b3c <manageLed+0xc4>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // make on
 8001b30:	2200      	movs	r2, #0
 8001b32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b36:	486d      	ldr	r0, [pc, #436]	@ (8001cec <manageLed+0x274>)
 8001b38:	f004 f81a 	bl	8005b70 <HAL_GPIO_WritePin>
			ind = 0;
 8001b3c:	4b6c      	ldr	r3, [pc, #432]	@ (8001cf0 <manageLed+0x278>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
			direc = 1;
 8001b42:	4b6c      	ldr	r3, [pc, #432]	@ (8001cf4 <manageLed+0x27c>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
			ledColor = 5;
 8001b48:	4b6b      	ldr	r3, [pc, #428]	@ (8001cf8 <manageLed+0x280>)
 8001b4a:	2205      	movs	r2, #5
 8001b4c:	701a      	strb	r2, [r3, #0]
		}
		if (direc == 1) {
 8001b4e:	4b69      	ldr	r3, [pc, #420]	@ (8001cf4 <manageLed+0x27c>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d038      	beq.n	8001bca <manageLed+0x152>
			led_set_RGB(ind, LED[ledColor].red, LED[ledColor].green,
 8001b58:	4b65      	ldr	r3, [pc, #404]	@ (8001cf0 <manageLed+0x278>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b2d8      	uxtb	r0, r3
 8001b5e:	4b66      	ldr	r3, [pc, #408]	@ (8001cf8 <manageLed+0x280>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	4619      	mov	r1, r3
 8001b66:	4a65      	ldr	r2, [pc, #404]	@ (8001cfc <manageLed+0x284>)
 8001b68:	460b      	mov	r3, r1
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	440b      	add	r3, r1
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	b2d9      	uxtb	r1, r3
 8001b76:	4b60      	ldr	r3, [pc, #384]	@ (8001cf8 <manageLed+0x280>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	461c      	mov	r4, r3
 8001b7e:	4a5f      	ldr	r2, [pc, #380]	@ (8001cfc <manageLed+0x284>)
 8001b80:	4623      	mov	r3, r4
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4423      	add	r3, r4
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	3304      	adds	r3, #4
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	b2da      	uxtb	r2, r3
					LED[ledColor].blue);
 8001b90:	4b59      	ldr	r3, [pc, #356]	@ (8001cf8 <manageLed+0x280>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	461d      	mov	r5, r3
 8001b98:	4c58      	ldr	r4, [pc, #352]	@ (8001cfc <manageLed+0x284>)
 8001b9a:	462b      	mov	r3, r5
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	442b      	add	r3, r5
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4423      	add	r3, r4
 8001ba4:	3308      	adds	r3, #8
 8001ba6:	681b      	ldr	r3, [r3, #0]
			led_set_RGB(ind, LED[ledColor].red, LED[ledColor].green,
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	f001 f875 	bl	8002c98 <led_set_RGB>
			fillBuffer(ind);
 8001bae:	4b50      	ldr	r3, [pc, #320]	@ (8001cf0 <manageLed+0x278>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f001 f8f1 	bl	8002d9c <fillBuffer>

			ind++;
 8001bba:	4b4d      	ldr	r3, [pc, #308]	@ (8001cf0 <manageLed+0x278>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	4b4a      	ldr	r3, [pc, #296]	@ (8001cf0 <manageLed+0x278>)
 8001bc6:	701a      	strb	r2, [r3, #0]
 8001bc8:	e014      	b.n	8001bf4 <manageLed+0x17c>

		} else {
			ind--;
 8001bca:	4b49      	ldr	r3, [pc, #292]	@ (8001cf0 <manageLed+0x278>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	4b46      	ldr	r3, [pc, #280]	@ (8001cf0 <manageLed+0x278>)
 8001bd6:	701a      	strb	r2, [r3, #0]
			led_set_RGB(ind, 0, 0, 0);
 8001bd8:	4b45      	ldr	r3, [pc, #276]	@ (8001cf0 <manageLed+0x278>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	b2d8      	uxtb	r0, r3
 8001bde:	2300      	movs	r3, #0
 8001be0:	2200      	movs	r2, #0
 8001be2:	2100      	movs	r1, #0
 8001be4:	f001 f858 	bl	8002c98 <led_set_RGB>
			fillBuffer(ind);
 8001be8:	4b41      	ldr	r3, [pc, #260]	@ (8001cf0 <manageLed+0x278>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f001 f8d4 	bl	8002d9c <fillBuffer>

		}
		if (ind == num_led && direc == 1)
 8001bf4:	4b3e      	ldr	r3, [pc, #248]	@ (8001cf0 <manageLed+0x278>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d108      	bne.n	8001c10 <manageLed+0x198>
 8001bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8001cf4 <manageLed+0x27c>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <manageLed+0x198>
			direc = 0;
 8001c08:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf4 <manageLed+0x27c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
 8001c0e:	e00f      	b.n	8001c30 <manageLed+0x1b8>
		else if (ind == 0 && direc == 0) {
 8001c10:	4b37      	ldr	r3, [pc, #220]	@ (8001cf0 <manageLed+0x278>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10a      	bne.n	8001c30 <manageLed+0x1b8>
 8001c1a:	4b36      	ldr	r3, [pc, #216]	@ (8001cf4 <manageLed+0x27c>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f083 0301 	eor.w	r3, r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <manageLed+0x1b8>
			direc = 1;
 8001c2a:	4b32      	ldr	r3, [pc, #200]	@ (8001cf4 <manageLed+0x27c>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]

		}
		led_render();
 8001c30:	f001 f9c8 	bl	8002fc4 <led_render>
 8001c34:	e15d      	b.n	8001ef2 <manageLed+0x47a>
		//---------------
	} else if (torn_stat == 1) {
 8001c36:	4b28      	ldr	r3, [pc, #160]	@ (8001cd8 <manageLed+0x260>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80a5 	beq.w	8001d8a <manageLed+0x312>
		if (torn_statPre == 0) {
 8001c40:	4b2f      	ldr	r3, [pc, #188]	@ (8001d00 <manageLed+0x288>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	f083 0301 	eor.w	r3, r3, #1
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d069      	beq.n	8001d22 <manageLed+0x2aa>
			flush();
 8001c4e:	f001 f85b 	bl	8002d08 <flush>
			for (int i = 0; i < num_led; i++) {
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	e05f      	b.n	8001d18 <manageLed+0x2a0>
				ledColor = yarn[i].ledState;
 8001c58:	4a20      	ldr	r2, [pc, #128]	@ (8001cdc <manageLed+0x264>)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2134      	movs	r1, #52	@ 0x34
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	332c      	adds	r3, #44	@ 0x2c
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4b23      	ldr	r3, [pc, #140]	@ (8001cf8 <manageLed+0x280>)
 8001c6c:	701a      	strb	r2, [r3, #0]
				if (yarn[i].ledState == 4)
 8001c6e:	4a1b      	ldr	r2, [pc, #108]	@ (8001cdc <manageLed+0x264>)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2134      	movs	r1, #52	@ 0x34
 8001c74:	fb01 f303 	mul.w	r3, r1, r3
 8001c78:	4413      	add	r3, r2
 8001c7a:	332c      	adds	r3, #44	@ 0x2c
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d140      	bne.n	8001d04 <manageLed+0x28c>
					led_set_RGB(i, LED[ledColor].red, LED[ledColor].green,
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	b2d8      	uxtb	r0, r3
 8001c86:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <manageLed+0x280>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8001cfc <manageLed+0x284>)
 8001c90:	460b      	mov	r3, r1
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	440b      	add	r3, r1
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	b2d9      	uxtb	r1, r3
 8001c9e:	4b16      	ldr	r3, [pc, #88]	@ (8001cf8 <manageLed+0x280>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	461c      	mov	r4, r3
 8001ca6:	4a15      	ldr	r2, [pc, #84]	@ (8001cfc <manageLed+0x284>)
 8001ca8:	4623      	mov	r3, r4
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4423      	add	r3, r4
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	b2da      	uxtb	r2, r3
							LED[ledColor].blue);
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <manageLed+0x280>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	461d      	mov	r5, r3
 8001cc0:	4c0e      	ldr	r4, [pc, #56]	@ (8001cfc <manageLed+0x284>)
 8001cc2:	462b      	mov	r3, r5
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	442b      	add	r3, r5
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4423      	add	r3, r4
 8001ccc:	3308      	adds	r3, #8
 8001cce:	681b      	ldr	r3, [r3, #0]
					led_set_RGB(i, LED[ledColor].red, LED[ledColor].green,
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	f000 ffe1 	bl	8002c98 <led_set_RGB>
 8001cd6:	e01c      	b.n	8001d12 <manageLed+0x29a>
 8001cd8:	200003bd 	.word	0x200003bd
 8001cdc:	20000a10 	.word	0x20000a10
 8001ce0:	2000000c 	.word	0x2000000c
 8001ce4:	200003ba 	.word	0x200003ba
 8001ce8:	200003bb 	.word	0x200003bb
 8001cec:	48000800 	.word	0x48000800
 8001cf0:	200003bf 	.word	0x200003bf
 8001cf4:	2000000d 	.word	0x2000000d
 8001cf8:	200003bc 	.word	0x200003bc
 8001cfc:	20000088 	.word	0x20000088
 8001d00:	200003be 	.word	0x200003be
				else
					led_set_RGB(i, 0, 0, 0);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	b2d8      	uxtb	r0, r3
 8001d08:	2300      	movs	r3, #0
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	f000 ffc3 	bl	8002c98 <led_set_RGB>
			for (int i = 0; i < num_led; i++) {
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3301      	adds	r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b0b      	cmp	r3, #11
 8001d1c:	dd9c      	ble.n	8001c58 <manageLed+0x1e0>
			}
			fillBufferAll();
 8001d1e:	f001 f8c3 	bl	8002ea8 <fillBufferAll>
		}

		if (overFlowFlag > 10) {
 8001d22:	4b87      	ldr	r3, [pc, #540]	@ (8001f40 <manageLed+0x4c8>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b0a      	cmp	r3, #10
 8001d2a:	f240 80e2 	bls.w	8001ef2 <manageLed+0x47a>
			overFlowFlag = 0;
 8001d2e:	4b84      	ldr	r3, [pc, #528]	@ (8001f40 <manageLed+0x4c8>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
			if (Blink == 1) {
 8001d34:	4b83      	ldr	r3, [pc, #524]	@ (8001f44 <manageLed+0x4cc>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d010      	beq.n	8001d5e <manageLed+0x2e6>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_SET) //if off
 8001d3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d40:	4881      	ldr	r0, [pc, #516]	@ (8001f48 <manageLed+0x4d0>)
 8001d42:	f003 fefd 	bl	8005b40 <HAL_GPIO_ReadPin>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d105      	bne.n	8001d58 <manageLed+0x2e0>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // make on
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d52:	487d      	ldr	r0, [pc, #500]	@ (8001f48 <manageLed+0x4d0>)
 8001d54:	f003 ff0c 	bl	8005b70 <HAL_GPIO_WritePin>
				led_render();
 8001d58:	f001 f934 	bl	8002fc4 <led_render>
 8001d5c:	e005      	b.n	8001d6a <manageLed+0x2f2>
			} else
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d64:	4878      	ldr	r0, [pc, #480]	@ (8001f48 <manageLed+0x4d0>)
 8001d66:	f003 ff03 	bl	8005b70 <HAL_GPIO_WritePin>

			Blink = !Blink;
 8001d6a:	4b76      	ldr	r3, [pc, #472]	@ (8001f44 <manageLed+0x4cc>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	bf14      	ite	ne
 8001d72:	2301      	movne	r3, #1
 8001d74:	2300      	moveq	r3, #0
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f083 0301 	eor.w	r3, r3, #1
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	4b6f      	ldr	r3, [pc, #444]	@ (8001f44 <manageLed+0x4cc>)
 8001d86:	701a      	strb	r2, [r3, #0]
 8001d88:	e0b3      	b.n	8001ef2 <manageLed+0x47a>
		}
		//---------------
	} else if (all_off == 1) {
 8001d8a:	4b70      	ldr	r3, [pc, #448]	@ (8001f4c <manageLed+0x4d4>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00f      	beq.n	8001db2 <manageLed+0x33a>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_RESET) //if on
 8001d92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d96:	486c      	ldr	r0, [pc, #432]	@ (8001f48 <manageLed+0x4d0>)
 8001d98:	f003 fed2 	bl	8005b40 <HAL_GPIO_ReadPin>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 80a7 	bne.w	8001ef2 <manageLed+0x47a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // make off
 8001da4:	2201      	movs	r2, #1
 8001da6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001daa:	4867      	ldr	r0, [pc, #412]	@ (8001f48 <manageLed+0x4d0>)
 8001dac:	f003 fee0 	bl	8005b70 <HAL_GPIO_WritePin>
 8001db0:	e09f      	b.n	8001ef2 <manageLed+0x47a>
		//---------------
	} else {
		anyUpdate = 0;
 8001db2:	4b67      	ldr	r3, [pc, #412]	@ (8001f50 <manageLed+0x4d8>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < num_led; i++) {
 8001db8:	2300      	movs	r3, #0
 8001dba:	72fb      	strb	r3, [r7, #11]
 8001dbc:	e020      	b.n	8001e00 <manageLed+0x388>
			anyUpdate = anyUpdate || (yarn[i].ledState != yarn[i].ledStatePre);
 8001dbe:	4b64      	ldr	r3, [pc, #400]	@ (8001f50 <manageLed+0x4d8>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d111      	bne.n	8001dea <manageLed+0x372>
 8001dc6:	7afb      	ldrb	r3, [r7, #11]
 8001dc8:	4a62      	ldr	r2, [pc, #392]	@ (8001f54 <manageLed+0x4dc>)
 8001dca:	2134      	movs	r1, #52	@ 0x34
 8001dcc:	fb01 f303 	mul.w	r3, r1, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	332c      	adds	r3, #44	@ 0x2c
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	7afb      	ldrb	r3, [r7, #11]
 8001dd8:	495e      	ldr	r1, [pc, #376]	@ (8001f54 <manageLed+0x4dc>)
 8001dda:	2034      	movs	r0, #52	@ 0x34
 8001ddc:	fb00 f303 	mul.w	r3, r0, r3
 8001de0:	440b      	add	r3, r1
 8001de2:	3330      	adds	r3, #48	@ 0x30
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d001      	beq.n	8001dee <manageLed+0x376>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <manageLed+0x378>
 8001dee:	2300      	movs	r3, #0
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4b56      	ldr	r3, [pc, #344]	@ (8001f50 <manageLed+0x4d8>)
 8001df8:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < num_led; i++) {
 8001dfa:	7afb      	ldrb	r3, [r7, #11]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	72fb      	strb	r3, [r7, #11]
 8001e00:	7afb      	ldrb	r3, [r7, #11]
 8001e02:	2b0b      	cmp	r3, #11
 8001e04:	d9db      	bls.n	8001dbe <manageLed+0x346>
		}
		if (anyUpdate) {
 8001e06:	4b52      	ldr	r3, [pc, #328]	@ (8001f50 <manageLed+0x4d8>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d03f      	beq.n	8001e8e <manageLed+0x416>
			for (int i = 0; i < num_led; i++) {
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	e037      	b.n	8001e84 <manageLed+0x40c>
				ledColor = yarn[i].ledState;
 8001e14:	4a4f      	ldr	r2, [pc, #316]	@ (8001f54 <manageLed+0x4dc>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2134      	movs	r1, #52	@ 0x34
 8001e1a:	fb01 f303 	mul.w	r3, r1, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	332c      	adds	r3, #44	@ 0x2c
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4b4c      	ldr	r3, [pc, #304]	@ (8001f58 <manageLed+0x4e0>)
 8001e28:	701a      	strb	r2, [r3, #0]
				led_set_RGB(i, LED[ledColor].red, LED[ledColor].green,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	b2d8      	uxtb	r0, r3
 8001e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f58 <manageLed+0x4e0>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	4619      	mov	r1, r3
 8001e36:	4a49      	ldr	r2, [pc, #292]	@ (8001f5c <manageLed+0x4e4>)
 8001e38:	460b      	mov	r3, r1
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	440b      	add	r3, r1
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	b2d9      	uxtb	r1, r3
 8001e46:	4b44      	ldr	r3, [pc, #272]	@ (8001f58 <manageLed+0x4e0>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	461c      	mov	r4, r3
 8001e4e:	4a43      	ldr	r2, [pc, #268]	@ (8001f5c <manageLed+0x4e4>)
 8001e50:	4623      	mov	r3, r4
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4423      	add	r3, r4
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	b2da      	uxtb	r2, r3
						LED[ledColor].blue);
 8001e60:	4b3d      	ldr	r3, [pc, #244]	@ (8001f58 <manageLed+0x4e0>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	461d      	mov	r5, r3
 8001e68:	4c3c      	ldr	r4, [pc, #240]	@ (8001f5c <manageLed+0x4e4>)
 8001e6a:	462b      	mov	r3, r5
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	442b      	add	r3, r5
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4423      	add	r3, r4
 8001e74:	3308      	adds	r3, #8
 8001e76:	681b      	ldr	r3, [r3, #0]
				led_set_RGB(i, LED[ledColor].red, LED[ledColor].green,
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f000 ff0d 	bl	8002c98 <led_set_RGB>
			for (int i = 0; i < num_led; i++) {
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3301      	adds	r3, #1
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b0b      	cmp	r3, #11
 8001e88:	ddc4      	ble.n	8001e14 <manageLed+0x39c>
			}
			fillBufferAll();
 8001e8a:	f001 f80d 	bl	8002ea8 <fillBufferAll>
		}
//		overFlowFlag++;
		if (overFlowFlag > 10) {
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f40 <manageLed+0x4c8>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b0a      	cmp	r3, #10
 8001e96:	d92a      	bls.n	8001eee <manageLed+0x476>
			overFlowFlag = 0;
 8001e98:	4b29      	ldr	r3, [pc, #164]	@ (8001f40 <manageLed+0x4c8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
			if (Blink == 1) {
 8001e9e:	4b29      	ldr	r3, [pc, #164]	@ (8001f44 <manageLed+0x4cc>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00e      	beq.n	8001ec4 <manageLed+0x44c>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_SET) //if off
 8001ea6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001eaa:	4827      	ldr	r0, [pc, #156]	@ (8001f48 <manageLed+0x4d0>)
 8001eac:	f003 fe48 	bl	8005b40 <HAL_GPIO_ReadPin>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d10c      	bne.n	8001ed0 <manageLed+0x458>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // make on
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ebc:	4822      	ldr	r0, [pc, #136]	@ (8001f48 <manageLed+0x4d0>)
 8001ebe:	f003 fe57 	bl	8005b70 <HAL_GPIO_WritePin>
 8001ec2:	e005      	b.n	8001ed0 <manageLed+0x458>

			} else
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001eca:	481f      	ldr	r0, [pc, #124]	@ (8001f48 <manageLed+0x4d0>)
 8001ecc:	f003 fe50 	bl	8005b70 <HAL_GPIO_WritePin>

			Blink = !Blink;
 8001ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f44 <manageLed+0x4cc>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf14      	ite	ne
 8001ed8:	2301      	movne	r3, #1
 8001eda:	2300      	moveq	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	f083 0301 	eor.w	r3, r3, #1
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b16      	ldr	r3, [pc, #88]	@ (8001f44 <manageLed+0x4cc>)
 8001eec:	701a      	strb	r2, [r3, #0]
		}
		led_render();
 8001eee:	f001 f869 	bl	8002fc4 <led_render>
	}
	outCircuitPre = outCircuit;
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f60 <manageLed+0x4e8>)
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f64 <manageLed+0x4ec>)
 8001ef8:	701a      	strb	r2, [r3, #0]
	torn_statPre = torn_stat;
 8001efa:	4b1b      	ldr	r3, [pc, #108]	@ (8001f68 <manageLed+0x4f0>)
 8001efc:	781a      	ldrb	r2, [r3, #0]
 8001efe:	4b1b      	ldr	r3, [pc, #108]	@ (8001f6c <manageLed+0x4f4>)
 8001f00:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_led; i++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	603b      	str	r3, [r7, #0]
 8001f06:	e012      	b.n	8001f2e <manageLed+0x4b6>
		yarn[i].ledStatePre = yarn[i].ledState;
 8001f08:	4a12      	ldr	r2, [pc, #72]	@ (8001f54 <manageLed+0x4dc>)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2134      	movs	r1, #52	@ 0x34
 8001f0e:	fb01 f303 	mul.w	r3, r1, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	332c      	adds	r3, #44	@ 0x2c
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	490e      	ldr	r1, [pc, #56]	@ (8001f54 <manageLed+0x4dc>)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2034      	movs	r0, #52	@ 0x34
 8001f1e:	fb00 f303 	mul.w	r3, r0, r3
 8001f22:	440b      	add	r3, r1
 8001f24:	3330      	adds	r3, #48	@ 0x30
 8001f26:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < num_led; i++)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2b0b      	cmp	r3, #11
 8001f32:	dde9      	ble.n	8001f08 <manageLed+0x490>
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200003b7 	.word	0x200003b7
 8001f44:	2000000e 	.word	0x2000000e
 8001f48:	48000800 	.word	0x48000800
 8001f4c:	2000000c 	.word	0x2000000c
 8001f50:	200007e4 	.word	0x200007e4
 8001f54:	20000a10 	.word	0x20000a10
 8001f58:	200003bc 	.word	0x200003bc
 8001f5c:	20000088 	.word	0x20000088
 8001f60:	200003ba 	.word	0x200003ba
 8001f64:	200003bb 	.word	0x200003bb
 8001f68:	200003bd 	.word	0x200003bd
 8001f6c:	200003be 	.word	0x200003be

08001f70 <CheckState>:

//decision function (600ms)
void CheckState(void) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
	if (IRreceive == 0) {
 8001f76:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <CheckState+0x40>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	f083 0301 	eor.w	r3, r3, #1
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d011      	beq.n	8001fa8 <CheckState+0x38>
		for (int i = 0; i < NUM_YARN; i++)
 8001f84:	2300      	movs	r3, #0
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	e00b      	b.n	8001fa2 <CheckState+0x32>
			yarn_state(&yarn[i]);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2234      	movs	r2, #52	@ 0x34
 8001f8e:	fb02 f303 	mul.w	r3, r2, r3
 8001f92:	4a08      	ldr	r2, [pc, #32]	@ (8001fb4 <CheckState+0x44>)
 8001f94:	4413      	add	r3, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f001 f94c 	bl	8003234 <yarn_state>
		for (int i = 0; i < NUM_YARN; i++)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b0b      	cmp	r3, #11
 8001fa6:	ddf0      	ble.n	8001f8a <CheckState+0x1a>
	}
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200003b8 	.word	0x200003b8
 8001fb4:	20000a10 	.word	0x20000a10

08001fb8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b0a8      	sub	sp, #160	@ 0xa0
 8001fbc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001fbe:	f001 f9f6 	bl	80033ae <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001fc2:	f000 f9a3 	bl	800230c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001fc6:	f7ff fa5d 	bl	8001484 <MX_GPIO_Init>
	MX_DMA_Init();
 8001fca:	f7ff fa21 	bl	8001410 <MX_DMA_Init>
	MX_ADC1_Init();
 8001fce:	f7fe ff51 	bl	8000e74 <MX_ADC1_Init>
	MX_ADC2_Init();
 8001fd2:	f7ff f81b 	bl	800100c <MX_ADC2_Init>
	MX_TIM1_Init();
 8001fd6:	f000 fac5 	bl	8002564 <MX_TIM1_Init>
	MX_TIM4_Init();
 8001fda:	f000 fc1b 	bl	8002814 <MX_TIM4_Init>
	MX_USART1_UART_Init();
 8001fde:	f000 fd85 	bl	8002aec <MX_USART1_UART_Init>
	MX_TIM3_Init();
 8001fe2:	f000 fba5 	bl	8002730 <MX_TIM3_Init>
	MX_TIM2_Init();
 8001fe6:	f000 fb0f 	bl	8002608 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
// Calibrate ADCs
	IR_Init();
 8001fea:	f7ff fab9 	bl	8001560 <IR_Init>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001fee:	217f      	movs	r1, #127	@ 0x7f
 8001ff0:	48ac      	ldr	r0, [pc, #688]	@ (80022a4 <main+0x2ec>)
 8001ff2:	f002 ff01 	bl	8004df8 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001ff6:	217f      	movs	r1, #127	@ 0x7f
 8001ff8:	48ab      	ldr	r0, [pc, #684]	@ (80022a8 <main+0x2f0>)
 8001ffa:	f002 fefd 	bl	8004df8 <HAL_ADCEx_Calibration_Start>
//
//	Start ADCs in independent mode
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1_data, 6);
 8001ffe:	2206      	movs	r2, #6
 8002000:	49aa      	ldr	r1, [pc, #680]	@ (80022ac <main+0x2f4>)
 8002002:	48a8      	ldr	r0, [pc, #672]	@ (80022a4 <main+0x2ec>)
 8002004:	f001 fe50 	bl	8003ca8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) adc2_data, 6);
 8002008:	2206      	movs	r2, #6
 800200a:	49a9      	ldr	r1, [pc, #676]	@ (80022b0 <main+0x2f8>)
 800200c:	48a6      	ldr	r0, [pc, #664]	@ (80022a8 <main+0x2f0>)
 800200e:	f001 fe4b 	bl	8003ca8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim1);
 8002012:	48a8      	ldr	r0, [pc, #672]	@ (80022b4 <main+0x2fc>)
 8002014:	f004 fdee 	bl	8006bf4 <HAL_TIM_Base_Start>
//

	setup_param(&LED[0], 0, 0, 0); //led off
 8002018:	2300      	movs	r3, #0
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	48a6      	ldr	r0, [pc, #664]	@ (80022b8 <main+0x300>)
 8002020:	f7fe fec4 	bl	8000dac <setup_param>
	setup_param(&LED[1], 249, 114, 111); //dirt1
 8002024:	236f      	movs	r3, #111	@ 0x6f
 8002026:	2272      	movs	r2, #114	@ 0x72
 8002028:	21f9      	movs	r1, #249	@ 0xf9
 800202a:	48a4      	ldr	r0, [pc, #656]	@ (80022bc <main+0x304>)
 800202c:	f7fe febe 	bl	8000dac <setup_param>
	setup_param(&LED[2], 250, 0, 0); //dirt2
 8002030:	2300      	movs	r3, #0
 8002032:	2200      	movs	r2, #0
 8002034:	21fa      	movs	r1, #250	@ 0xfa
 8002036:	48a2      	ldr	r0, [pc, #648]	@ (80022c0 <main+0x308>)
 8002038:	f7fe feb8 	bl	8000dac <setup_param>
	setup_param(&LED[3], 0, 0, 250); //flaw
 800203c:	23fa      	movs	r3, #250	@ 0xfa
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	48a0      	ldr	r0, [pc, #640]	@ (80022c4 <main+0x30c>)
 8002044:	f7fe feb2 	bl	8000dac <setup_param>
	setup_param(&LED[4], 0, 230, 80); //tron
 8002048:	2350      	movs	r3, #80	@ 0x50
 800204a:	22e6      	movs	r2, #230	@ 0xe6
 800204c:	2100      	movs	r1, #0
 800204e:	489e      	ldr	r0, [pc, #632]	@ (80022c8 <main+0x310>)
 8002050:	f7fe feac 	bl	8000dac <setup_param>
	setup_param(&LED[5], 0, 250, 0); //outcircuit
 8002054:	2300      	movs	r3, #0
 8002056:	22fa      	movs	r2, #250	@ 0xfa
 8002058:	2100      	movs	r1, #0
 800205a:	489c      	ldr	r0, [pc, #624]	@ (80022cc <main+0x314>)
 800205c:	f7fe fea6 	bl	8000dac <setup_param>

// Make sure PB3 is high when sending data to neopixels
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002060:	2200      	movs	r2, #0
 8002062:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002066:	489a      	ldr	r0, [pc, #616]	@ (80022d0 <main+0x318>)
 8002068:	f003 fd82 	bl	8005b70 <HAL_GPIO_WritePin>
//Start Alarm
	rainbow(8);
 800206c:	2008      	movs	r0, #8
 800206e:	f000 ffcf 	bl	8003010 <rainbow>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002072:	2201      	movs	r2, #1
 8002074:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002078:	4895      	ldr	r0, [pc, #596]	@ (80022d0 <main+0x318>)
 800207a:	f003 fd79 	bl	8005b70 <HAL_GPIO_WritePin>

//	Calibration
	uint32_t axtim_calib, calib_end;
	uint32_t tim_now = HAL_GetTick();
 800207e:	f001 f9fb 	bl	8003478 <HAL_GetTick>
 8002082:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
	calib_end = tim_now + calib_tim;
 8002086:	4b93      	ldr	r3, [pc, #588]	@ (80022d4 <main+0x31c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002090:	4413      	add	r3, r2
 8002092:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	while (tim_now <= calib_end) {
 8002096:	e07a      	b.n	800218e <main+0x1d6>
		for (int j = 0; j < NUM_YARN / 2; j++)
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800209e:	e014      	b.n	80020ca <main+0x112>
			yarn[j].read_sens = adc1_data[j];
 80020a0:	4a82      	ldr	r2, [pc, #520]	@ (80022ac <main+0x2f4>)
 80020a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80020a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	4618      	mov	r0, r3
 80020ae:	4a8a      	ldr	r2, [pc, #552]	@ (80022d8 <main+0x320>)
 80020b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80020b4:	2134      	movs	r1, #52	@ 0x34
 80020b6:	fb01 f303 	mul.w	r3, r1, r3
 80020ba:	4413      	add	r3, r2
 80020bc:	3320      	adds	r3, #32
 80020be:	6018      	str	r0, [r3, #0]
		for (int j = 0; j < NUM_YARN / 2; j++)
 80020c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80020c4:	3301      	adds	r3, #1
 80020c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80020ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80020ce:	2b05      	cmp	r3, #5
 80020d0:	dde6      	ble.n	80020a0 <main+0xe8>
		for (int j = NUM_YARN / 2; j < NUM_YARN; j++)
 80020d2:	2306      	movs	r3, #6
 80020d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80020d8:	e015      	b.n	8002106 <main+0x14e>
			yarn[j].read_sens = adc2_data[j - 6];
 80020da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020de:	3b06      	subs	r3, #6
 80020e0:	4a73      	ldr	r2, [pc, #460]	@ (80022b0 <main+0x2f8>)
 80020e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	4618      	mov	r0, r3
 80020ea:	4a7b      	ldr	r2, [pc, #492]	@ (80022d8 <main+0x320>)
 80020ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020f0:	2134      	movs	r1, #52	@ 0x34
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	3320      	adds	r3, #32
 80020fa:	6018      	str	r0, [r3, #0]
		for (int j = NUM_YARN / 2; j < NUM_YARN; j++)
 80020fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002100:	3301      	adds	r3, #1
 8002102:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002106:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800210a:	2b0b      	cmp	r3, #11
 800210c:	dde5      	ble.n	80020da <main+0x122>

		for (int i = 0; i < NUM_YARN; i++)
 800210e:	2300      	movs	r3, #0
 8002110:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002114:	e00e      	b.n	8002134 <main+0x17c>
			calibration(&yarn[i]);
 8002116:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800211a:	2234      	movs	r2, #52	@ 0x34
 800211c:	fb02 f303 	mul.w	r3, r2, r3
 8002120:	4a6d      	ldr	r2, [pc, #436]	@ (80022d8 <main+0x320>)
 8002122:	4413      	add	r3, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f000 ffd8 	bl	80030da <calibration>
		for (int i = 0; i < NUM_YARN; i++)
 800212a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800212e:	3301      	adds	r3, #1
 8002130:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002134:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002138:	2b0b      	cmp	r3, #11
 800213a:	ddec      	ble.n	8002116 <main+0x15e>

		if (HAL_GetTick() - axtim_calib > int_calib) {
 800213c:	f001 f99c 	bl	8003478 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	4a64      	ldr	r2, [pc, #400]	@ (80022dc <main+0x324>)
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	4293      	cmp	r3, r2
 800214e:	d91a      	bls.n	8002186 <main+0x1ce>
			axtim_calib = HAL_GetTick();
 8002150:	f001 f992 	bl	8003478 <HAL_GetTick>
 8002154:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
			for (int i = 0; i < NUM_YARN; i++)
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800215e:	e00e      	b.n	800217e <main+0x1c6>
				resetCalibration(&yarn[i]);
 8002160:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002164:	2234      	movs	r2, #52	@ 0x34
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	4a5b      	ldr	r2, [pc, #364]	@ (80022d8 <main+0x320>)
 800216c:	4413      	add	r3, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f000 ffe3 	bl	800313a <resetCalibration>
			for (int i = 0; i < NUM_YARN; i++)
 8002174:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002178:	3301      	adds	r3, #1
 800217a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800217e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002182:	2b0b      	cmp	r3, #11
 8002184:	ddec      	ble.n	8002160 <main+0x1a8>
		}
		tim_now = HAL_GetTick();
 8002186:	f001 f977 	bl	8003478 <HAL_GetTick>
 800218a:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
	while (tim_now <= calib_end) {
 800218e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002192:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002196:	429a      	cmp	r2, r3
 8002198:	f67f af7e 	bls.w	8002098 <main+0xe0>
	}
	flush();
 800219c:	f000 fdb4 	bl	8002d08 <flush>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80021a0:	2200      	movs	r2, #0
 80021a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021a6:	484a      	ldr	r0, [pc, #296]	@ (80022d0 <main+0x318>)
 80021a8:	f003 fce2 	bl	8005b70 <HAL_GPIO_WritePin>
	//End of Calibration
	fadeNeopixels();
 80021ac:	f7fe fe14 	bl	8000dd8 <fadeNeopixels>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80021b0:	2201      	movs	r2, #1
 80021b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021b6:	4846      	ldr	r0, [pc, #280]	@ (80022d0 <main+0x318>)
 80021b8:	f003 fcda 	bl	8005b70 <HAL_GPIO_WritePin>

	MX_TIM2_Init();
 80021bc:	f000 fa24 	bl	8002608 <MX_TIM2_Init>
//	HAL_TIM_Base_Start_IT(&htim2);
//	HAL_TIM_OC_MspInit(&htim2);
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 80021c0:	2100      	movs	r1, #0
 80021c2:	4847      	ldr	r0, [pc, #284]	@ (80022e0 <main+0x328>)
 80021c4:	f004 fdda 	bl	8006d7c <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 80021c8:	2104      	movs	r1, #4
 80021ca:	4845      	ldr	r0, [pc, #276]	@ (80022e0 <main+0x328>)
 80021cc:	f004 fdd6 	bl	8006d7c <HAL_TIM_OC_Start_IT>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		char msg[128];
		sprintf(msg, "%4u \r\n", yarn[11].read_sens);
 80021d0:	4b41      	ldr	r3, [pc, #260]	@ (80022d8 <main+0x320>)
 80021d2:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
 80021d6:	1d3b      	adds	r3, r7, #4
 80021d8:	4942      	ldr	r1, [pc, #264]	@ (80022e4 <main+0x32c>)
 80021da:	4618      	mov	r0, r3
 80021dc:	f007 fee8 	bl	8009fb0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), 10);
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f81c 	bl	8000220 <strlen>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	1d39      	adds	r1, r7, #4
 80021ee:	230a      	movs	r3, #10
 80021f0:	483d      	ldr	r0, [pc, #244]	@ (80022e8 <main+0x330>)
 80021f2:	f007 f861 	bl	80092b8 <HAL_UART_Transmit>
		HAL_Delay(10); // Slow down to avoid UART overrun
 80021f6:	200a      	movs	r0, #10
 80021f8:	f001 f94a 	bl	8003490 <HAL_Delay>

		if (FlagCheckState) {
 80021fc:	4b3b      	ldr	r3, [pc, #236]	@ (80022ec <main+0x334>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d004      	beq.n	8002210 <main+0x258>
			FlagCheckState = 0;    // Clear flag
 8002206:	4b39      	ldr	r3, [pc, #228]	@ (80022ec <main+0x334>)
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
			CheckState(); // Execute 600 ms task
 800220c:	f7ff feb0 	bl	8001f70 <CheckState>
		}
		if (FlagLedState == true) {
 8002210:	4b37      	ldr	r3, [pc, #220]	@ (80022f0 <main+0x338>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d10b      	bne.n	8002232 <main+0x27a>
			FlagLedState = false;
 800221a:	4b35      	ldr	r3, [pc, #212]	@ (80022f0 <main+0x338>)
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
			manageLed();
 8002220:	f7ff fc2a 	bl	8001a78 <manageLed>
			overFlowFlag++;
 8002224:	4b33      	ldr	r3, [pc, #204]	@ (80022f4 <main+0x33c>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	3301      	adds	r3, #1
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4b31      	ldr	r3, [pc, #196]	@ (80022f4 <main+0x33c>)
 8002230:	701a      	strb	r2, [r3, #0]
		}

		if (newIRDataFlag == 1) {
 8002232:	4b31      	ldr	r3, [pc, #196]	@ (80022f8 <main+0x340>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d108      	bne.n	800224e <main+0x296>
			command = (IR_GetCommand() >> 8) & 0xFF; // Update command first
 800223c:	f7ff fb6c 	bl	8001918 <IR_GetCommand>
 8002240:	4603      	mov	r3, r0
 8002242:	121b      	asrs	r3, r3, #8
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4b2d      	ldr	r3, [pc, #180]	@ (80022fc <main+0x344>)
 8002248:	701a      	strb	r2, [r3, #0]
			IR_Reset(); // Clear detection flag
 800224a:	f7ff fb71 	bl	8001930 <IR_Reset>
		}

		if (command == 0x00) {
 800224e:	4b2b      	ldr	r3, [pc, #172]	@ (80022fc <main+0x344>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d11f      	bne.n	8002298 <main+0x2e0>
			IRreceivePre = IRreceive;
 8002258:	4b29      	ldr	r3, [pc, #164]	@ (8002300 <main+0x348>)
 800225a:	781a      	ldrb	r2, [r3, #0]
 800225c:	4b29      	ldr	r3, [pc, #164]	@ (8002304 <main+0x34c>)
 800225e:	701a      	strb	r2, [r3, #0]
			IRreceive = 1;
 8002260:	4b27      	ldr	r3, [pc, #156]	@ (8002300 <main+0x348>)
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
			if (IRreceive != IRreceivePre) {
 8002266:	4b26      	ldr	r3, [pc, #152]	@ (8002300 <main+0x348>)
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	4b26      	ldr	r3, [pc, #152]	@ (8002304 <main+0x34c>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d00e      	beq.n	8002290 <main+0x2d8>
				outCircuit = !outCircuit;
 8002272:	4b25      	ldr	r3, [pc, #148]	@ (8002308 <main+0x350>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	bf14      	ite	ne
 800227a:	2301      	movne	r3, #1
 800227c:	2300      	moveq	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	f083 0301 	eor.w	r3, r3, #1
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	b2da      	uxtb	r2, r3
 800228c:	4b1e      	ldr	r3, [pc, #120]	@ (8002308 <main+0x350>)
 800228e:	701a      	strb	r2, [r3, #0]
			}
			command = 100; // Prevent re-triggering
 8002290:	4b1a      	ldr	r3, [pc, #104]	@ (80022fc <main+0x344>)
 8002292:	2264      	movs	r2, #100	@ 0x64
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	e002      	b.n	800229e <main+0x2e6>
		} else
			IRreceive = 0;
 8002298:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <main+0x348>)
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]

		__WFI();
 800229e:	bf30      	wfi
	while (1) {
 80022a0:	e796      	b.n	80021d0 <main+0x218>
 80022a2:	bf00      	nop
 80022a4:	200000d0 	.word	0x200000d0
 80022a8:	2000013c 	.word	0x2000013c
 80022ac:	2000039c 	.word	0x2000039c
 80022b0:	200003a8 	.word	0x200003a8
 80022b4:	200007ec 	.word	0x200007ec
 80022b8:	20000088 	.word	0x20000088
 80022bc:	20000094 	.word	0x20000094
 80022c0:	200000a0 	.word	0x200000a0
 80022c4:	200000ac 	.word	0x200000ac
 80022c8:	200000b8 	.word	0x200000b8
 80022cc:	200000c4 	.word	0x200000c4
 80022d0:	48000800 	.word	0x48000800
 80022d4:	20000008 	.word	0x20000008
 80022d8:	20000a10 	.word	0x20000a10
 80022dc:	20000004 	.word	0x20000004
 80022e0:	20000838 	.word	0x20000838
 80022e4:	0800a908 	.word	0x0800a908
 80022e8:	2000097c 	.word	0x2000097c
 80022ec:	200003b5 	.word	0x200003b5
 80022f0:	200003b6 	.word	0x200003b6
 80022f4:	200003b7 	.word	0x200003b7
 80022f8:	200003b4 	.word	0x200003b4
 80022fc:	20000000 	.word	0x20000000
 8002300:	200003b8 	.word	0x200003b8
 8002304:	200003b9 	.word	0x200003b9
 8002308:	200003ba 	.word	0x200003ba

0800230c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b094      	sub	sp, #80	@ 0x50
 8002310:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002312:	f107 0318 	add.w	r3, r7, #24
 8002316:	2238      	movs	r2, #56	@ 0x38
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f007 fe68 	bl	8009ff0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002320:	1d3b      	adds	r3, r7, #4
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	60da      	str	r2, [r3, #12]
 800232c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800232e:	2000      	movs	r0, #0
 8002330:	f003 fc36 	bl	8005ba0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002334:	2301      	movs	r3, #1
 8002336:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002338:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800233c:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800233e:	2302      	movs	r3, #2
 8002340:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002342:	2303      	movs	r3, #3
 8002344:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002346:	2302      	movs	r3, #2
 8002348:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800234a:	2355      	movs	r3, #85	@ 0x55
 800234c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800234e:	2302      	movs	r3, #2
 8002350:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002352:	2302      	movs	r3, #2
 8002354:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002356:	2302      	movs	r3, #2
 8002358:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800235a:	f107 0318 	add.w	r3, r7, #24
 800235e:	4618      	mov	r0, r3
 8002360:	f003 fcd2 	bl	8005d08 <HAL_RCC_OscConfig>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <SystemClock_Config+0x62>
		Error_Handler();
 800236a:	f000 f818 	bl	800239e <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800236e:	230f      	movs	r3, #15
 8002370:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002372:	2303      	movs	r3, #3
 8002374:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	2104      	movs	r1, #4
 8002386:	4618      	mov	r0, r3
 8002388:	f003 ffd0 	bl	800632c <HAL_RCC_ClockConfig>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <SystemClock_Config+0x8a>
		Error_Handler();
 8002392:	f000 f804 	bl	800239e <Error_Handler>
	}
}
 8002396:	bf00      	nop
 8002398:	3750      	adds	r7, #80	@ 0x50
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a2:	b672      	cpsid	i
}
 80023a4:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023a6:	bf00      	nop
 80023a8:	e7fd      	b.n	80023a6 <Error_Handler+0x8>
	...

080023ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b2:	4b0f      	ldr	r3, [pc, #60]	@ (80023f0 <HAL_MspInit+0x44>)
 80023b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b6:	4a0e      	ldr	r2, [pc, #56]	@ (80023f0 <HAL_MspInit+0x44>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80023be:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <HAL_MspInit+0x44>)
 80023c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <HAL_MspInit+0x44>)
 80023cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ce:	4a08      	ldr	r2, [pc, #32]	@ (80023f0 <HAL_MspInit+0x44>)
 80023d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80023d6:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <HAL_MspInit+0x44>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80023e2:	f003 fc81 	bl	8005ce8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000

080023f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <NMI_Handler+0x4>

080023fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <HardFault_Handler+0x4>

08002404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <MemManage_Handler+0x4>

0800240c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <BusFault_Handler+0x4>

08002414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002418:	bf00      	nop
 800241a:	e7fd      	b.n	8002418 <UsageFault_Handler+0x4>

0800241c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800244a:	f001 f803 	bl	8003454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002458:	4802      	ldr	r0, [pc, #8]	@ (8002464 <DMA1_Channel1_IRQHandler+0x10>)
 800245a:	f003 f89f 	bl	800559c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	200001a8 	.word	0x200001a8

08002468 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800246c:	4802      	ldr	r0, [pc, #8]	@ (8002478 <DMA1_Channel2_IRQHandler+0x10>)
 800246e:	f003 f895 	bl	800559c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000208 	.word	0x20000208

0800247c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch4);
 8002480:	4802      	ldr	r0, [pc, #8]	@ (800248c <DMA1_Channel3_IRQHandler+0x10>)
 8002482:	f003 f88b 	bl	800559c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	2000091c 	.word	0x2000091c

08002490 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002494:	4803      	ldr	r0, [pc, #12]	@ (80024a4 <ADC1_2_IRQHandler+0x14>)
 8002496:	f001 fcbb 	bl	8003e10 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800249a:	4803      	ldr	r0, [pc, #12]	@ (80024a8 <ADC1_2_IRQHandler+0x18>)
 800249c:	f001 fcb8 	bl	8003e10 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	200000d0 	.word	0x200000d0
 80024a8:	2000013c 	.word	0x2000013c

080024ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024b0:	4802      	ldr	r0, [pc, #8]	@ (80024bc <TIM2_IRQHandler+0x10>)
 80024b2:	f005 fac5 	bl	8007a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000838 	.word	0x20000838

080024c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024c4:	4802      	ldr	r0, [pc, #8]	@ (80024d0 <TIM3_IRQHandler+0x10>)
 80024c6:	f005 fabb 	bl	8007a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000884 	.word	0x20000884

080024d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024dc:	4a14      	ldr	r2, [pc, #80]	@ (8002530 <_sbrk+0x5c>)
 80024de:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <_sbrk+0x60>)
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e8:	4b13      	ldr	r3, [pc, #76]	@ (8002538 <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024f0:	4b11      	ldr	r3, [pc, #68]	@ (8002538 <_sbrk+0x64>)
 80024f2:	4a12      	ldr	r2, [pc, #72]	@ (800253c <_sbrk+0x68>)
 80024f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024f6:	4b10      	ldr	r3, [pc, #64]	@ (8002538 <_sbrk+0x64>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	429a      	cmp	r2, r3
 8002502:	d207      	bcs.n	8002514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002504:	f007 fd7c 	bl	800a000 <__errno>
 8002508:	4603      	mov	r3, r0
 800250a:	220c      	movs	r2, #12
 800250c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800250e:	f04f 33ff 	mov.w	r3, #4294967295
 8002512:	e009      	b.n	8002528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002514:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <_sbrk+0x64>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800251a:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <_sbrk+0x64>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	4a05      	ldr	r2, [pc, #20]	@ (8002538 <_sbrk+0x64>)
 8002524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002526:	68fb      	ldr	r3, [r7, #12]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20008000 	.word	0x20008000
 8002534:	00000400 	.word	0x00000400
 8002538:	200007e8 	.word	0x200007e8
 800253c:	20000dd0 	.word	0x20000dd0

08002540 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002544:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <SystemInit+0x20>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800254a:	4a05      	ldr	r2, [pc, #20]	@ (8002560 <SystemInit+0x20>)
 800254c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002550:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800256a:	f107 0310 	add.w	r3, r7, #16
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002578:	1d3b      	adds	r3, r7, #4
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002582:	4b1f      	ldr	r3, [pc, #124]	@ (8002600 <MX_TIM1_Init+0x9c>)
 8002584:	4a1f      	ldr	r2, [pc, #124]	@ (8002604 <MX_TIM1_Init+0xa0>)
 8002586:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8002588:	4b1d      	ldr	r3, [pc, #116]	@ (8002600 <MX_TIM1_Init+0x9c>)
 800258a:	22a9      	movs	r2, #169	@ 0xa9
 800258c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258e:	4b1c      	ldr	r3, [pc, #112]	@ (8002600 <MX_TIM1_Init+0x9c>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 8002594:	4b1a      	ldr	r3, [pc, #104]	@ (8002600 <MX_TIM1_Init+0x9c>)
 8002596:	2231      	movs	r2, #49	@ 0x31
 8002598:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800259a:	4b19      	ldr	r3, [pc, #100]	@ (8002600 <MX_TIM1_Init+0x9c>)
 800259c:	2200      	movs	r2, #0
 800259e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025a0:	4b17      	ldr	r3, [pc, #92]	@ (8002600 <MX_TIM1_Init+0x9c>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a6:	4b16      	ldr	r3, [pc, #88]	@ (8002600 <MX_TIM1_Init+0x9c>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025ac:	4814      	ldr	r0, [pc, #80]	@ (8002600 <MX_TIM1_Init+0x9c>)
 80025ae:	f004 fac9 	bl	8006b44 <HAL_TIM_Base_Init>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80025b8:	f7ff fef1 	bl	800239e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025c2:	f107 0310 	add.w	r3, r7, #16
 80025c6:	4619      	mov	r1, r3
 80025c8:	480d      	ldr	r0, [pc, #52]	@ (8002600 <MX_TIM1_Init+0x9c>)
 80025ca:	f005 fdb3 	bl	8008134 <HAL_TIM_ConfigClockSource>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80025d4:	f7ff fee3 	bl	800239e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025d8:	2320      	movs	r3, #32
 80025da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80025dc:	2300      	movs	r3, #0
 80025de:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	4619      	mov	r1, r3
 80025e8:	4805      	ldr	r0, [pc, #20]	@ (8002600 <MX_TIM1_Init+0x9c>)
 80025ea:	f006 fd4d 	bl	8009088 <HAL_TIMEx_MasterConfigSynchronization>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80025f4:	f7ff fed3 	bl	800239e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80025f8:	bf00      	nop
 80025fa:	3720      	adds	r7, #32
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	200007ec 	.word	0x200007ec
 8002604:	40012c00 	.word	0x40012c00

08002608 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08e      	sub	sp, #56	@ 0x38
 800260c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800260e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800261c:	f107 031c 	add.w	r3, r7, #28
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002628:	463b      	mov	r3, r7
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	605a      	str	r2, [r3, #4]
 8002630:	609a      	str	r2, [r3, #8]
 8002632:	60da      	str	r2, [r3, #12]
 8002634:	611a      	str	r2, [r3, #16]
 8002636:	615a      	str	r2, [r3, #20]
 8002638:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800263a:	4b3c      	ldr	r3, [pc, #240]	@ (800272c <MX_TIM2_Init+0x124>)
 800263c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002640:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1700-1;
 8002642:	4b3a      	ldr	r3, [pc, #232]	@ (800272c <MX_TIM2_Init+0x124>)
 8002644:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002648:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264a:	4b38      	ldr	r3, [pc, #224]	@ (800272c <MX_TIM2_Init+0x124>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6100;
 8002650:	4b36      	ldr	r3, [pc, #216]	@ (800272c <MX_TIM2_Init+0x124>)
 8002652:	f241 72d4 	movw	r2, #6100	@ 0x17d4
 8002656:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002658:	4b34      	ldr	r3, [pc, #208]	@ (800272c <MX_TIM2_Init+0x124>)
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265e:	4b33      	ldr	r3, [pc, #204]	@ (800272c <MX_TIM2_Init+0x124>)
 8002660:	2200      	movs	r2, #0
 8002662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002664:	4831      	ldr	r0, [pc, #196]	@ (800272c <MX_TIM2_Init+0x124>)
 8002666:	f004 fa6d 	bl	8006b44 <HAL_TIM_Base_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8002670:	f7ff fe95 	bl	800239e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002678:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800267a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800267e:	4619      	mov	r1, r3
 8002680:	482a      	ldr	r0, [pc, #168]	@ (800272c <MX_TIM2_Init+0x124>)
 8002682:	f005 fd57 	bl	8008134 <HAL_TIM_ConfigClockSource>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800268c:	f7ff fe87 	bl	800239e <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002690:	4826      	ldr	r0, [pc, #152]	@ (800272c <MX_TIM2_Init+0x124>)
 8002692:	f004 fb11 	bl	8006cb8 <HAL_TIM_OC_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800269c:	f7ff fe7f 	bl	800239e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026a8:	f107 031c 	add.w	r3, r7, #28
 80026ac:	4619      	mov	r1, r3
 80026ae:	481f      	ldr	r0, [pc, #124]	@ (800272c <MX_TIM2_Init+0x124>)
 80026b0:	f006 fcea 	bl	8009088 <HAL_TIMEx_MasterConfigSynchronization>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80026ba:	f7ff fe70 	bl	800239e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80026be:	2330      	movs	r3, #48	@ 0x30
 80026c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 80026c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026d0:	463b      	mov	r3, r7
 80026d2:	2200      	movs	r2, #0
 80026d4:	4619      	mov	r1, r3
 80026d6:	4815      	ldr	r0, [pc, #84]	@ (800272c <MX_TIM2_Init+0x124>)
 80026d8:	f005 fb02 	bl	8007ce0 <HAL_TIM_OC_ConfigChannel>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 80026e2:	f7ff fe5c 	bl	800239e <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 80026e6:	4b11      	ldr	r3, [pc, #68]	@ (800272c <MX_TIM2_Init+0x124>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	699a      	ldr	r2, [r3, #24]
 80026ec:	4b0f      	ldr	r3, [pc, #60]	@ (800272c <MX_TIM2_Init+0x124>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f042 0208 	orr.w	r2, r2, #8
 80026f4:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 6000;
 80026f6:	f241 7370 	movw	r3, #6000	@ 0x1770
 80026fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026fc:	463b      	mov	r3, r7
 80026fe:	2204      	movs	r2, #4
 8002700:	4619      	mov	r1, r3
 8002702:	480a      	ldr	r0, [pc, #40]	@ (800272c <MX_TIM2_Init+0x124>)
 8002704:	f005 faec 	bl	8007ce0 <HAL_TIM_OC_ConfigChannel>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 800270e:	f7ff fe46 	bl	800239e <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8002712:	4b06      	ldr	r3, [pc, #24]	@ (800272c <MX_TIM2_Init+0x124>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699a      	ldr	r2, [r3, #24]
 8002718:	4b04      	ldr	r3, [pc, #16]	@ (800272c <MX_TIM2_Init+0x124>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002720:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002722:	bf00      	nop
 8002724:	3738      	adds	r7, #56	@ 0x38
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000838 	.word	0x20000838

08002730 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08c      	sub	sp, #48	@ 0x30
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002736:	f107 0320 	add.w	r3, r7, #32
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002744:	f107 0314 	add.w	r3, r7, #20
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	609a      	str	r2, [r3, #8]
 800275a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800275c:	4b2b      	ldr	r3, [pc, #172]	@ (800280c <MX_TIM3_Init+0xdc>)
 800275e:	4a2c      	ldr	r2, [pc, #176]	@ (8002810 <MX_TIM3_Init+0xe0>)
 8002760:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1700-1;
 8002762:	4b2a      	ldr	r3, [pc, #168]	@ (800280c <MX_TIM3_Init+0xdc>)
 8002764:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002768:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800276a:	4b28      	ldr	r3, [pc, #160]	@ (800280c <MX_TIM3_Init+0xdc>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002770:	4b26      	ldr	r3, [pc, #152]	@ (800280c <MX_TIM3_Init+0xdc>)
 8002772:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002776:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002778:	4b24      	ldr	r3, [pc, #144]	@ (800280c <MX_TIM3_Init+0xdc>)
 800277a:	2200      	movs	r2, #0
 800277c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800277e:	4b23      	ldr	r3, [pc, #140]	@ (800280c <MX_TIM3_Init+0xdc>)
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002784:	4821      	ldr	r0, [pc, #132]	@ (800280c <MX_TIM3_Init+0xdc>)
 8002786:	f004 f9dd 	bl	8006b44 <HAL_TIM_Base_Init>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002790:	f7ff fe05 	bl	800239e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002794:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002798:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800279a:	f107 0320 	add.w	r3, r7, #32
 800279e:	4619      	mov	r1, r3
 80027a0:	481a      	ldr	r0, [pc, #104]	@ (800280c <MX_TIM3_Init+0xdc>)
 80027a2:	f005 fcc7 	bl	8008134 <HAL_TIM_ConfigClockSource>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80027ac:	f7ff fdf7 	bl	800239e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80027b0:	4816      	ldr	r0, [pc, #88]	@ (800280c <MX_TIM3_Init+0xdc>)
 80027b2:	f004 ffa1 	bl	80076f8 <HAL_TIM_IC_Init>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80027bc:	f7ff fdef 	bl	800239e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	4619      	mov	r1, r3
 80027ce:	480f      	ldr	r0, [pc, #60]	@ (800280c <MX_TIM3_Init+0xdc>)
 80027d0:	f006 fc5a 	bl	8009088 <HAL_TIMEx_MasterConfigSynchronization>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80027da:	f7ff fde0 	bl	800239e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80027de:	230a      	movs	r3, #10
 80027e0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80027e2:	2301      	movs	r3, #1
 80027e4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80027ee:	1d3b      	adds	r3, r7, #4
 80027f0:	220c      	movs	r2, #12
 80027f2:	4619      	mov	r1, r3
 80027f4:	4805      	ldr	r0, [pc, #20]	@ (800280c <MX_TIM3_Init+0xdc>)
 80027f6:	f005 faed 	bl	8007dd4 <HAL_TIM_IC_ConfigChannel>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002800:	f7ff fdcd 	bl	800239e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002804:	bf00      	nop
 8002806:	3730      	adds	r7, #48	@ 0x30
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000884 	.word	0x20000884
 8002810:	40000400 	.word	0x40000400

08002814 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08e      	sub	sp, #56	@ 0x38
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800281a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]
 8002824:	609a      	str	r2, [r3, #8]
 8002826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002828:	f107 031c 	add.w	r3, r7, #28
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002834:	463b      	mov	r3, r7
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	60da      	str	r2, [r3, #12]
 8002840:	611a      	str	r2, [r3, #16]
 8002842:	615a      	str	r2, [r3, #20]
 8002844:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002846:	4b2c      	ldr	r3, [pc, #176]	@ (80028f8 <MX_TIM4_Init+0xe4>)
 8002848:	4a2c      	ldr	r2, [pc, #176]	@ (80028fc <MX_TIM4_Init+0xe8>)
 800284a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 70-1;
 800284c:	4b2a      	ldr	r3, [pc, #168]	@ (80028f8 <MX_TIM4_Init+0xe4>)
 800284e:	2245      	movs	r2, #69	@ 0x45
 8002850:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002852:	4b29      	ldr	r3, [pc, #164]	@ (80028f8 <MX_TIM4_Init+0xe4>)
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2;
 8002858:	4b27      	ldr	r3, [pc, #156]	@ (80028f8 <MX_TIM4_Init+0xe4>)
 800285a:	2202      	movs	r2, #2
 800285c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800285e:	4b26      	ldr	r3, [pc, #152]	@ (80028f8 <MX_TIM4_Init+0xe4>)
 8002860:	2200      	movs	r2, #0
 8002862:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002864:	4b24      	ldr	r3, [pc, #144]	@ (80028f8 <MX_TIM4_Init+0xe4>)
 8002866:	2200      	movs	r2, #0
 8002868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800286a:	4823      	ldr	r0, [pc, #140]	@ (80028f8 <MX_TIM4_Init+0xe4>)
 800286c:	f004 f96a 	bl	8006b44 <HAL_TIM_Base_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002876:	f7ff fd92 	bl	800239e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800287a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800287e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002880:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002884:	4619      	mov	r1, r3
 8002886:	481c      	ldr	r0, [pc, #112]	@ (80028f8 <MX_TIM4_Init+0xe4>)
 8002888:	f005 fc54 	bl	8008134 <HAL_TIM_ConfigClockSource>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002892:	f7ff fd84 	bl	800239e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002896:	4818      	ldr	r0, [pc, #96]	@ (80028f8 <MX_TIM4_Init+0xe4>)
 8002898:	f004 fbbc 	bl	8007014 <HAL_TIM_PWM_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80028a2:	f7ff fd7c 	bl	800239e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028ae:	f107 031c 	add.w	r3, r7, #28
 80028b2:	4619      	mov	r1, r3
 80028b4:	4810      	ldr	r0, [pc, #64]	@ (80028f8 <MX_TIM4_Init+0xe4>)
 80028b6:	f006 fbe7 	bl	8009088 <HAL_TIMEx_MasterConfigSynchronization>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80028c0:	f7ff fd6d 	bl	800239e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028c4:	2360      	movs	r3, #96	@ 0x60
 80028c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028d4:	463b      	mov	r3, r7
 80028d6:	220c      	movs	r2, #12
 80028d8:	4619      	mov	r1, r3
 80028da:	4807      	ldr	r0, [pc, #28]	@ (80028f8 <MX_TIM4_Init+0xe4>)
 80028dc:	f005 fb16 	bl	8007f0c <HAL_TIM_PWM_ConfigChannel>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80028e6:	f7ff fd5a 	bl	800239e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80028ea:	4803      	ldr	r0, [pc, #12]	@ (80028f8 <MX_TIM4_Init+0xe4>)
 80028ec:	f000 f8c6 	bl	8002a7c <HAL_TIM_MspPostInit>

}
 80028f0:	bf00      	nop
 80028f2:	3738      	adds	r7, #56	@ 0x38
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	200008d0 	.word	0x200008d0
 80028fc:	40000800 	.word	0x40000800

08002900 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08c      	sub	sp, #48	@ 0x30
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 031c 	add.w	r3, r7, #28
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a50      	ldr	r2, [pc, #320]	@ (8002a60 <HAL_TIM_Base_MspInit+0x160>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10c      	bne.n	800293c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002922:	4b50      	ldr	r3, [pc, #320]	@ (8002a64 <HAL_TIM_Base_MspInit+0x164>)
 8002924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002926:	4a4f      	ldr	r2, [pc, #316]	@ (8002a64 <HAL_TIM_Base_MspInit+0x164>)
 8002928:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800292c:	6613      	str	r3, [r2, #96]	@ 0x60
 800292e:	4b4d      	ldr	r3, [pc, #308]	@ (8002a64 <HAL_TIM_Base_MspInit+0x164>)
 8002930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002932:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002936:	61bb      	str	r3, [r7, #24]
 8002938:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800293a:	e08c      	b.n	8002a56 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002944:	d114      	bne.n	8002970 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002946:	4b47      	ldr	r3, [pc, #284]	@ (8002a64 <HAL_TIM_Base_MspInit+0x164>)
 8002948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294a:	4a46      	ldr	r2, [pc, #280]	@ (8002a64 <HAL_TIM_Base_MspInit+0x164>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6593      	str	r3, [r2, #88]	@ 0x58
 8002952:	4b44      	ldr	r3, [pc, #272]	@ (8002a64 <HAL_TIM_Base_MspInit+0x164>)
 8002954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 800295e:	2200      	movs	r2, #0
 8002960:	210a      	movs	r1, #10
 8002962:	201c      	movs	r0, #28
 8002964:	f002 fc5b 	bl	800521e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002968:	201c      	movs	r0, #28
 800296a:	f002 fc72 	bl	8005252 <HAL_NVIC_EnableIRQ>
}
 800296e:	e072      	b.n	8002a56 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM3)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a3c      	ldr	r2, [pc, #240]	@ (8002a68 <HAL_TIM_Base_MspInit+0x168>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d130      	bne.n	80029dc <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800297a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a64 <HAL_TIM_Base_MspInit+0x164>)
 800297c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297e:	4a39      	ldr	r2, [pc, #228]	@ (8002a64 <HAL_TIM_Base_MspInit+0x164>)
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	6593      	str	r3, [r2, #88]	@ 0x58
 8002986:	4b37      	ldr	r3, [pc, #220]	@ (8002a64 <HAL_TIM_Base_MspInit+0x164>)
 8002988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002992:	4b34      	ldr	r3, [pc, #208]	@ (8002a64 <HAL_TIM_Base_MspInit+0x164>)
 8002994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002996:	4a33      	ldr	r2, [pc, #204]	@ (8002a64 <HAL_TIM_Base_MspInit+0x164>)
 8002998:	f043 0302 	orr.w	r3, r3, #2
 800299c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800299e:	4b31      	ldr	r3, [pc, #196]	@ (8002a64 <HAL_TIM_Base_MspInit+0x164>)
 80029a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = tim3_ch4_IR_Pin;
 80029aa:	2380      	movs	r3, #128	@ 0x80
 80029ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b6:	2300      	movs	r3, #0
 80029b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 80029ba:	230a      	movs	r3, #10
 80029bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(tim3_ch4_IR_GPIO_Port, &GPIO_InitStruct);
 80029be:	f107 031c 	add.w	r3, r7, #28
 80029c2:	4619      	mov	r1, r3
 80029c4:	4829      	ldr	r0, [pc, #164]	@ (8002a6c <HAL_TIM_Base_MspInit+0x16c>)
 80029c6:	f002 ff39 	bl	800583c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	2105      	movs	r1, #5
 80029ce:	201d      	movs	r0, #29
 80029d0:	f002 fc25 	bl	800521e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029d4:	201d      	movs	r0, #29
 80029d6:	f002 fc3c 	bl	8005252 <HAL_NVIC_EnableIRQ>
}
 80029da:	e03c      	b.n	8002a56 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM4)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a23      	ldr	r2, [pc, #140]	@ (8002a70 <HAL_TIM_Base_MspInit+0x170>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d137      	bne.n	8002a56 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a64 <HAL_TIM_Base_MspInit+0x164>)
 80029e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002a64 <HAL_TIM_Base_MspInit+0x164>)
 80029ec:	f043 0304 	orr.w	r3, r3, #4
 80029f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80029f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a64 <HAL_TIM_Base_MspInit+0x164>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch4.Instance = DMA1_Channel3;
 80029fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002a74 <HAL_TIM_Base_MspInit+0x174>)
 8002a00:	4a1d      	ldr	r2, [pc, #116]	@ (8002a78 <HAL_TIM_Base_MspInit+0x178>)
 8002a02:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch4.Init.Request = DMA_REQUEST_TIM4_CH4;
 8002a04:	4b1b      	ldr	r3, [pc, #108]	@ (8002a74 <HAL_TIM_Base_MspInit+0x174>)
 8002a06:	2246      	movs	r2, #70	@ 0x46
 8002a08:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a74 <HAL_TIM_Base_MspInit+0x174>)
 8002a0c:	2210      	movs	r2, #16
 8002a0e:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a10:	4b18      	ldr	r3, [pc, #96]	@ (8002a74 <HAL_TIM_Base_MspInit+0x174>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002a16:	4b17      	ldr	r3, [pc, #92]	@ (8002a74 <HAL_TIM_Base_MspInit+0x174>)
 8002a18:	2280      	movs	r2, #128	@ 0x80
 8002a1a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a1c:	4b15      	ldr	r3, [pc, #84]	@ (8002a74 <HAL_TIM_Base_MspInit+0x174>)
 8002a1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a22:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a24:	4b13      	ldr	r3, [pc, #76]	@ (8002a74 <HAL_TIM_Base_MspInit+0x174>)
 8002a26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a2a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch4.Init.Mode = DMA_NORMAL;
 8002a2c:	4b11      	ldr	r3, [pc, #68]	@ (8002a74 <HAL_TIM_Base_MspInit+0x174>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8002a32:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <HAL_TIM_Base_MspInit+0x174>)
 8002a34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_ch4) != HAL_OK)
 8002a3a:	480e      	ldr	r0, [pc, #56]	@ (8002a74 <HAL_TIM_Base_MspInit+0x174>)
 8002a3c:	f002 fc24 	bl	8005288 <HAL_DMA_Init>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_TIM_Base_MspInit+0x14a>
      Error_Handler();
 8002a46:	f7ff fcaa 	bl	800239e <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim4_ch4);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a09      	ldr	r2, [pc, #36]	@ (8002a74 <HAL_TIM_Base_MspInit+0x174>)
 8002a4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a50:	4a08      	ldr	r2, [pc, #32]	@ (8002a74 <HAL_TIM_Base_MspInit+0x174>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002a56:	bf00      	nop
 8002a58:	3730      	adds	r7, #48	@ 0x30
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40012c00 	.word	0x40012c00
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	48000400 	.word	0x48000400
 8002a70:	40000800 	.word	0x40000800
 8002a74:	2000091c 	.word	0x2000091c
 8002a78:	40020030 	.word	0x40020030

08002a7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 030c 	add.w	r3, r7, #12
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a11      	ldr	r2, [pc, #68]	@ (8002ae0 <HAL_TIM_MspPostInit+0x64>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d11c      	bne.n	8002ad8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <HAL_TIM_MspPostInit+0x68>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa2:	4a10      	ldr	r2, [pc, #64]	@ (8002ae4 <HAL_TIM_MspPostInit+0x68>)
 8002aa4:	f043 0302 	orr.w	r3, r3, #2
 8002aa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae4 <HAL_TIM_MspPostInit+0x68>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = tim4_ch4_neopixels_Pin;
 8002ab6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002aba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(tim4_ch4_neopixels_GPIO_Port, &GPIO_InitStruct);
 8002acc:	f107 030c 	add.w	r3, r7, #12
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4805      	ldr	r0, [pc, #20]	@ (8002ae8 <HAL_TIM_MspPostInit+0x6c>)
 8002ad4:	f002 feb2 	bl	800583c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002ad8:	bf00      	nop
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40000800 	.word	0x40000800
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	48000400 	.word	0x48000400

08002aec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002af0:	4b22      	ldr	r3, [pc, #136]	@ (8002b7c <MX_USART1_UART_Init+0x90>)
 8002af2:	4a23      	ldr	r2, [pc, #140]	@ (8002b80 <MX_USART1_UART_Init+0x94>)
 8002af4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002af6:	4b21      	ldr	r3, [pc, #132]	@ (8002b7c <MX_USART1_UART_Init+0x90>)
 8002af8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002afc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002afe:	4b1f      	ldr	r3, [pc, #124]	@ (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b04:	4b1d      	ldr	r3, [pc, #116]	@ (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8002b10:	4b1a      	ldr	r3, [pc, #104]	@ (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b12:	2208      	movs	r2, #8
 8002b14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b16:	4b19      	ldr	r3, [pc, #100]	@ (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b1c:	4b17      	ldr	r3, [pc, #92]	@ (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b22:	4b16      	ldr	r3, [pc, #88]	@ (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b28:	4b14      	ldr	r3, [pc, #80]	@ (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b2e:	4b13      	ldr	r3, [pc, #76]	@ (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b34:	4811      	ldr	r0, [pc, #68]	@ (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b36:	f006 fb6f 	bl	8009218 <HAL_UART_Init>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b40:	f7ff fc2d 	bl	800239e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b44:	2100      	movs	r1, #0
 8002b46:	480d      	ldr	r0, [pc, #52]	@ (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b48:	f007 f968 	bl	8009e1c <HAL_UARTEx_SetTxFifoThreshold>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002b52:	f7ff fc24 	bl	800239e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b56:	2100      	movs	r1, #0
 8002b58:	4808      	ldr	r0, [pc, #32]	@ (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b5a:	f007 f99d 	bl	8009e98 <HAL_UARTEx_SetRxFifoThreshold>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b64:	f7ff fc1b 	bl	800239e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b68:	4804      	ldr	r0, [pc, #16]	@ (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b6a:	f007 f91e 	bl	8009daa <HAL_UARTEx_DisableFifoMode>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b74:	f7ff fc13 	bl	800239e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b78:	bf00      	nop
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	2000097c 	.word	0x2000097c
 8002b80:	40013800 	.word	0x40013800

08002b84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b09c      	sub	sp, #112	@ 0x70
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b9c:	f107 0318 	add.w	r3, r7, #24
 8002ba0:	2244      	movs	r2, #68	@ 0x44
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f007 fa23 	bl	8009ff0 <memset>
  if(uartHandle->Instance==USART1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a2d      	ldr	r2, [pc, #180]	@ (8002c64 <HAL_UART_MspInit+0xe0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d153      	bne.n	8002c5c <HAL_UART_MspInit+0xd8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bbc:	f107 0318 	add.w	r3, r7, #24
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 fdcf 	bl	8006764 <HAL_RCCEx_PeriphCLKConfig>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002bcc:	f7ff fbe7 	bl	800239e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bd0:	4b25      	ldr	r3, [pc, #148]	@ (8002c68 <HAL_UART_MspInit+0xe4>)
 8002bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd4:	4a24      	ldr	r2, [pc, #144]	@ (8002c68 <HAL_UART_MspInit+0xe4>)
 8002bd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bda:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bdc:	4b22      	ldr	r3, [pc, #136]	@ (8002c68 <HAL_UART_MspInit+0xe4>)
 8002bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c68 <HAL_UART_MspInit+0xe4>)
 8002bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bec:	4a1e      	ldr	r2, [pc, #120]	@ (8002c68 <HAL_UART_MspInit+0xe4>)
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8002c68 <HAL_UART_MspInit+0xe4>)
 8002bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c00:	4b19      	ldr	r3, [pc, #100]	@ (8002c68 <HAL_UART_MspInit+0xe4>)
 8002c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c04:	4a18      	ldr	r2, [pc, #96]	@ (8002c68 <HAL_UART_MspInit+0xe4>)
 8002c06:	f043 0302 	orr.w	r3, r3, #2
 8002c0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c0c:	4b16      	ldr	r3, [pc, #88]	@ (8002c68 <HAL_UART_MspInit+0xe4>)
 8002c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	2300      	movs	r3, #0
 8002c28:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c2a:	2307      	movs	r3, #7
 8002c2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002c32:	4619      	mov	r1, r3
 8002c34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c38:	f002 fe00 	bl	800583c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c3c:	2340      	movs	r3, #64	@ 0x40
 8002c3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c4c:	2307      	movs	r3, #7
 8002c4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c50:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002c54:	4619      	mov	r1, r3
 8002c56:	4805      	ldr	r0, [pc, #20]	@ (8002c6c <HAL_UART_MspInit+0xe8>)
 8002c58:	f002 fdf0 	bl	800583c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3770      	adds	r7, #112	@ 0x70
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40013800 	.word	0x40013800
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	48000400 	.word	0x48000400

08002c70 <scale8>:
extern uint8_t rgb_arr[3 * num_led];

// Define the buffers timers
extern uint16_t wr_buf[WR_BUF_LEN];

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	460a      	mov	r2, r1
 8002c7a:	71fb      	strb	r3, [r7, #7]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	71bb      	strb	r3, [r7, #6]
	return ((uint16_t) x * scale) >> 8;
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	79ba      	ldrb	r2, [r7, #6]
 8002c84:	fb02 f303 	mul.w	r3, r2, r3
 8002c88:	121b      	asrs	r3, r3, #8
 8002c8a:	b2db      	uxtb	r3, r3
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8002c98:	b590      	push	{r4, r7, lr}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	4608      	mov	r0, r1
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4623      	mov	r3, r4
 8002ca8:	71fb      	strb	r3, [r7, #7]
 8002caa:	4603      	mov	r3, r0
 8002cac:	71bb      	strb	r3, [r7, #6]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	717b      	strb	r3, [r7, #5]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	713b      	strb	r3, [r7, #4]
	rgb_arr[3 * index] = scale8(g, 0xB0);	// g;
 8002cb6:	79fa      	ldrb	r2, [r7, #7]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	189c      	adds	r4, r3, r2
 8002cbe:	797b      	ldrb	r3, [r7, #5]
 8002cc0:	21b0      	movs	r1, #176	@ 0xb0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff ffd4 	bl	8002c70 <scale8>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8002d04 <led_set_RGB+0x6c>)
 8002cce:	551a      	strb	r2, [r3, r4]
	rgb_arr[3 * index + 1] = r;
 8002cd0:	79fa      	ldrb	r2, [r7, #7]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3301      	adds	r3, #1
 8002cda:	490a      	ldr	r1, [pc, #40]	@ (8002d04 <led_set_RGB+0x6c>)
 8002cdc:	79ba      	ldrb	r2, [r7, #6]
 8002cde:	54ca      	strb	r2, [r1, r3]
	rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8002ce0:	79fa      	ldrb	r2, [r7, #7]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4413      	add	r3, r2
 8002ce8:	1c9c      	adds	r4, r3, #2
 8002cea:	793b      	ldrb	r3, [r7, #4]
 8002cec:	21f0      	movs	r1, #240	@ 0xf0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff ffbe 	bl	8002c70 <scale8>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4b02      	ldr	r3, [pc, #8]	@ (8002d04 <led_set_RGB+0x6c>)
 8002cfa:	551a      	strb	r2, [r3, r4]
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd90      	pop	{r4, r7, pc}
 8002d04:	200007c0 	.word	0x200007c0

08002d08 <flush>:
void flush() {
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3 * num_led; i++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	e007      	b.n	8002d24 <flush+0x1c>
		rgb_arr[i] = 0;
 8002d14:	4a10      	ldr	r2, [pc, #64]	@ (8002d58 <flush+0x50>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3 * num_led; i++)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3301      	adds	r3, #1
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b23      	cmp	r3, #35	@ 0x23
 8002d28:	ddf4      	ble.n	8002d14 <flush+0xc>
	for (int i = 0; i < WR_BUF_LEN; i++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	603b      	str	r3, [r7, #0]
 8002d2e:	e007      	b.n	8002d40 <flush+0x38>
		wr_buf[i] = 0;
 8002d30:	4a0a      	ldr	r2, [pc, #40]	@ (8002d5c <flush+0x54>)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2100      	movs	r1, #0
 8002d36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < WR_BUF_LEN; i++)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d46:	dbf3      	blt.n	8002d30 <flush+0x28>
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	200007c0 	.word	0x200007c0
 8002d5c:	200003c0 	.word	0x200003c0

08002d60 <led_set_all_RGB>:
// Set all colors to RGB
void led_set_all_RGB(uint8_t r, uint8_t g, uint8_t b) {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	71bb      	strb	r3, [r7, #6]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	717b      	strb	r3, [r7, #5]
	for (uint_fast8_t i = 0; i < num_led; ++i)
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	e009      	b.n	8002d8c <led_set_all_RGB+0x2c>
		led_set_RGB(i, r, g, b);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	b2d8      	uxtb	r0, r3
 8002d7c:	797b      	ldrb	r3, [r7, #5]
 8002d7e:	79ba      	ldrb	r2, [r7, #6]
 8002d80:	79f9      	ldrb	r1, [r7, #7]
 8002d82:	f7ff ff89 	bl	8002c98 <led_set_RGB>
	for (uint_fast8_t i = 0; i < num_led; ++i)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b0b      	cmp	r3, #11
 8002d90:	d9f2      	bls.n	8002d78 <led_set_all_RGB+0x18>
}
 8002d92:	bf00      	nop
 8002d94:	bf00      	nop
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <fillBuffer>:
void fillBuffer(uint8_t index) {
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
	uint8_t g = rgb_arr[index * 3];
 8002da6:	79fa      	ldrb	r2, [r7, #7]
 8002da8:	4613      	mov	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	4413      	add	r3, r2
 8002dae:	4a3c      	ldr	r2, [pc, #240]	@ (8002ea0 <fillBuffer+0x104>)
 8002db0:	5cd3      	ldrb	r3, [r2, r3]
 8002db2:	733b      	strb	r3, [r7, #12]
	uint8_t r = rgb_arr[index * 3 + 1];
 8002db4:	79fa      	ldrb	r2, [r7, #7]
 8002db6:	4613      	mov	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	4a38      	ldr	r2, [pc, #224]	@ (8002ea0 <fillBuffer+0x104>)
 8002dc0:	5cd3      	ldrb	r3, [r2, r3]
 8002dc2:	72fb      	strb	r3, [r7, #11]
	uint8_t b = rgb_arr[index * 3 + 2];
 8002dc4:	79fa      	ldrb	r2, [r7, #7]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	3302      	adds	r3, #2
 8002dce:	4a34      	ldr	r2, [pc, #208]	@ (8002ea0 <fillBuffer+0x104>)
 8002dd0:	5cd3      	ldrb	r3, [r2, r3]
 8002dd2:	72bb      	strb	r3, [r7, #10]

	// Green (bits 0-23: 8 bits G, 8 R, 8 B)

	for (uint8_t i = 0; i < 8; i++) {
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	73fb      	strb	r3, [r7, #15]
 8002dd8:	e018      	b.n	8002e0c <fillBuffer+0x70>
		wr_buf[index * 24 + i] = ((g << i) & 0x80) ? PWM_HI : PWM_LO;
 8002dda:	7b3a      	ldrb	r2, [r7, #12]
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <fillBuffer+0x52>
 8002dea:	2102      	movs	r1, #2
 8002dec:	e000      	b.n	8002df0 <fillBuffer+0x54>
 8002dee:	2101      	movs	r1, #1
 8002df0:	79fa      	ldrb	r2, [r7, #7]
 8002df2:	4613      	mov	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	4413      	add	r3, r2
 8002e00:	4a28      	ldr	r2, [pc, #160]	@ (8002ea4 <fillBuffer+0x108>)
 8002e02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < 8; i++) {
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	2b07      	cmp	r3, #7
 8002e10:	d9e3      	bls.n	8002dda <fillBuffer+0x3e>
	}
	// Red
	for (uint8_t i = 0; i < 8; i++) {
 8002e12:	2300      	movs	r3, #0
 8002e14:	73bb      	strb	r3, [r7, #14]
 8002e16:	e019      	b.n	8002e4c <fillBuffer+0xb0>
		wr_buf[index * 24 + 8 + i] = ((r << i) & 0x80) ? PWM_HI : PWM_LO;
 8002e18:	7afa      	ldrb	r2, [r7, #11]
 8002e1a:	7bbb      	ldrb	r3, [r7, #14]
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <fillBuffer+0x90>
 8002e28:	2102      	movs	r1, #2
 8002e2a:	e000      	b.n	8002e2e <fillBuffer+0x92>
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	79fa      	ldrb	r2, [r7, #7]
 8002e30:	4613      	mov	r3, r2
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	4413      	add	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	f103 0208 	add.w	r2, r3, #8
 8002e3c:	7bbb      	ldrb	r3, [r7, #14]
 8002e3e:	4413      	add	r3, r2
 8002e40:	4a18      	ldr	r2, [pc, #96]	@ (8002ea4 <fillBuffer+0x108>)
 8002e42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < 8; i++) {
 8002e46:	7bbb      	ldrb	r3, [r7, #14]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	73bb      	strb	r3, [r7, #14]
 8002e4c:	7bbb      	ldrb	r3, [r7, #14]
 8002e4e:	2b07      	cmp	r3, #7
 8002e50:	d9e2      	bls.n	8002e18 <fillBuffer+0x7c>
	}
	// Blue
	for (uint8_t i = 0; i < 8; i++) {
 8002e52:	2300      	movs	r3, #0
 8002e54:	737b      	strb	r3, [r7, #13]
 8002e56:	e019      	b.n	8002e8c <fillBuffer+0xf0>
		wr_buf[index * 24 + 16 + i] = ((b << i) & 0x80) ? PWM_HI : PWM_LO;
 8002e58:	7aba      	ldrb	r2, [r7, #10]
 8002e5a:	7b7b      	ldrb	r3, [r7, #13]
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <fillBuffer+0xd0>
 8002e68:	2102      	movs	r1, #2
 8002e6a:	e000      	b.n	8002e6e <fillBuffer+0xd2>
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	79fa      	ldrb	r2, [r7, #7]
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	f103 0210 	add.w	r2, r3, #16
 8002e7c:	7b7b      	ldrb	r3, [r7, #13]
 8002e7e:	4413      	add	r3, r2
 8002e80:	4a08      	ldr	r2, [pc, #32]	@ (8002ea4 <fillBuffer+0x108>)
 8002e82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < 8; i++) {
 8002e86:	7b7b      	ldrb	r3, [r7, #13]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	737b      	strb	r3, [r7, #13]
 8002e8c:	7b7b      	ldrb	r3, [r7, #13]
 8002e8e:	2b07      	cmp	r3, #7
 8002e90:	d9e2      	bls.n	8002e58 <fillBuffer+0xbc>
	}
}
 8002e92:	bf00      	nop
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	200007c0 	.word	0x200007c0
 8002ea4:	200003c0 	.word	0x200003c0

08002ea8 <fillBufferAll>:

void fillBufferAll() {
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0

	for (uint8_t index = 0; index < num_led; index ++) {
 8002eae:	2300      	movs	r3, #0
 8002eb0:	71fb      	strb	r3, [r7, #7]
 8002eb2:	e078      	b.n	8002fa6 <fillBufferAll+0xfe>
		uint8_t g = rgb_arr[index * 3];
 8002eb4:	79fa      	ldrb	r2, [r7, #7]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4413      	add	r3, r2
 8002ebc:	4a3f      	ldr	r2, [pc, #252]	@ (8002fbc <fillBufferAll+0x114>)
 8002ebe:	5cd3      	ldrb	r3, [r2, r3]
 8002ec0:	70fb      	strb	r3, [r7, #3]
		uint8_t r = rgb_arr[index * 3 + 1];
 8002ec2:	79fa      	ldrb	r2, [r7, #7]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	3301      	adds	r3, #1
 8002ecc:	4a3b      	ldr	r2, [pc, #236]	@ (8002fbc <fillBufferAll+0x114>)
 8002ece:	5cd3      	ldrb	r3, [r2, r3]
 8002ed0:	70bb      	strb	r3, [r7, #2]
		uint8_t b = rgb_arr[index * 3 + 2];
 8002ed2:	79fa      	ldrb	r2, [r7, #7]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	3302      	adds	r3, #2
 8002edc:	4a37      	ldr	r2, [pc, #220]	@ (8002fbc <fillBufferAll+0x114>)
 8002ede:	5cd3      	ldrb	r3, [r2, r3]
 8002ee0:	707b      	strb	r3, [r7, #1]

		// Green (bits 0-23: 8 bits G, 8 R, 8 B)

		for (uint8_t i = 0; i < 8; i++) {
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	71bb      	strb	r3, [r7, #6]
 8002ee6:	e018      	b.n	8002f1a <fillBufferAll+0x72>
			wr_buf[index * 24 + i] = ((g << i) & 0x80) ? PWM_HI : PWM_LO;
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	79bb      	ldrb	r3, [r7, #6]
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <fillBufferAll+0x54>
 8002ef8:	2102      	movs	r1, #2
 8002efa:	e000      	b.n	8002efe <fillBufferAll+0x56>
 8002efc:	2101      	movs	r1, #1
 8002efe:	79fa      	ldrb	r2, [r7, #7]
 8002f00:	4613      	mov	r3, r2
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4413      	add	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	461a      	mov	r2, r3
 8002f0a:	79bb      	ldrb	r3, [r7, #6]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002fc0 <fillBufferAll+0x118>)
 8002f10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < 8; i++) {
 8002f14:	79bb      	ldrb	r3, [r7, #6]
 8002f16:	3301      	adds	r3, #1
 8002f18:	71bb      	strb	r3, [r7, #6]
 8002f1a:	79bb      	ldrb	r3, [r7, #6]
 8002f1c:	2b07      	cmp	r3, #7
 8002f1e:	d9e3      	bls.n	8002ee8 <fillBufferAll+0x40>
		}
		// Red
		for (uint8_t i = 0; i < 8; i++) {
 8002f20:	2300      	movs	r3, #0
 8002f22:	717b      	strb	r3, [r7, #5]
 8002f24:	e019      	b.n	8002f5a <fillBufferAll+0xb2>
			wr_buf[index * 24 + 8 + i] = ((r << i) & 0x80) ? PWM_HI : PWM_LO;
 8002f26:	78ba      	ldrb	r2, [r7, #2]
 8002f28:	797b      	ldrb	r3, [r7, #5]
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <fillBufferAll+0x92>
 8002f36:	2102      	movs	r1, #2
 8002f38:	e000      	b.n	8002f3c <fillBufferAll+0x94>
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	79fa      	ldrb	r2, [r7, #7]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	f103 0208 	add.w	r2, r3, #8
 8002f4a:	797b      	ldrb	r3, [r7, #5]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8002fc0 <fillBufferAll+0x118>)
 8002f50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < 8; i++) {
 8002f54:	797b      	ldrb	r3, [r7, #5]
 8002f56:	3301      	adds	r3, #1
 8002f58:	717b      	strb	r3, [r7, #5]
 8002f5a:	797b      	ldrb	r3, [r7, #5]
 8002f5c:	2b07      	cmp	r3, #7
 8002f5e:	d9e2      	bls.n	8002f26 <fillBufferAll+0x7e>
		}
		// Blue
		for (uint8_t i = 0; i < 8; i++) {
 8002f60:	2300      	movs	r3, #0
 8002f62:	713b      	strb	r3, [r7, #4]
 8002f64:	e019      	b.n	8002f9a <fillBufferAll+0xf2>
			wr_buf[index * 24 + 16 + i] = ((b << i) & 0x80) ? PWM_HI : PWM_LO;
 8002f66:	787a      	ldrb	r2, [r7, #1]
 8002f68:	793b      	ldrb	r3, [r7, #4]
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <fillBufferAll+0xd2>
 8002f76:	2102      	movs	r1, #2
 8002f78:	e000      	b.n	8002f7c <fillBufferAll+0xd4>
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	79fa      	ldrb	r2, [r7, #7]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	f103 0210 	add.w	r2, r3, #16
 8002f8a:	793b      	ldrb	r3, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002fc0 <fillBufferAll+0x118>)
 8002f90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < 8; i++) {
 8002f94:	793b      	ldrb	r3, [r7, #4]
 8002f96:	3301      	adds	r3, #1
 8002f98:	713b      	strb	r3, [r7, #4]
 8002f9a:	793b      	ldrb	r3, [r7, #4]
 8002f9c:	2b07      	cmp	r3, #7
 8002f9e:	d9e2      	bls.n	8002f66 <fillBufferAll+0xbe>
	for (uint8_t index = 0; index < num_led; index ++) {
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	71fb      	strb	r3, [r7, #7]
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	2b0b      	cmp	r3, #11
 8002faa:	d983      	bls.n	8002eb4 <fillBufferAll+0xc>
		}
	}

}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	200007c0 	.word	0x200007c0
 8002fc0:	200003c0 	.word	0x200003c0

08002fc4 <led_render>:

void led_render() {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0

	if (hdma_tim4_ch4.State != HAL_DMA_STATE_READY)
 8002fc8:	4b07      	ldr	r3, [pc, #28]	@ (8002fe8 <led_render+0x24>)
 8002fca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d107      	bne.n	8002fe4 <led_render+0x20>
		return;

	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_4, (uint32_t*) wr_buf,
 8002fd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fd8:	4a04      	ldr	r2, [pc, #16]	@ (8002fec <led_render+0x28>)
 8002fda:	210c      	movs	r1, #12
 8002fdc:	4804      	ldr	r0, [pc, #16]	@ (8002ff0 <led_render+0x2c>)
 8002fde:	f004 f87b 	bl	80070d8 <HAL_TIM_PWM_Start_DMA>
 8002fe2:	e000      	b.n	8002fe6 <led_render+0x22>
		return;
 8002fe4:	bf00      	nop
	WR_BUF_LEN);
}
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	2000091c 	.word	0x2000091c
 8002fec:	200003c0 	.word	0x200003c0
 8002ff0:	200008d0 	.word	0x200008d0

08002ff4 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_4);
 8002ffc:	210c      	movs	r1, #12
 8002ffe:	4803      	ldr	r0, [pc, #12]	@ (800300c <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 8003000:	f004 fa82 	bl	8007508 <HAL_TIM_PWM_Stop_DMA>
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	200008d0 	.word	0x200008d0

08003010 <rainbow>:

// Function to create the rainbow effect
void rainbow(uint8_t wait) {
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
	uint8_t r;
	uint8_t g;
	uint8_t b;
	uint8_t WheelPos;

	for (j = 0; j < 256; j++) { // Cycle through all colors
 800301a:	2300      	movs	r3, #0
 800301c:	82fb      	strh	r3, [r7, #22]
 800301e:	e054      	b.n	80030ca <rainbow+0xba>
		// Remove 'i' from the phase shift
		WheelPos = j & 255;
 8003020:	8afb      	ldrh	r3, [r7, #22]
 8003022:	73fb      	strb	r3, [r7, #15]
		if (WheelPos < 85) {
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	2b54      	cmp	r3, #84	@ 0x54
 8003028:	d80e      	bhi.n	8003048 <rainbow+0x38>
			r = WheelPos * 3;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	461a      	mov	r2, r3
 800302e:	0052      	lsls	r2, r2, #1
 8003030:	4413      	add	r3, r2
 8003032:	757b      	strb	r3, [r7, #21]
			g = 255 - WheelPos * 3;
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	461a      	mov	r2, r3
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	753b      	strb	r3, [r7, #20]
			b = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	74fb      	strb	r3, [r7, #19]
 8003046:	e025      	b.n	8003094 <rainbow+0x84>
		} else if (WheelPos < 170) {
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	2ba9      	cmp	r3, #169	@ 0xa9
 800304c:	d811      	bhi.n	8003072 <rainbow+0x62>
			WheelPos -= 85;
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	3b55      	subs	r3, #85	@ 0x55
 8003052:	73fb      	strb	r3, [r7, #15]
			r = 255 - WheelPos * 3;
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	461a      	mov	r2, r3
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	757b      	strb	r3, [r7, #21]
			g = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	753b      	strb	r3, [r7, #20]
			b = WheelPos * 3;
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	461a      	mov	r2, r3
 800306a:	0052      	lsls	r2, r2, #1
 800306c:	4413      	add	r3, r2
 800306e:	74fb      	strb	r3, [r7, #19]
 8003070:	e010      	b.n	8003094 <rainbow+0x84>
		} else {
			WheelPos -= 170;
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	3356      	adds	r3, #86	@ 0x56
 8003076:	73fb      	strb	r3, [r7, #15]
			r = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	757b      	strb	r3, [r7, #21]
			g = WheelPos * 3;
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	461a      	mov	r2, r3
 8003080:	0052      	lsls	r2, r2, #1
 8003082:	4413      	add	r3, r2
 8003084:	753b      	strb	r3, [r7, #20]
			b = 255 - WheelPos * 3;
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	461a      	mov	r2, r3
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	3b01      	subs	r3, #1
 8003092:	74fb      	strb	r3, [r7, #19]
		}
		for (uint16_t i = 0; i < num_led; i++) {
 8003094:	2300      	movs	r3, #0
 8003096:	823b      	strh	r3, [r7, #16]
 8003098:	e009      	b.n	80030ae <rainbow+0x9e>
			// Update LEDs
			led_set_RGB(i, r, g, b);
 800309a:	8a3b      	ldrh	r3, [r7, #16]
 800309c:	b2d8      	uxtb	r0, r3
 800309e:	7cfb      	ldrb	r3, [r7, #19]
 80030a0:	7d3a      	ldrb	r2, [r7, #20]
 80030a2:	7d79      	ldrb	r1, [r7, #21]
 80030a4:	f7ff fdf8 	bl	8002c98 <led_set_RGB>
		for (uint16_t i = 0; i < num_led; i++) {
 80030a8:	8a3b      	ldrh	r3, [r7, #16]
 80030aa:	3301      	adds	r3, #1
 80030ac:	823b      	strh	r3, [r7, #16]
 80030ae:	8a3b      	ldrh	r3, [r7, #16]
 80030b0:	2b0b      	cmp	r3, #11
 80030b2:	d9f2      	bls.n	800309a <rainbow+0x8a>
		}
		fillBufferAll();
 80030b4:	f7ff fef8 	bl	8002ea8 <fillBufferAll>
		led_render();
 80030b8:	f7ff ff84 	bl	8002fc4 <led_render>
		HAL_Delay(wait);
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f9e6 	bl	8003490 <HAL_Delay>
	for (j = 0; j < 256; j++) { // Cycle through all colors
 80030c4:	8afb      	ldrh	r3, [r7, #22]
 80030c6:	3301      	adds	r3, #1
 80030c8:	82fb      	strh	r3, [r7, #22]
 80030ca:	8afb      	ldrh	r3, [r7, #22]
 80030cc:	2bff      	cmp	r3, #255	@ 0xff
 80030ce:	d9a7      	bls.n	8003020 <rainbow+0x10>
	}
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <calibration>:
const int res = 12; // Global constant

struct YarnStates yarn[NUM_YARN] = { 0 }; // Definition

// Calibration function
void calibration(struct YarnStates *yarn) {
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
	yarn->maxim =
			(yarn->read_sens > yarn->maxim) ? yarn->read_sens : yarn->maxim;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	bfb8      	it	lt
 80030ee:	461a      	movlt	r2, r3
	yarn->maxim =
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	619a      	str	r2, [r3, #24]
	yarn->minim =
			(yarn->read_sens < yarn->minim) ? yarn->read_sens : yarn->minim;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	bfa8      	it	ge
 8003100:	461a      	movge	r2, r3
	yarn->minim =
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	61da      	str	r2, [r3, #28]
	yarn->per = yarn->maxim - yarn->minim;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	1ad2      	subs	r2, r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	605a      	str	r2, [r3, #4]
	yarn->maxper = (yarn->per > yarn->maxper) ? yarn->per : yarn->maxper;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	bfb8      	it	lt
 8003120:	461a      	movlt	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	611a      	str	r2, [r3, #16]
	yarn->thresh = yarn->maxper;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <resetCalibration>:

// Reset Calibration function
void resetCalibration(struct YarnStates *yarn) {
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
	yarn->maxim = 0;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	619a      	str	r2, [r3, #24]
	yarn->minim = (1 << res) - 1; // Reset to max value
 8003148:	230c      	movs	r3, #12
 800314a:	2201      	movs	r2, #1
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	1e5a      	subs	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	61da      	str	r2, [r3, #28]
	yarn->per = 0;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	605a      	str	r2, [r3, #4]
	yarn->thresh = (yarn->thresh > yarn->maxper) ? yarn->thresh : yarn->maxper;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003164:	429a      	cmp	r2, r3
 8003166:	bfb8      	it	lt
 8003168:	461a      	movlt	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	629a      	str	r2, [r3, #40]	@ 0x28
	yarn->maxper = 0;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	611a      	str	r2, [r3, #16]
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <comp_thresh_perturb>:

// Read Threshold Perturb function
void comp_thresh_perturb(struct YarnStates *yarn) {
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	if (yarn->read_sens <= 900)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8003190:	dc05      	bgt.n	800319e <comp_thresh_perturb+0x1e>
		yarn->threshold = yarn->thresh + 5;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003196:	1d5a      	adds	r2, r3, #5
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	625a      	str	r2, [r3, #36]	@ 0x24
 800319c:	e012      	b.n	80031c4 <comp_thresh_perturb+0x44>
	else if (yarn->read_sens <= 1500)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80031a6:	4293      	cmp	r3, r2
 80031a8:	dc06      	bgt.n	80031b8 <comp_thresh_perturb+0x38>
		yarn->threshold = yarn->thresh + 8;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ae:	f103 0208 	add.w	r2, r3, #8
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80031b6:	e005      	b.n	80031c4 <comp_thresh_perturb+0x44>
	else
		yarn->threshold = yarn->thresh + 10;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031bc:	f103 020a 	add.w	r2, r3, #10
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	625a      	str	r2, [r3, #36]	@ 0x24

	yarn->maxim =
			(yarn->read_sens > yarn->maxim) ? yarn->read_sens : yarn->maxim;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699a      	ldr	r2, [r3, #24]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	bfb8      	it	lt
 80031d0:	461a      	movlt	r2, r3
	yarn->maxim =
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	619a      	str	r2, [r3, #24]
	yarn->minim =
			(yarn->read_sens < yarn->minim) ? yarn->read_sens : yarn->minim;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69da      	ldr	r2, [r3, #28]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	429a      	cmp	r2, r3
 80031e0:	bfa8      	it	ge
 80031e2:	461a      	movge	r2, r3
	yarn->minim =
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	61da      	str	r2, [r3, #28]
	yarn->per = yarn->maxim - yarn->minim;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699a      	ldr	r2, [r3, #24]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	1ad2      	subs	r2, r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	605a      	str	r2, [r3, #4]
	yarn->maxper = (yarn->per > yarn->maxper) ? yarn->per : yarn->maxper;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	429a      	cmp	r2, r3
 8003200:	bfb8      	it	lt
 8003202:	461a      	movlt	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	611a      	str	r2, [r3, #16]
	yarn->count_total++;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	609a      	str	r2, [r3, #8]
	if (yarn->per > yarn->threshold)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	429a      	cmp	r2, r3
 800321c:	dd04      	ble.n	8003228 <comp_thresh_perturb+0xa8>
		yarn->count_yarn++; // Count perturbations above threshold
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	60da      	str	r2, [r3, #12]
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <yarn_state>:

// Yarn State function
void yarn_state(struct YarnStates *yarn) {
 8003234:	b5b0      	push	{r4, r5, r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
	yarn->yarn_chance = (yarn->count_yarn * 100.0) / yarn->count_total;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4618      	mov	r0, r3
 8003242:	f7fd f997 	bl	8000574 <__aeabi_i2d>
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	4b42      	ldr	r3, [pc, #264]	@ (8003354 <yarn_state+0x120>)
 800324c:	f7fd f9fc 	bl	8000648 <__aeabi_dmul>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4614      	mov	r4, r2
 8003256:	461d      	mov	r5, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd f989 	bl	8000574 <__aeabi_i2d>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4620      	mov	r0, r4
 8003268:	4629      	mov	r1, r5
 800326a:	f7fd fb17 	bl	800089c <__aeabi_ddiv>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4610      	mov	r0, r2
 8003274:	4619      	mov	r1, r3
 8003276:	f7fd fbf9 	bl	8000a6c <__aeabi_d2iz>
 800327a:	4602      	mov	r2, r0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	615a      	str	r2, [r3, #20]
	yarn->torn = 0;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
	yarn->dirt1 = 0;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	705a      	strb	r2, [r3, #1]
	yarn->dirt2 = 0;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	709a      	strb	r2, [r3, #2]
	yarn->flaw = 0;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	70da      	strb	r2, [r3, #3]
	yarn->ledState = 0;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	62da      	str	r2, [r3, #44]	@ 0x2c
	yarn->ledStatePre = 0;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	@ 0x30

	if (yarn->read_sens <= 100 || yarn->read_sens == 4095) {
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	2b64      	cmp	r3, #100	@ 0x64
 80032aa:	dd05      	ble.n	80032b8 <yarn_state+0x84>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d106      	bne.n	80032c6 <yarn_state+0x92>
		yarn->flaw = 1;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	70da      	strb	r2, [r3, #3]
		yarn->ledState = 3;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2203      	movs	r2, #3
 80032c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80032c4:	e02b      	b.n	800331e <yarn_state+0xea>
	} else if (yarn->read_sens <= 500 && yarn->read_sens > 100) {
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80032ce:	dc0a      	bgt.n	80032e6 <yarn_state+0xb2>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	2b64      	cmp	r3, #100	@ 0x64
 80032d6:	dd06      	ble.n	80032e6 <yarn_state+0xb2>
		yarn->dirt2 = 1;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	709a      	strb	r2, [r3, #2]
		yarn->ledState = 2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2202      	movs	r2, #2
 80032e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80032e4:	e01b      	b.n	800331e <yarn_state+0xea>
	} else if (yarn->yarn_chance < 10) {
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	2b09      	cmp	r3, #9
 80032ec:	dc06      	bgt.n	80032fc <yarn_state+0xc8>
		yarn->torn = 1;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	701a      	strb	r2, [r3, #0]
		yarn->ledState = 4;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2204      	movs	r2, #4
 80032f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80032fa:	e010      	b.n	800331e <yarn_state+0xea>
	} else if (yarn->read_sens <= 1300 && yarn->read_sens > 500) {
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f240 5214 	movw	r2, #1300	@ 0x514
 8003304:	4293      	cmp	r3, r2
 8003306:	dc0a      	bgt.n	800331e <yarn_state+0xea>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003310:	dd05      	ble.n	800331e <yarn_state+0xea>
		yarn->dirt1 = 1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	705a      	strb	r2, [r3, #1]
		yarn->ledState = 1;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
	if (outCircuit == 1) {
 800331e:	4b0e      	ldr	r3, [pc, #56]	@ (8003358 <yarn_state+0x124>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <yarn_state+0xf8>
		yarn->ledState = 5;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2205      	movs	r2, #5
 800332a:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
	yarn->maxim = 0;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	619a      	str	r2, [r3, #24]
	yarn->minim = (1 << res) - 1;
 8003332:	230c      	movs	r3, #12
 8003334:	2201      	movs	r2, #1
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	1e5a      	subs	r2, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	61da      	str	r2, [r3, #28]
	yarn->count_yarn = 0;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	60da      	str	r2, [r3, #12]
	yarn->count_total = 0;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	609a      	str	r2, [r3, #8]
//	yarn->ledStatePre = yarn->ledState;
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bdb0      	pop	{r4, r5, r7, pc}
 8003354:	40590000 	.word	0x40590000
 8003358:	200003ba 	.word	0x200003ba

0800335c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800335c:	480d      	ldr	r0, [pc, #52]	@ (8003394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800335e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003360:	f7ff f8ee 	bl	8002540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003364:	480c      	ldr	r0, [pc, #48]	@ (8003398 <LoopForever+0x6>)
  ldr r1, =_edata
 8003366:	490d      	ldr	r1, [pc, #52]	@ (800339c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003368:	4a0d      	ldr	r2, [pc, #52]	@ (80033a0 <LoopForever+0xe>)
  movs r3, #0
 800336a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800336c:	e002      	b.n	8003374 <LoopCopyDataInit>

0800336e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800336e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003372:	3304      	adds	r3, #4

08003374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003378:	d3f9      	bcc.n	800336e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800337a:	4a0a      	ldr	r2, [pc, #40]	@ (80033a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800337c:	4c0a      	ldr	r4, [pc, #40]	@ (80033a8 <LoopForever+0x16>)
  movs r3, #0
 800337e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003380:	e001      	b.n	8003386 <LoopFillZerobss>

08003382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003384:	3204      	adds	r2, #4

08003386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003388:	d3fb      	bcc.n	8003382 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800338a:	f006 fe3f 	bl	800a00c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800338e:	f7fe fe13 	bl	8001fb8 <main>

08003392 <LoopForever>:

LoopForever:
    b LoopForever
 8003392:	e7fe      	b.n	8003392 <LoopForever>
  ldr   r0, =_estack
 8003394:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800339c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80033a0:	0800a994 	.word	0x0800a994
  ldr r2, =_sbss
 80033a4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80033a8:	20000dcc 	.word	0x20000dcc

080033ac <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033ac:	e7fe      	b.n	80033ac <COMP1_2_3_IRQHandler>

080033ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033b8:	2003      	movs	r0, #3
 80033ba:	f001 ff25 	bl	8005208 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033be:	200f      	movs	r0, #15
 80033c0:	f000 f80e 	bl	80033e0 <HAL_InitTick>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	71fb      	strb	r3, [r7, #7]
 80033ce:	e001      	b.n	80033d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033d0:	f7fe ffec 	bl	80023ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033d4:	79fb      	ldrb	r3, [r7, #7]

}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80033ec:	4b16      	ldr	r3, [pc, #88]	@ (8003448 <HAL_InitTick+0x68>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d022      	beq.n	800343a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80033f4:	4b15      	ldr	r3, [pc, #84]	@ (800344c <HAL_InitTick+0x6c>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4b13      	ldr	r3, [pc, #76]	@ (8003448 <HAL_InitTick+0x68>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003400:	fbb1 f3f3 	udiv	r3, r1, r3
 8003404:	fbb2 f3f3 	udiv	r3, r2, r3
 8003408:	4618      	mov	r0, r3
 800340a:	f001 ff30 	bl	800526e <HAL_SYSTICK_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10f      	bne.n	8003434 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b0f      	cmp	r3, #15
 8003418:	d809      	bhi.n	800342e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800341a:	2200      	movs	r2, #0
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	f04f 30ff 	mov.w	r0, #4294967295
 8003422:	f001 fefc 	bl	800521e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003426:	4a0a      	ldr	r2, [pc, #40]	@ (8003450 <HAL_InitTick+0x70>)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	e007      	b.n	800343e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	73fb      	strb	r3, [r7, #15]
 8003432:	e004      	b.n	800343e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
 8003438:	e001      	b.n	800343e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20000018 	.word	0x20000018
 800344c:	20000010 	.word	0x20000010
 8003450:	20000014 	.word	0x20000014

08003454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003458:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <HAL_IncTick+0x1c>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4b05      	ldr	r3, [pc, #20]	@ (8003474 <HAL_IncTick+0x20>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4413      	add	r3, r2
 8003462:	4a03      	ldr	r2, [pc, #12]	@ (8003470 <HAL_IncTick+0x1c>)
 8003464:	6013      	str	r3, [r2, #0]
}
 8003466:	bf00      	nop
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	20000c80 	.word	0x20000c80
 8003474:	20000018 	.word	0x20000018

08003478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  return uwTick;
 800347c:	4b03      	ldr	r3, [pc, #12]	@ (800348c <HAL_GetTick+0x14>)
 800347e:	681b      	ldr	r3, [r3, #0]
}
 8003480:	4618      	mov	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20000c80 	.word	0x20000c80

08003490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003498:	f7ff ffee 	bl	8003478 <HAL_GetTick>
 800349c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d004      	beq.n	80034b4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80034aa:	4b09      	ldr	r3, [pc, #36]	@ (80034d0 <HAL_Delay+0x40>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4413      	add	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034b4:	bf00      	nop
 80034b6:	f7ff ffdf 	bl	8003478 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d8f7      	bhi.n	80034b6 <HAL_Delay+0x26>
  {
  }
}
 80034c6:	bf00      	nop
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	20000018 	.word	0x20000018

080034d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	609a      	str	r2, [r3, #8]
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	609a      	str	r2, [r3, #8]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	3360      	adds	r3, #96	@ 0x60
 800354e:	461a      	mov	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b08      	ldr	r3, [pc, #32]	@ (8003580 <LL_ADC_SetOffset+0x44>)
 800355e:	4013      	ands	r3, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	4313      	orrs	r3, r2
 800356c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003574:	bf00      	nop
 8003576:	371c      	adds	r7, #28
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	03fff000 	.word	0x03fff000

08003584 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3360      	adds	r3, #96	@ 0x60
 8003592:	461a      	mov	r2, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3360      	adds	r3, #96	@ 0x60
 80035c0:	461a      	mov	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	431a      	orrs	r2, r3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80035da:	bf00      	nop
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b087      	sub	sp, #28
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	3360      	adds	r3, #96	@ 0x60
 80035f6:	461a      	mov	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	431a      	orrs	r2, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003610:	bf00      	nop
 8003612:	371c      	adds	r7, #28
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	3360      	adds	r3, #96	@ 0x60
 800362c:	461a      	mov	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	431a      	orrs	r2, r3
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003646:	bf00      	nop
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	615a      	str	r2, [r3, #20]
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800369e:	b480      	push	{r7}
 80036a0:	b087      	sub	sp, #28
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	3330      	adds	r3, #48	@ 0x30
 80036ae:	461a      	mov	r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	0a1b      	lsrs	r3, r3, #8
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	4413      	add	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	211f      	movs	r1, #31
 80036ca:	fa01 f303 	lsl.w	r3, r1, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	401a      	ands	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	0e9b      	lsrs	r3, r3, #26
 80036d6:	f003 011f 	and.w	r1, r3, #31
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	fa01 f303 	lsl.w	r3, r1, r3
 80036e4:	431a      	orrs	r2, r3
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80036ea:	bf00      	nop
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003702:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3314      	adds	r3, #20
 800372c:	461a      	mov	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	0e5b      	lsrs	r3, r3, #25
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	4413      	add	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	0d1b      	lsrs	r3, r3, #20
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	2107      	movs	r1, #7
 800374a:	fa01 f303 	lsl.w	r3, r1, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	401a      	ands	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	0d1b      	lsrs	r3, r3, #20
 8003756:	f003 031f 	and.w	r3, r3, #31
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	431a      	orrs	r2, r3
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003766:	bf00      	nop
 8003768:	371c      	adds	r7, #28
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
	...

08003774 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800378c:	43db      	mvns	r3, r3
 800378e:	401a      	ands	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f003 0318 	and.w	r3, r3, #24
 8003796:	4908      	ldr	r1, [pc, #32]	@ (80037b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003798:	40d9      	lsrs	r1, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	400b      	ands	r3, r1
 800379e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a2:	431a      	orrs	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	0007ffff 	.word	0x0007ffff

080037bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 031f 	and.w	r3, r3, #31
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003804:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6093      	str	r3, [r2, #8]
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800382c:	d101      	bne.n	8003832 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003850:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003854:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003878:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800387c:	d101      	bne.n	8003882 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038a4:	f043 0201 	orr.w	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038cc:	f043 0202 	orr.w	r2, r3, #2
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <LL_ADC_IsEnabled+0x18>
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <LL_ADC_IsEnabled+0x1a>
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b02      	cmp	r3, #2
 8003918:	d101      	bne.n	800391e <LL_ADC_IsDisableOngoing+0x18>
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <LL_ADC_IsDisableOngoing+0x1a>
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800393c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003940:	f043 0204 	orr.w	r2, r3, #4
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b04      	cmp	r3, #4
 8003966:	d101      	bne.n	800396c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b08      	cmp	r3, #8
 800398c:	d101      	bne.n	8003992 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b089      	sub	sp, #36	@ 0x24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e167      	b.n	8003c8a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d109      	bne.n	80039dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7fd fbd9 	bl	8001180 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff ff19 	bl	8003818 <LL_ADC_IsDeepPowerDownEnabled>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d004      	beq.n	80039f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff feff 	bl	80037f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff ff34 	bl	8003868 <LL_ADC_IsInternalRegulatorEnabled>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d115      	bne.n	8003a32 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff ff18 	bl	8003840 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a10:	4ba0      	ldr	r3, [pc, #640]	@ (8003c94 <HAL_ADC_Init+0x2f4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	099b      	lsrs	r3, r3, #6
 8003a16:	4aa0      	ldr	r2, [pc, #640]	@ (8003c98 <HAL_ADC_Init+0x2f8>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	099b      	lsrs	r3, r3, #6
 8003a1e:	3301      	adds	r3, #1
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a24:	e002      	b.n	8003a2c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f9      	bne.n	8003a26 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff ff16 	bl	8003868 <LL_ADC_IsInternalRegulatorEnabled>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10d      	bne.n	8003a5e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a46:	f043 0210 	orr.w	r2, r3, #16
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a52:	f043 0201 	orr.w	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff ff76 	bl	8003954 <LL_ADC_REG_IsConversionOngoing>
 8003a68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6e:	f003 0310 	and.w	r3, r3, #16
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f040 8100 	bne.w	8003c78 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f040 80fc 	bne.w	8003c78 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a84:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003a88:	f043 0202 	orr.w	r2, r3, #2
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ff23 	bl	80038e0 <LL_ADC_IsEnabled>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d111      	bne.n	8003ac4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003aa0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003aa4:	f7ff ff1c 	bl	80038e0 <LL_ADC_IsEnabled>
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	487c      	ldr	r0, [pc, #496]	@ (8003c9c <HAL_ADC_Init+0x2fc>)
 8003aac:	f7ff ff18 	bl	80038e0 <LL_ADC_IsEnabled>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4323      	orrs	r3, r4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d105      	bne.n	8003ac4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4619      	mov	r1, r3
 8003abe:	4878      	ldr	r0, [pc, #480]	@ (8003ca0 <HAL_ADC_Init+0x300>)
 8003ac0:	f7ff fd08 	bl	80034d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	7f5b      	ldrb	r3, [r3, #29]
 8003ac8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ace:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003ad4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003ada:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ae2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d106      	bne.n	8003b00 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af6:	3b01      	subs	r3, #1
 8003af8:	045b      	lsls	r3, r3, #17
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d009      	beq.n	8003b1c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b14:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	4b60      	ldr	r3, [pc, #384]	@ (8003ca4 <HAL_ADC_Init+0x304>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	69b9      	ldr	r1, [r7, #24]
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff ff15 	bl	800397a <LL_ADC_INJ_IsConversionOngoing>
 8003b50:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d16d      	bne.n	8003c34 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d16a      	bne.n	8003c34 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b62:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b6a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b7a:	f023 0302 	bic.w	r3, r3, #2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	69b9      	ldr	r1, [r7, #24]
 8003b84:	430b      	orrs	r3, r1
 8003b86:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d017      	beq.n	8003bc0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003b9e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ba8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003bac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6911      	ldr	r1, [r2, #16]
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6812      	ldr	r2, [r2, #0]
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003bbe:	e013      	b.n	8003be8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003bce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003be0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003be4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d118      	bne.n	8003c24 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003bfc:	f023 0304 	bic.w	r3, r3, #4
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c08:	4311      	orrs	r1, r2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003c0e:	4311      	orrs	r1, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c14:	430a      	orrs	r2, r1
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0201 	orr.w	r2, r2, #1
 8003c20:	611a      	str	r2, [r3, #16]
 8003c22:	e007      	b.n	8003c34 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d10c      	bne.n	8003c56 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c42:	f023 010f 	bic.w	r1, r3, #15
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	1e5a      	subs	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c54:	e007      	b.n	8003c66 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 020f 	bic.w	r2, r2, #15
 8003c64:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c6a:	f023 0303 	bic.w	r3, r3, #3
 8003c6e:	f043 0201 	orr.w	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c76:	e007      	b.n	8003c88 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c7c:	f043 0210 	orr.w	r2, r3, #16
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c88:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3724      	adds	r7, #36	@ 0x24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd90      	pop	{r4, r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20000010 	.word	0x20000010
 8003c98:	053e2d63 	.word	0x053e2d63
 8003c9c:	50000100 	.word	0x50000100
 8003ca0:	50000300 	.word	0x50000300
 8003ca4:	fff04007 	.word	0xfff04007

08003ca8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cb4:	4851      	ldr	r0, [pc, #324]	@ (8003dfc <HAL_ADC_Start_DMA+0x154>)
 8003cb6:	f7ff fd81 	bl	80037bc <LL_ADC_GetMultimode>
 8003cba:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff fe47 	bl	8003954 <LL_ADC_REG_IsConversionOngoing>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f040 808f 	bne.w	8003dec <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_ADC_Start_DMA+0x34>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e08a      	b.n	8003df2 <HAL_ADC_Start_DMA+0x14a>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2b05      	cmp	r3, #5
 8003cee:	d002      	beq.n	8003cf6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	2b09      	cmp	r3, #9
 8003cf4:	d173      	bne.n	8003dde <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 feb2 	bl	8004a60 <ADC_Enable>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003d00:	7dfb      	ldrb	r3, [r7, #23]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d166      	bne.n	8003dd4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d0a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d0e:	f023 0301 	bic.w	r3, r3, #1
 8003d12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a38      	ldr	r2, [pc, #224]	@ (8003e00 <HAL_ADC_Start_DMA+0x158>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d002      	beq.n	8003d2a <HAL_ADC_Start_DMA+0x82>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	e001      	b.n	8003d2e <HAL_ADC_Start_DMA+0x86>
 8003d2a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d002      	beq.n	8003d3c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d105      	bne.n	8003d48 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d40:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d006      	beq.n	8003d62 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d58:	f023 0206 	bic.w	r2, r3, #6
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003d60:	e002      	b.n	8003d68 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d6c:	4a25      	ldr	r2, [pc, #148]	@ (8003e04 <HAL_ADC_Start_DMA+0x15c>)
 8003d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d74:	4a24      	ldr	r2, [pc, #144]	@ (8003e08 <HAL_ADC_Start_DMA+0x160>)
 8003d76:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7c:	4a23      	ldr	r2, [pc, #140]	@ (8003e0c <HAL_ADC_Start_DMA+0x164>)
 8003d7e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	221c      	movs	r2, #28
 8003d86:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0210 	orr.w	r2, r2, #16
 8003d9e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3340      	adds	r3, #64	@ 0x40
 8003dba:	4619      	mov	r1, r3
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f001 fb0a 	bl	80053d8 <HAL_DMA_Start_IT>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fdad 	bl	800392c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003dd2:	e00d      	b.n	8003df0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003ddc:	e008      	b.n	8003df0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003dea:	e001      	b.n	8003df0 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003dec:	2302      	movs	r3, #2
 8003dee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	50000300 	.word	0x50000300
 8003e00:	50000100 	.word	0x50000100
 8003e04:	08004c2b 	.word	0x08004c2b
 8003e08:	08004d03 	.word	0x08004d03
 8003e0c:	08004d1f 	.word	0x08004d1f

08003e10 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	@ 0x28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003e18:	2300      	movs	r3, #0
 8003e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e2c:	4883      	ldr	r0, [pc, #524]	@ (800403c <HAL_ADC_IRQHandler+0x22c>)
 8003e2e:	f7ff fcc5 	bl	80037bc <LL_ADC_GetMultimode>
 8003e32:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d017      	beq.n	8003e6e <HAL_ADC_IRQHandler+0x5e>
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d012      	beq.n	8003e6e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d105      	bne.n	8003e60 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e58:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f001 f853 	bl	8004f0c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d004      	beq.n	8003e82 <HAL_ADC_IRQHandler+0x72>
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10a      	bne.n	8003e98 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 8085 	beq.w	8003f98 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d07f      	beq.n	8003f98 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d105      	bne.n	8003eb0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff fbdf 	bl	8003678 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d064      	beq.n	8003f8a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a5e      	ldr	r2, [pc, #376]	@ (8004040 <HAL_ADC_IRQHandler+0x230>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d002      	beq.n	8003ed0 <HAL_ADC_IRQHandler+0xc0>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	e001      	b.n	8003ed4 <HAL_ADC_IRQHandler+0xc4>
 8003ed0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d008      	beq.n	8003eee <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b05      	cmp	r3, #5
 8003ee6:	d002      	beq.n	8003eee <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2b09      	cmp	r3, #9
 8003eec:	d104      	bne.n	8003ef8 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	623b      	str	r3, [r7, #32]
 8003ef6:	e00d      	b.n	8003f14 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a50      	ldr	r2, [pc, #320]	@ (8004040 <HAL_ADC_IRQHandler+0x230>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d002      	beq.n	8003f08 <HAL_ADC_IRQHandler+0xf8>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	e001      	b.n	8003f0c <HAL_ADC_IRQHandler+0xfc>
 8003f08:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003f0c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d135      	bne.n	8003f8a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d12e      	bne.n	8003f8a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff fd0f 	bl	8003954 <LL_ADC_REG_IsConversionOngoing>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d11a      	bne.n	8003f72 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 020c 	bic.w	r2, r2, #12
 8003f4a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d112      	bne.n	8003f8a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f68:	f043 0201 	orr.w	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f70:	e00b      	b.n	8003f8a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f76:	f043 0210 	orr.w	r2, r3, #16
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f82:	f043 0201 	orr.w	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fd fcf6 	bl	800197c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	220c      	movs	r2, #12
 8003f96:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d004      	beq.n	8003fac <HAL_ADC_IRQHandler+0x19c>
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10b      	bne.n	8003fc4 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 809e 	beq.w	80040f4 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 8098 	beq.w	80040f4 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d105      	bne.n	8003fdc <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff fb88 	bl	80036f6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003fe6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff fb43 	bl	8003678 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ff2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a11      	ldr	r2, [pc, #68]	@ (8004040 <HAL_ADC_IRQHandler+0x230>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d002      	beq.n	8004004 <HAL_ADC_IRQHandler+0x1f4>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	e001      	b.n	8004008 <HAL_ADC_IRQHandler+0x1f8>
 8004004:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6812      	ldr	r2, [r2, #0]
 800400c:	4293      	cmp	r3, r2
 800400e:	d008      	beq.n	8004022 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b06      	cmp	r3, #6
 800401a:	d002      	beq.n	8004022 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2b07      	cmp	r3, #7
 8004020:	d104      	bne.n	800402c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	623b      	str	r3, [r7, #32]
 800402a:	e011      	b.n	8004050 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a03      	ldr	r2, [pc, #12]	@ (8004040 <HAL_ADC_IRQHandler+0x230>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d006      	beq.n	8004044 <HAL_ADC_IRQHandler+0x234>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	e005      	b.n	8004048 <HAL_ADC_IRQHandler+0x238>
 800403c:	50000300 	.word	0x50000300
 8004040:	50000100 	.word	0x50000100
 8004044:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004048:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d047      	beq.n	80040e6 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <HAL_ADC_IRQHandler+0x260>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d03f      	beq.n	80040e6 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800406c:	2b00      	cmp	r3, #0
 800406e:	d13a      	bne.n	80040e6 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407a:	2b40      	cmp	r3, #64	@ 0x40
 800407c:	d133      	bne.n	80040e6 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d12e      	bne.n	80040e6 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff fc74 	bl	800397a <LL_ADC_INJ_IsConversionOngoing>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d11a      	bne.n	80040ce <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040a6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d112      	bne.n	80040e6 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c4:	f043 0201 	orr.w	r2, r3, #1
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040cc:	e00b      	b.n	80040e6 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d2:	f043 0210 	orr.w	r2, r3, #16
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040de:	f043 0201 	orr.w	r2, r3, #1
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fee8 	bl	8004ebc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2260      	movs	r2, #96	@ 0x60
 80040f2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d011      	beq.n	8004122 <HAL_ADC_IRQHandler+0x312>
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00c      	beq.n	8004122 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f89f 	bl	8004258 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2280      	movs	r2, #128	@ 0x80
 8004120:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004128:	2b00      	cmp	r3, #0
 800412a:	d012      	beq.n	8004152 <HAL_ADC_IRQHandler+0x342>
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00d      	beq.n	8004152 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800413a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fece 	bl	8004ee4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004150:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004158:	2b00      	cmp	r3, #0
 800415a:	d012      	beq.n	8004182 <HAL_ADC_IRQHandler+0x372>
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00d      	beq.n	8004182 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fec0 	bl	8004ef8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004180:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	d036      	beq.n	80041fa <HAL_ADC_IRQHandler+0x3ea>
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	f003 0310 	and.w	r3, r3, #16
 8004192:	2b00      	cmp	r3, #0
 8004194:	d031      	beq.n	80041fa <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419a:	2b00      	cmp	r3, #0
 800419c:	d102      	bne.n	80041a4 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800419e:	2301      	movs	r3, #1
 80041a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80041a2:	e014      	b.n	80041ce <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d008      	beq.n	80041bc <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80041aa:	4825      	ldr	r0, [pc, #148]	@ (8004240 <HAL_ADC_IRQHandler+0x430>)
 80041ac:	f7ff fb14 	bl	80037d8 <LL_ADC_GetMultiDMATransfer>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00b      	beq.n	80041ce <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80041b6:	2301      	movs	r3, #1
 80041b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ba:	e008      	b.n	80041ce <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80041ca:	2301      	movs	r3, #1
 80041cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d10e      	bne.n	80041f2 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e4:	f043 0202 	orr.w	r2, r3, #2
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f83d 	bl	800426c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2210      	movs	r2, #16
 80041f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004200:	2b00      	cmp	r3, #0
 8004202:	d018      	beq.n	8004236 <HAL_ADC_IRQHandler+0x426>
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800420a:	2b00      	cmp	r3, #0
 800420c:	d013      	beq.n	8004236 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004212:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800421e:	f043 0208 	orr.w	r2, r3, #8
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800422e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 fe4d 	bl	8004ed0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004236:	bf00      	nop
 8004238:	3728      	adds	r7, #40	@ 0x28
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	50000300 	.word	0x50000300

08004244 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b0b6      	sub	sp, #216	@ 0xd8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x22>
 800429e:	2302      	movs	r3, #2
 80042a0:	e3c8      	b.n	8004a34 <HAL_ADC_ConfigChannel+0x7b4>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fb50 	bl	8003954 <LL_ADC_REG_IsConversionOngoing>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f040 83ad 	bne.w	8004a16 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6818      	ldr	r0, [r3, #0]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	6859      	ldr	r1, [r3, #4]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	f7ff f9e8 	bl	800369e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fb3e 	bl	8003954 <LL_ADC_REG_IsConversionOngoing>
 80042d8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff fb4a 	bl	800397a <LL_ADC_INJ_IsConversionOngoing>
 80042e6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f040 81d9 	bne.w	80046a6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f040 81d4 	bne.w	80046a6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004306:	d10f      	bne.n	8004328 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2200      	movs	r2, #0
 8004312:	4619      	mov	r1, r3
 8004314:	f7ff fa02 	bl	800371c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff f996 	bl	8003652 <LL_ADC_SetSamplingTimeCommonConfig>
 8004326:	e00e      	b.n	8004346 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6818      	ldr	r0, [r3, #0]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	6819      	ldr	r1, [r3, #0]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	461a      	mov	r2, r3
 8004336:	f7ff f9f1 	bl	800371c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2100      	movs	r1, #0
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff f986 	bl	8003652 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	695a      	ldr	r2, [r3, #20]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	08db      	lsrs	r3, r3, #3
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	2b04      	cmp	r3, #4
 8004366:	d022      	beq.n	80043ae <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	6919      	ldr	r1, [r3, #16]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004378:	f7ff f8e0 	bl	800353c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	6919      	ldr	r1, [r3, #16]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	461a      	mov	r2, r3
 800438a:	f7ff f92c 	bl	80035e6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800439a:	2b01      	cmp	r3, #1
 800439c:	d102      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x124>
 800439e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043a2:	e000      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x126>
 80043a4:	2300      	movs	r3, #0
 80043a6:	461a      	mov	r2, r3
 80043a8:	f7ff f938 	bl	800361c <LL_ADC_SetOffsetSaturation>
 80043ac:	e17b      	b.n	80046a6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2100      	movs	r1, #0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff f8e5 	bl	8003584 <LL_ADC_GetOffsetChannel>
 80043ba:	4603      	mov	r3, r0
 80043bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <HAL_ADC_ConfigChannel+0x15a>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2100      	movs	r1, #0
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff f8da 	bl	8003584 <LL_ADC_GetOffsetChannel>
 80043d0:	4603      	mov	r3, r0
 80043d2:	0e9b      	lsrs	r3, r3, #26
 80043d4:	f003 021f 	and.w	r2, r3, #31
 80043d8:	e01e      	b.n	8004418 <HAL_ADC_ConfigChannel+0x198>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2100      	movs	r1, #0
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff f8cf 	bl	8003584 <LL_ADC_GetOffsetChannel>
 80043e6:	4603      	mov	r3, r0
 80043e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80043f0:	fa93 f3a3 	rbit	r3, r3
 80043f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80043fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004400:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004408:	2320      	movs	r3, #32
 800440a:	e004      	b.n	8004416 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800440c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004410:	fab3 f383 	clz	r3, r3
 8004414:	b2db      	uxtb	r3, r3
 8004416:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004420:	2b00      	cmp	r3, #0
 8004422:	d105      	bne.n	8004430 <HAL_ADC_ConfigChannel+0x1b0>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	0e9b      	lsrs	r3, r3, #26
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	e018      	b.n	8004462 <HAL_ADC_ConfigChannel+0x1e2>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004438:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800443c:	fa93 f3a3 	rbit	r3, r3
 8004440:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004448:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800444c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004454:	2320      	movs	r3, #32
 8004456:	e004      	b.n	8004462 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004458:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800445c:	fab3 f383 	clz	r3, r3
 8004460:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004462:	429a      	cmp	r2, r3
 8004464:	d106      	bne.n	8004474 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2200      	movs	r2, #0
 800446c:	2100      	movs	r1, #0
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff f89e 	bl	80035b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2101      	movs	r1, #1
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff f882 	bl	8003584 <LL_ADC_GetOffsetChannel>
 8004480:	4603      	mov	r3, r0
 8004482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10a      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x220>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2101      	movs	r1, #1
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff f877 	bl	8003584 <LL_ADC_GetOffsetChannel>
 8004496:	4603      	mov	r3, r0
 8004498:	0e9b      	lsrs	r3, r3, #26
 800449a:	f003 021f 	and.w	r2, r3, #31
 800449e:	e01e      	b.n	80044de <HAL_ADC_ConfigChannel+0x25e>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2101      	movs	r1, #1
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff f86c 	bl	8003584 <LL_ADC_GetOffsetChannel>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80044b6:	fa93 f3a3 	rbit	r3, r3
 80044ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80044be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80044c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80044ce:	2320      	movs	r3, #32
 80044d0:	e004      	b.n	80044dc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80044d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80044d6:	fab3 f383 	clz	r3, r3
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d105      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x276>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	0e9b      	lsrs	r3, r3, #26
 80044f0:	f003 031f 	and.w	r3, r3, #31
 80044f4:	e018      	b.n	8004528 <HAL_ADC_ConfigChannel+0x2a8>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004502:	fa93 f3a3 	rbit	r3, r3
 8004506:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800450a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800450e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004512:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800451a:	2320      	movs	r3, #32
 800451c:	e004      	b.n	8004528 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800451e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004522:	fab3 f383 	clz	r3, r3
 8004526:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004528:	429a      	cmp	r2, r3
 800452a:	d106      	bne.n	800453a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2200      	movs	r2, #0
 8004532:	2101      	movs	r1, #1
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff f83b 	bl	80035b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2102      	movs	r1, #2
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff f81f 	bl	8003584 <LL_ADC_GetOffsetChannel>
 8004546:	4603      	mov	r3, r0
 8004548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10a      	bne.n	8004566 <HAL_ADC_ConfigChannel+0x2e6>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2102      	movs	r1, #2
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff f814 	bl	8003584 <LL_ADC_GetOffsetChannel>
 800455c:	4603      	mov	r3, r0
 800455e:	0e9b      	lsrs	r3, r3, #26
 8004560:	f003 021f 	and.w	r2, r3, #31
 8004564:	e01e      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x324>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2102      	movs	r1, #2
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff f809 	bl	8003584 <LL_ADC_GetOffsetChannel>
 8004572:	4603      	mov	r3, r0
 8004574:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004578:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800457c:	fa93 f3a3 	rbit	r3, r3
 8004580:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004584:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004588:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800458c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004594:	2320      	movs	r3, #32
 8004596:	e004      	b.n	80045a2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004598:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800459c:	fab3 f383 	clz	r3, r3
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d105      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x33c>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	0e9b      	lsrs	r3, r3, #26
 80045b6:	f003 031f 	and.w	r3, r3, #31
 80045ba:	e016      	b.n	80045ea <HAL_ADC_ConfigChannel+0x36a>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045c8:	fa93 f3a3 	rbit	r3, r3
 80045cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80045ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80045d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80045dc:	2320      	movs	r3, #32
 80045de:	e004      	b.n	80045ea <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80045e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045e4:	fab3 f383 	clz	r3, r3
 80045e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d106      	bne.n	80045fc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2200      	movs	r2, #0
 80045f4:	2102      	movs	r1, #2
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fe ffda 	bl	80035b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2103      	movs	r1, #3
 8004602:	4618      	mov	r0, r3
 8004604:	f7fe ffbe 	bl	8003584 <LL_ADC_GetOffsetChannel>
 8004608:	4603      	mov	r3, r0
 800460a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10a      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x3a8>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2103      	movs	r1, #3
 8004618:	4618      	mov	r0, r3
 800461a:	f7fe ffb3 	bl	8003584 <LL_ADC_GetOffsetChannel>
 800461e:	4603      	mov	r3, r0
 8004620:	0e9b      	lsrs	r3, r3, #26
 8004622:	f003 021f 	and.w	r2, r3, #31
 8004626:	e017      	b.n	8004658 <HAL_ADC_ConfigChannel+0x3d8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2103      	movs	r1, #3
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe ffa8 	bl	8003584 <LL_ADC_GetOffsetChannel>
 8004634:	4603      	mov	r3, r0
 8004636:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800463a:	fa93 f3a3 	rbit	r3, r3
 800463e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004640:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004642:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004644:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800464a:	2320      	movs	r3, #32
 800464c:	e003      	b.n	8004656 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800464e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004650:	fab3 f383 	clz	r3, r3
 8004654:	b2db      	uxtb	r3, r3
 8004656:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004660:	2b00      	cmp	r3, #0
 8004662:	d105      	bne.n	8004670 <HAL_ADC_ConfigChannel+0x3f0>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	0e9b      	lsrs	r3, r3, #26
 800466a:	f003 031f 	and.w	r3, r3, #31
 800466e:	e011      	b.n	8004694 <HAL_ADC_ConfigChannel+0x414>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004676:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004678:	fa93 f3a3 	rbit	r3, r3
 800467c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800467e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004680:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004688:	2320      	movs	r3, #32
 800468a:	e003      	b.n	8004694 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800468c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800468e:	fab3 f383 	clz	r3, r3
 8004692:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004694:	429a      	cmp	r2, r3
 8004696:	d106      	bne.n	80046a6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2200      	movs	r2, #0
 800469e:	2103      	movs	r1, #3
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fe ff85 	bl	80035b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff f918 	bl	80038e0 <LL_ADC_IsEnabled>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f040 8140 	bne.w	8004938 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	6819      	ldr	r1, [r3, #0]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	461a      	mov	r2, r3
 80046c6:	f7ff f855 	bl	8003774 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	4a8f      	ldr	r2, [pc, #572]	@ (800490c <HAL_ADC_ConfigChannel+0x68c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	f040 8131 	bne.w	8004938 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10b      	bne.n	80046fe <HAL_ADC_ConfigChannel+0x47e>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	0e9b      	lsrs	r3, r3, #26
 80046ec:	3301      	adds	r3, #1
 80046ee:	f003 031f 	and.w	r3, r3, #31
 80046f2:	2b09      	cmp	r3, #9
 80046f4:	bf94      	ite	ls
 80046f6:	2301      	movls	r3, #1
 80046f8:	2300      	movhi	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	e019      	b.n	8004732 <HAL_ADC_ConfigChannel+0x4b2>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004704:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004706:	fa93 f3a3 	rbit	r3, r3
 800470a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800470c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800470e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004710:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004716:	2320      	movs	r3, #32
 8004718:	e003      	b.n	8004722 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800471a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800471c:	fab3 f383 	clz	r3, r3
 8004720:	b2db      	uxtb	r3, r3
 8004722:	3301      	adds	r3, #1
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	2b09      	cmp	r3, #9
 800472a:	bf94      	ite	ls
 800472c:	2301      	movls	r3, #1
 800472e:	2300      	movhi	r3, #0
 8004730:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004732:	2b00      	cmp	r3, #0
 8004734:	d079      	beq.n	800482a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800473e:	2b00      	cmp	r3, #0
 8004740:	d107      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x4d2>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	0e9b      	lsrs	r3, r3, #26
 8004748:	3301      	adds	r3, #1
 800474a:	069b      	lsls	r3, r3, #26
 800474c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004750:	e015      	b.n	800477e <HAL_ADC_ConfigChannel+0x4fe>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004758:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800475a:	fa93 f3a3 	rbit	r3, r3
 800475e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004762:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800476a:	2320      	movs	r3, #32
 800476c:	e003      	b.n	8004776 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800476e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004770:	fab3 f383 	clz	r3, r3
 8004774:	b2db      	uxtb	r3, r3
 8004776:	3301      	adds	r3, #1
 8004778:	069b      	lsls	r3, r3, #26
 800477a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004786:	2b00      	cmp	r3, #0
 8004788:	d109      	bne.n	800479e <HAL_ADC_ConfigChannel+0x51e>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	0e9b      	lsrs	r3, r3, #26
 8004790:	3301      	adds	r3, #1
 8004792:	f003 031f 	and.w	r3, r3, #31
 8004796:	2101      	movs	r1, #1
 8004798:	fa01 f303 	lsl.w	r3, r1, r3
 800479c:	e017      	b.n	80047ce <HAL_ADC_ConfigChannel+0x54e>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047a6:	fa93 f3a3 	rbit	r3, r3
 80047aa:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80047ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80047b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80047b6:	2320      	movs	r3, #32
 80047b8:	e003      	b.n	80047c2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80047ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047bc:	fab3 f383 	clz	r3, r3
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	3301      	adds	r3, #1
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	2101      	movs	r1, #1
 80047ca:	fa01 f303 	lsl.w	r3, r1, r3
 80047ce:	ea42 0103 	orr.w	r1, r2, r3
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10a      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x574>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	0e9b      	lsrs	r3, r3, #26
 80047e4:	3301      	adds	r3, #1
 80047e6:	f003 021f 	and.w	r2, r3, #31
 80047ea:	4613      	mov	r3, r2
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	4413      	add	r3, r2
 80047f0:	051b      	lsls	r3, r3, #20
 80047f2:	e018      	b.n	8004826 <HAL_ADC_ConfigChannel+0x5a6>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047fc:	fa93 f3a3 	rbit	r3, r3
 8004800:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004804:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800480c:	2320      	movs	r3, #32
 800480e:	e003      	b.n	8004818 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004812:	fab3 f383 	clz	r3, r3
 8004816:	b2db      	uxtb	r3, r3
 8004818:	3301      	adds	r3, #1
 800481a:	f003 021f 	and.w	r2, r3, #31
 800481e:	4613      	mov	r3, r2
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	4413      	add	r3, r2
 8004824:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004826:	430b      	orrs	r3, r1
 8004828:	e081      	b.n	800492e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004832:	2b00      	cmp	r3, #0
 8004834:	d107      	bne.n	8004846 <HAL_ADC_ConfigChannel+0x5c6>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	0e9b      	lsrs	r3, r3, #26
 800483c:	3301      	adds	r3, #1
 800483e:	069b      	lsls	r3, r3, #26
 8004840:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004844:	e015      	b.n	8004872 <HAL_ADC_ConfigChannel+0x5f2>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800484e:	fa93 f3a3 	rbit	r3, r3
 8004852:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004856:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800485e:	2320      	movs	r3, #32
 8004860:	e003      	b.n	800486a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004864:	fab3 f383 	clz	r3, r3
 8004868:	b2db      	uxtb	r3, r3
 800486a:	3301      	adds	r3, #1
 800486c:	069b      	lsls	r3, r3, #26
 800486e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800487a:	2b00      	cmp	r3, #0
 800487c:	d109      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x612>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	0e9b      	lsrs	r3, r3, #26
 8004884:	3301      	adds	r3, #1
 8004886:	f003 031f 	and.w	r3, r3, #31
 800488a:	2101      	movs	r1, #1
 800488c:	fa01 f303 	lsl.w	r3, r1, r3
 8004890:	e017      	b.n	80048c2 <HAL_ADC_ConfigChannel+0x642>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	fa93 f3a3 	rbit	r3, r3
 800489e:	61fb      	str	r3, [r7, #28]
  return result;
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80048a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80048aa:	2320      	movs	r3, #32
 80048ac:	e003      	b.n	80048b6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80048ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b0:	fab3 f383 	clz	r3, r3
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	3301      	adds	r3, #1
 80048b8:	f003 031f 	and.w	r3, r3, #31
 80048bc:	2101      	movs	r1, #1
 80048be:	fa01 f303 	lsl.w	r3, r1, r3
 80048c2:	ea42 0103 	orr.w	r1, r2, r3
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10d      	bne.n	80048ee <HAL_ADC_ConfigChannel+0x66e>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	0e9b      	lsrs	r3, r3, #26
 80048d8:	3301      	adds	r3, #1
 80048da:	f003 021f 	and.w	r2, r3, #31
 80048de:	4613      	mov	r3, r2
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	4413      	add	r3, r2
 80048e4:	3b1e      	subs	r3, #30
 80048e6:	051b      	lsls	r3, r3, #20
 80048e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80048ec:	e01e      	b.n	800492c <HAL_ADC_ConfigChannel+0x6ac>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	fa93 f3a3 	rbit	r3, r3
 80048fa:	613b      	str	r3, [r7, #16]
  return result;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d104      	bne.n	8004910 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004906:	2320      	movs	r3, #32
 8004908:	e006      	b.n	8004918 <HAL_ADC_ConfigChannel+0x698>
 800490a:	bf00      	nop
 800490c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	fab3 f383 	clz	r3, r3
 8004916:	b2db      	uxtb	r3, r3
 8004918:	3301      	adds	r3, #1
 800491a:	f003 021f 	and.w	r2, r3, #31
 800491e:	4613      	mov	r3, r2
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	4413      	add	r3, r2
 8004924:	3b1e      	subs	r3, #30
 8004926:	051b      	lsls	r3, r3, #20
 8004928:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800492c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004932:	4619      	mov	r1, r3
 8004934:	f7fe fef2 	bl	800371c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	4b3f      	ldr	r3, [pc, #252]	@ (8004a3c <HAL_ADC_ConfigChannel+0x7bc>)
 800493e:	4013      	ands	r3, r2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d071      	beq.n	8004a28 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004944:	483e      	ldr	r0, [pc, #248]	@ (8004a40 <HAL_ADC_ConfigChannel+0x7c0>)
 8004946:	f7fe fdeb 	bl	8003520 <LL_ADC_GetCommonPathInternalCh>
 800494a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a3c      	ldr	r2, [pc, #240]	@ (8004a44 <HAL_ADC_ConfigChannel+0x7c4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d004      	beq.n	8004962 <HAL_ADC_ConfigChannel+0x6e2>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a3a      	ldr	r2, [pc, #232]	@ (8004a48 <HAL_ADC_ConfigChannel+0x7c8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d127      	bne.n	80049b2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004962:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004966:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d121      	bne.n	80049b2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004976:	d157      	bne.n	8004a28 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004978:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800497c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004980:	4619      	mov	r1, r3
 8004982:	482f      	ldr	r0, [pc, #188]	@ (8004a40 <HAL_ADC_ConfigChannel+0x7c0>)
 8004984:	f7fe fdb9 	bl	80034fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004988:	4b30      	ldr	r3, [pc, #192]	@ (8004a4c <HAL_ADC_ConfigChannel+0x7cc>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	099b      	lsrs	r3, r3, #6
 800498e:	4a30      	ldr	r2, [pc, #192]	@ (8004a50 <HAL_ADC_ConfigChannel+0x7d0>)
 8004990:	fba2 2303 	umull	r2, r3, r2, r3
 8004994:	099b      	lsrs	r3, r3, #6
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	4613      	mov	r3, r2
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	4413      	add	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049a2:	e002      	b.n	80049aa <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1f9      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049b0:	e03a      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a27      	ldr	r2, [pc, #156]	@ (8004a54 <HAL_ADC_ConfigChannel+0x7d4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d113      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80049bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10d      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a22      	ldr	r2, [pc, #136]	@ (8004a58 <HAL_ADC_ConfigChannel+0x7d8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d02a      	beq.n	8004a28 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049da:	4619      	mov	r1, r3
 80049dc:	4818      	ldr	r0, [pc, #96]	@ (8004a40 <HAL_ADC_ConfigChannel+0x7c0>)
 80049de:	f7fe fd8c 	bl	80034fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049e2:	e021      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a5c <HAL_ADC_ConfigChannel+0x7dc>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d11c      	bne.n	8004a28 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d116      	bne.n	8004a28 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a16      	ldr	r2, [pc, #88]	@ (8004a58 <HAL_ADC_ConfigChannel+0x7d8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d011      	beq.n	8004a28 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	480c      	ldr	r0, [pc, #48]	@ (8004a40 <HAL_ADC_ConfigChannel+0x7c0>)
 8004a10:	f7fe fd73 	bl	80034fa <LL_ADC_SetCommonPathInternalCh>
 8004a14:	e008      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a1a:	f043 0220 	orr.w	r2, r3, #32
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a30:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	37d8      	adds	r7, #216	@ 0xd8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	80080000 	.word	0x80080000
 8004a40:	50000300 	.word	0x50000300
 8004a44:	c3210000 	.word	0xc3210000
 8004a48:	90c00010 	.word	0x90c00010
 8004a4c:	20000010 	.word	0x20000010
 8004a50:	053e2d63 	.word	0x053e2d63
 8004a54:	c7520000 	.word	0xc7520000
 8004a58:	50000100 	.word	0x50000100
 8004a5c:	cb840000 	.word	0xcb840000

08004a60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fe ff35 	bl	80038e0 <LL_ADC_IsEnabled>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d169      	bne.n	8004b50 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	4b36      	ldr	r3, [pc, #216]	@ (8004b5c <ADC_Enable+0xfc>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00d      	beq.n	8004aa6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a8e:	f043 0210 	orr.w	r2, r3, #16
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a9a:	f043 0201 	orr.w	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e055      	b.n	8004b52 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fe fef0 	bl	8003890 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004ab0:	482b      	ldr	r0, [pc, #172]	@ (8004b60 <ADC_Enable+0x100>)
 8004ab2:	f7fe fd35 	bl	8003520 <LL_ADC_GetCommonPathInternalCh>
 8004ab6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004ab8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d013      	beq.n	8004ae8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ac0:	4b28      	ldr	r3, [pc, #160]	@ (8004b64 <ADC_Enable+0x104>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	099b      	lsrs	r3, r3, #6
 8004ac6:	4a28      	ldr	r2, [pc, #160]	@ (8004b68 <ADC_Enable+0x108>)
 8004ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8004acc:	099b      	lsrs	r3, r3, #6
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ada:	e002      	b.n	8004ae2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1f9      	bne.n	8004adc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ae8:	f7fe fcc6 	bl	8003478 <HAL_GetTick>
 8004aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004aee:	e028      	b.n	8004b42 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fe fef3 	bl	80038e0 <LL_ADC_IsEnabled>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d104      	bne.n	8004b0a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fe fec3 	bl	8003890 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b0a:	f7fe fcb5 	bl	8003478 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d914      	bls.n	8004b42 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d00d      	beq.n	8004b42 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b2a:	f043 0210 	orr.w	r2, r3, #16
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b36:	f043 0201 	orr.w	r2, r3, #1
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e007      	b.n	8004b52 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d1cf      	bne.n	8004af0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	8000003f 	.word	0x8000003f
 8004b60:	50000300 	.word	0x50000300
 8004b64:	20000010 	.word	0x20000010
 8004b68:	053e2d63 	.word	0x053e2d63

08004b6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fe fec4 	bl	8003906 <LL_ADC_IsDisableOngoing>
 8004b7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fe feab 	bl	80038e0 <LL_ADC_IsEnabled>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d047      	beq.n	8004c20 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d144      	bne.n	8004c20 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 030d 	and.w	r3, r3, #13
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d10c      	bne.n	8004bbe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fe fe85 	bl	80038b8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2203      	movs	r2, #3
 8004bb4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004bb6:	f7fe fc5f 	bl	8003478 <HAL_GetTick>
 8004bba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bbc:	e029      	b.n	8004c12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc2:	f043 0210 	orr.w	r2, r3, #16
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bce:	f043 0201 	orr.w	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e023      	b.n	8004c22 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004bda:	f7fe fc4d 	bl	8003478 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d914      	bls.n	8004c12 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00d      	beq.n	8004c12 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bfa:	f043 0210 	orr.w	r2, r3, #16
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c06:	f043 0201 	orr.w	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e007      	b.n	8004c22 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1dc      	bne.n	8004bda <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c3c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d14b      	bne.n	8004cdc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c48:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d021      	beq.n	8004ca2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fe fd08 	bl	8003678 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d032      	beq.n	8004cd4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d12b      	bne.n	8004cd4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d11f      	bne.n	8004cd4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c98:	f043 0201 	orr.w	r2, r3, #1
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ca0:	e018      	b.n	8004cd4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d111      	bne.n	8004cd4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d105      	bne.n	8004cd4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ccc:	f043 0201 	orr.w	r2, r3, #1
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f7fc fe51 	bl	800197c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004cda:	e00e      	b.n	8004cfa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f7ff fabf 	bl	800426c <HAL_ADC_ErrorCallback>
}
 8004cee:	e004      	b.n	8004cfa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	4798      	blx	r3
}
 8004cfa:	bf00      	nop
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f7ff fa97 	bl	8004244 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d16:	bf00      	nop
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d30:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d3c:	f043 0204 	orr.w	r2, r3, #4
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f7ff fa91 	bl	800426c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d4a:	bf00      	nop
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <LL_ADC_IsEnabled>:
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <LL_ADC_IsEnabled+0x18>
 8004d66:	2301      	movs	r3, #1
 8004d68:	e000      	b.n	8004d6c <LL_ADC_IsEnabled+0x1a>
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <LL_ADC_StartCalibration>:
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004d8a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	609a      	str	r2, [r3, #8]
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <LL_ADC_IsCalibrationOnGoing>:
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dbe:	d101      	bne.n	8004dc4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <LL_ADC_REG_IsConversionOngoing>:
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d101      	bne.n	8004dea <LL_ADC_REG_IsConversionOngoing+0x18>
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_ADCEx_Calibration_Start+0x1c>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e04d      	b.n	8004eb0 <HAL_ADCEx_Calibration_Start+0xb8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7ff fea5 	bl	8004b6c <ADC_Disable>
 8004e22:	4603      	mov	r3, r0
 8004e24:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d136      	bne.n	8004e9a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e30:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004e34:	f023 0302 	bic.w	r3, r3, #2
 8004e38:	f043 0202 	orr.w	r2, r3, #2
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6839      	ldr	r1, [r7, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff ff96 	bl	8004d78 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e4c:	e014      	b.n	8004e78 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	3301      	adds	r3, #1
 8004e52:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4a18      	ldr	r2, [pc, #96]	@ (8004eb8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d90d      	bls.n	8004e78 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e60:	f023 0312 	bic.w	r3, r3, #18
 8004e64:	f043 0210 	orr.w	r2, r3, #16
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e01b      	b.n	8004eb0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff ff94 	bl	8004daa <LL_ADC_IsCalibrationOnGoing>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e2      	bne.n	8004e4e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e8c:	f023 0303 	bic.w	r3, r3, #3
 8004e90:	f043 0201 	orr.w	r2, r3, #1
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e98:	e005      	b.n	8004ea6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e9e:	f043 0210 	orr.w	r2, r3, #16
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	0004de01 	.word	0x0004de01

08004ebc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004f20:	b590      	push	{r4, r7, lr}
 8004f22:	b0a1      	sub	sp, #132	@ 0x84
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	e08b      	b.n	8005056 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004f46:	2300      	movs	r3, #0
 8004f48:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f56:	d102      	bne.n	8004f5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f58:	4b41      	ldr	r3, [pc, #260]	@ (8005060 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004f5a:	60bb      	str	r3, [r7, #8]
 8004f5c:	e001      	b.n	8004f62 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10b      	bne.n	8004f80 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f6c:	f043 0220 	orr.w	r2, r3, #32
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e06a      	b.n	8005056 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff ff25 	bl	8004dd2 <LL_ADC_REG_IsConversionOngoing>
 8004f88:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff ff1f 	bl	8004dd2 <LL_ADC_REG_IsConversionOngoing>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d14c      	bne.n	8005034 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004f9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d149      	bne.n	8005034 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004fa0:	4b30      	ldr	r3, [pc, #192]	@ (8005064 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004fa2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d028      	beq.n	8004ffe <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004fac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	6859      	ldr	r1, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004fbe:	035b      	lsls	r3, r3, #13
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fc6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fc8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004fcc:	f7ff fec1 	bl	8004d52 <LL_ADC_IsEnabled>
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	4823      	ldr	r0, [pc, #140]	@ (8005060 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004fd4:	f7ff febd 	bl	8004d52 <LL_ADC_IsEnabled>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	4323      	orrs	r3, r4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d133      	bne.n	8005048 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004fe0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004fe8:	f023 030f 	bic.w	r3, r3, #15
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	6811      	ldr	r1, [r2, #0]
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	6892      	ldr	r2, [r2, #8]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ffa:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ffc:	e024      	b.n	8005048 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004ffe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005006:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005008:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800500a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800500e:	f7ff fea0 	bl	8004d52 <LL_ADC_IsEnabled>
 8005012:	4604      	mov	r4, r0
 8005014:	4812      	ldr	r0, [pc, #72]	@ (8005060 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005016:	f7ff fe9c 	bl	8004d52 <LL_ADC_IsEnabled>
 800501a:	4603      	mov	r3, r0
 800501c:	4323      	orrs	r3, r4
 800501e:	2b00      	cmp	r3, #0
 8005020:	d112      	bne.n	8005048 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005022:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800502a:	f023 030f 	bic.w	r3, r3, #15
 800502e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005030:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005032:	e009      	b.n	8005048 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005038:	f043 0220 	orr.w	r2, r3, #32
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005046:	e000      	b.n	800504a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005048:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005052:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005056:	4618      	mov	r0, r3
 8005058:	3784      	adds	r7, #132	@ 0x84
 800505a:	46bd      	mov	sp, r7
 800505c:	bd90      	pop	{r4, r7, pc}
 800505e:	bf00      	nop
 8005060:	50000100 	.word	0x50000100
 8005064:	50000300 	.word	0x50000300

08005068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005078:	4b0c      	ldr	r3, [pc, #48]	@ (80050ac <__NVIC_SetPriorityGrouping+0x44>)
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005084:	4013      	ands	r3, r2
 8005086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005090:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800509a:	4a04      	ldr	r2, [pc, #16]	@ (80050ac <__NVIC_SetPriorityGrouping+0x44>)
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	60d3      	str	r3, [r2, #12]
}
 80050a0:	bf00      	nop
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	e000ed00 	.word	0xe000ed00

080050b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050b4:	4b04      	ldr	r3, [pc, #16]	@ (80050c8 <__NVIC_GetPriorityGrouping+0x18>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	0a1b      	lsrs	r3, r3, #8
 80050ba:	f003 0307 	and.w	r3, r3, #7
}
 80050be:	4618      	mov	r0, r3
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	e000ed00 	.word	0xe000ed00

080050cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	4603      	mov	r3, r0
 80050d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	db0b      	blt.n	80050f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	f003 021f 	and.w	r2, r3, #31
 80050e4:	4907      	ldr	r1, [pc, #28]	@ (8005104 <__NVIC_EnableIRQ+0x38>)
 80050e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ea:	095b      	lsrs	r3, r3, #5
 80050ec:	2001      	movs	r0, #1
 80050ee:	fa00 f202 	lsl.w	r2, r0, r2
 80050f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	e000e100 	.word	0xe000e100

08005108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	6039      	str	r1, [r7, #0]
 8005112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005118:	2b00      	cmp	r3, #0
 800511a:	db0a      	blt.n	8005132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	b2da      	uxtb	r2, r3
 8005120:	490c      	ldr	r1, [pc, #48]	@ (8005154 <__NVIC_SetPriority+0x4c>)
 8005122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005126:	0112      	lsls	r2, r2, #4
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	440b      	add	r3, r1
 800512c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005130:	e00a      	b.n	8005148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	b2da      	uxtb	r2, r3
 8005136:	4908      	ldr	r1, [pc, #32]	@ (8005158 <__NVIC_SetPriority+0x50>)
 8005138:	79fb      	ldrb	r3, [r7, #7]
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	3b04      	subs	r3, #4
 8005140:	0112      	lsls	r2, r2, #4
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	440b      	add	r3, r1
 8005146:	761a      	strb	r2, [r3, #24]
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	e000e100 	.word	0xe000e100
 8005158:	e000ed00 	.word	0xe000ed00

0800515c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800515c:	b480      	push	{r7}
 800515e:	b089      	sub	sp, #36	@ 0x24
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	f1c3 0307 	rsb	r3, r3, #7
 8005176:	2b04      	cmp	r3, #4
 8005178:	bf28      	it	cs
 800517a:	2304      	movcs	r3, #4
 800517c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	3304      	adds	r3, #4
 8005182:	2b06      	cmp	r3, #6
 8005184:	d902      	bls.n	800518c <NVIC_EncodePriority+0x30>
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	3b03      	subs	r3, #3
 800518a:	e000      	b.n	800518e <NVIC_EncodePriority+0x32>
 800518c:	2300      	movs	r3, #0
 800518e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005190:	f04f 32ff 	mov.w	r2, #4294967295
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	43da      	mvns	r2, r3
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	401a      	ands	r2, r3
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051a4:	f04f 31ff 	mov.w	r1, #4294967295
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	fa01 f303 	lsl.w	r3, r1, r3
 80051ae:	43d9      	mvns	r1, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051b4:	4313      	orrs	r3, r2
         );
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3724      	adds	r7, #36	@ 0x24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
	...

080051c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051d4:	d301      	bcc.n	80051da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051d6:	2301      	movs	r3, #1
 80051d8:	e00f      	b.n	80051fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051da:	4a0a      	ldr	r2, [pc, #40]	@ (8005204 <SysTick_Config+0x40>)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3b01      	subs	r3, #1
 80051e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051e2:	210f      	movs	r1, #15
 80051e4:	f04f 30ff 	mov.w	r0, #4294967295
 80051e8:	f7ff ff8e 	bl	8005108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051ec:	4b05      	ldr	r3, [pc, #20]	@ (8005204 <SysTick_Config+0x40>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051f2:	4b04      	ldr	r3, [pc, #16]	@ (8005204 <SysTick_Config+0x40>)
 80051f4:	2207      	movs	r2, #7
 80051f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	e000e010 	.word	0xe000e010

08005208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7ff ff29 	bl	8005068 <__NVIC_SetPriorityGrouping>
}
 8005216:	bf00      	nop
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b086      	sub	sp, #24
 8005222:	af00      	add	r7, sp, #0
 8005224:	4603      	mov	r3, r0
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	607a      	str	r2, [r7, #4]
 800522a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800522c:	f7ff ff40 	bl	80050b0 <__NVIC_GetPriorityGrouping>
 8005230:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	68b9      	ldr	r1, [r7, #8]
 8005236:	6978      	ldr	r0, [r7, #20]
 8005238:	f7ff ff90 	bl	800515c <NVIC_EncodePriority>
 800523c:	4602      	mov	r2, r0
 800523e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005242:	4611      	mov	r1, r2
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff ff5f 	bl	8005108 <__NVIC_SetPriority>
}
 800524a:	bf00      	nop
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b082      	sub	sp, #8
 8005256:	af00      	add	r7, sp, #0
 8005258:	4603      	mov	r3, r0
 800525a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800525c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff ff33 	bl	80050cc <__NVIC_EnableIRQ>
}
 8005266:	bf00      	nop
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b082      	sub	sp, #8
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff ffa4 	bl	80051c4 <SysTick_Config>
 800527c:	4603      	mov	r3, r0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e08d      	b.n	80053b6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	461a      	mov	r2, r3
 80052a0:	4b47      	ldr	r3, [pc, #284]	@ (80053c0 <HAL_DMA_Init+0x138>)
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d80f      	bhi.n	80052c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	4b45      	ldr	r3, [pc, #276]	@ (80053c4 <HAL_DMA_Init+0x13c>)
 80052ae:	4413      	add	r3, r2
 80052b0:	4a45      	ldr	r2, [pc, #276]	@ (80053c8 <HAL_DMA_Init+0x140>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	091b      	lsrs	r3, r3, #4
 80052b8:	009a      	lsls	r2, r3, #2
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a42      	ldr	r2, [pc, #264]	@ (80053cc <HAL_DMA_Init+0x144>)
 80052c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80052c4:	e00e      	b.n	80052e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	4b40      	ldr	r3, [pc, #256]	@ (80053d0 <HAL_DMA_Init+0x148>)
 80052ce:	4413      	add	r3, r2
 80052d0:	4a3d      	ldr	r2, [pc, #244]	@ (80053c8 <HAL_DMA_Init+0x140>)
 80052d2:	fba2 2303 	umull	r2, r3, r2, r3
 80052d6:	091b      	lsrs	r3, r3, #4
 80052d8:	009a      	lsls	r2, r3, #2
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a3c      	ldr	r2, [pc, #240]	@ (80053d4 <HAL_DMA_Init+0x14c>)
 80052e2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80052fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005308:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005314:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005320:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fa1e 	bl	8005778 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005344:	d102      	bne.n	800534c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005360:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d010      	beq.n	800538c <HAL_DMA_Init+0x104>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2b04      	cmp	r3, #4
 8005370:	d80c      	bhi.n	800538c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fa3e 	bl	80057f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005388:	605a      	str	r2, [r3, #4]
 800538a:	e008      	b.n	800539e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	40020407 	.word	0x40020407
 80053c4:	bffdfff8 	.word	0xbffdfff8
 80053c8:	cccccccd 	.word	0xcccccccd
 80053cc:	40020000 	.word	0x40020000
 80053d0:	bffdfbf8 	.word	0xbffdfbf8
 80053d4:	40020400 	.word	0x40020400

080053d8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_DMA_Start_IT+0x20>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e066      	b.n	80054c6 <HAL_DMA_Start_IT+0xee>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b01      	cmp	r3, #1
 800540a:	d155      	bne.n	80054b8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0201 	bic.w	r2, r2, #1
 8005428:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	68b9      	ldr	r1, [r7, #8]
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f000 f962 	bl	80056fa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543a:	2b00      	cmp	r3, #0
 800543c:	d008      	beq.n	8005450 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f042 020e 	orr.w	r2, r2, #14
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	e00f      	b.n	8005470 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0204 	bic.w	r2, r2, #4
 800545e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 020a 	orr.w	r2, r2, #10
 800546e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d007      	beq.n	800548e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005488:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800548c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 0201 	orr.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	e005      	b.n	80054c4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80054c0:	2302      	movs	r3, #2
 80054c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d00d      	beq.n	8005502 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2204      	movs	r2, #4
 80054ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	73fb      	strb	r3, [r7, #15]
 8005500:	e047      	b.n	8005592 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 020e 	bic.w	r2, r2, #14
 8005510:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0201 	bic.w	r2, r2, #1
 8005520:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800552c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005530:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005536:	f003 021f 	and.w	r2, r3, #31
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	2101      	movs	r1, #1
 8005540:	fa01 f202 	lsl.w	r2, r1, r2
 8005544:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800554e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00c      	beq.n	8005572 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005562:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005566:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005570:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	4798      	blx	r3
    }
  }
  return status;
 8005592:	7bfb      	ldrb	r3, [r7, #15]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b8:	f003 031f 	and.w	r3, r3, #31
 80055bc:	2204      	movs	r2, #4
 80055be:	409a      	lsls	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4013      	ands	r3, r2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d026      	beq.n	8005616 <HAL_DMA_IRQHandler+0x7a>
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 0304 	and.w	r3, r3, #4
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d021      	beq.n	8005616 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0320 	and.w	r3, r3, #32
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d107      	bne.n	80055f0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0204 	bic.w	r2, r2, #4
 80055ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f4:	f003 021f 	and.w	r2, r3, #31
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fc:	2104      	movs	r1, #4
 80055fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005602:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005608:	2b00      	cmp	r3, #0
 800560a:	d071      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005614:	e06c      	b.n	80056f0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561a:	f003 031f 	and.w	r3, r3, #31
 800561e:	2202      	movs	r2, #2
 8005620:	409a      	lsls	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4013      	ands	r3, r2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d02e      	beq.n	8005688 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d029      	beq.n	8005688 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0320 	and.w	r3, r3, #32
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10b      	bne.n	800565a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 020a 	bic.w	r2, r2, #10
 8005650:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800565e:	f003 021f 	and.w	r2, r3, #31
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005666:	2102      	movs	r1, #2
 8005668:	fa01 f202 	lsl.w	r2, r1, r2
 800566c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567a:	2b00      	cmp	r3, #0
 800567c:	d038      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005686:	e033      	b.n	80056f0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800568c:	f003 031f 	and.w	r3, r3, #31
 8005690:	2208      	movs	r2, #8
 8005692:	409a      	lsls	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4013      	ands	r3, r2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d02a      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d025      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 020e 	bic.w	r2, r2, #14
 80056b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ba:	f003 021f 	and.w	r2, r3, #31
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c2:	2101      	movs	r1, #1
 80056c4:	fa01 f202 	lsl.w	r2, r1, r2
 80056c8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d004      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80056f0:	bf00      	nop
 80056f2:	bf00      	nop
}
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b085      	sub	sp, #20
 80056fe:	af00      	add	r7, sp, #0
 8005700:	60f8      	str	r0, [r7, #12]
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	607a      	str	r2, [r7, #4]
 8005706:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005710:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005716:	2b00      	cmp	r3, #0
 8005718:	d004      	beq.n	8005724 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005722:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005728:	f003 021f 	and.w	r2, r3, #31
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005730:	2101      	movs	r1, #1
 8005732:	fa01 f202 	lsl.w	r2, r1, r2
 8005736:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2b10      	cmp	r3, #16
 8005746:	d108      	bne.n	800575a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005758:	e007      	b.n	800576a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	60da      	str	r2, [r3, #12]
}
 800576a:	bf00      	nop
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
	...

08005778 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	461a      	mov	r2, r3
 8005786:	4b16      	ldr	r3, [pc, #88]	@ (80057e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005788:	429a      	cmp	r2, r3
 800578a:	d802      	bhi.n	8005792 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800578c:	4b15      	ldr	r3, [pc, #84]	@ (80057e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	e001      	b.n	8005796 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005792:	4b15      	ldr	r3, [pc, #84]	@ (80057e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005794:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	3b08      	subs	r3, #8
 80057a2:	4a12      	ldr	r2, [pc, #72]	@ (80057ec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80057a4:	fba2 2303 	umull	r2, r3, r2, r3
 80057a8:	091b      	lsrs	r3, r3, #4
 80057aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b0:	089b      	lsrs	r3, r3, #2
 80057b2:	009a      	lsls	r2, r3, #2
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4413      	add	r3, r2
 80057b8:	461a      	mov	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a0b      	ldr	r2, [pc, #44]	@ (80057f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80057c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f003 031f 	and.w	r3, r3, #31
 80057ca:	2201      	movs	r2, #1
 80057cc:	409a      	lsls	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80057d2:	bf00      	nop
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40020407 	.word	0x40020407
 80057e4:	40020800 	.word	0x40020800
 80057e8:	40020820 	.word	0x40020820
 80057ec:	cccccccd 	.word	0xcccccccd
 80057f0:	40020880 	.word	0x40020880

080057f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	4b0b      	ldr	r3, [pc, #44]	@ (8005834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005808:	4413      	add	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	461a      	mov	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a08      	ldr	r2, [pc, #32]	@ (8005838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005816:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3b01      	subs	r3, #1
 800581c:	f003 031f 	and.w	r3, r3, #31
 8005820:	2201      	movs	r2, #1
 8005822:	409a      	lsls	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005828:	bf00      	nop
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	1000823f 	.word	0x1000823f
 8005838:	40020940 	.word	0x40020940

0800583c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005846:	2300      	movs	r3, #0
 8005848:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800584a:	e15a      	b.n	8005b02 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	2101      	movs	r1, #1
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	fa01 f303 	lsl.w	r3, r1, r3
 8005858:	4013      	ands	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 814c 	beq.w	8005afc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f003 0303 	and.w	r3, r3, #3
 800586c:	2b01      	cmp	r3, #1
 800586e:	d005      	beq.n	800587c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005878:	2b02      	cmp	r3, #2
 800587a:	d130      	bne.n	80058de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	2203      	movs	r2, #3
 8005888:	fa02 f303 	lsl.w	r3, r2, r3
 800588c:	43db      	mvns	r3, r3
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4013      	ands	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058b2:	2201      	movs	r2, #1
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	43db      	mvns	r3, r3
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4013      	ands	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	091b      	lsrs	r3, r3, #4
 80058c8:	f003 0201 	and.w	r2, r3, #1
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d017      	beq.n	800591a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	2203      	movs	r2, #3
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	43db      	mvns	r3, r3
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4013      	ands	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	fa02 f303 	lsl.w	r3, r2, r3
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4313      	orrs	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d123      	bne.n	800596e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	08da      	lsrs	r2, r3, #3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3208      	adds	r2, #8
 800592e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005932:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	220f      	movs	r2, #15
 800593e:	fa02 f303 	lsl.w	r3, r2, r3
 8005942:	43db      	mvns	r3, r3
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4013      	ands	r3, r2
 8005948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	691a      	ldr	r2, [r3, #16]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	fa02 f303 	lsl.w	r3, r2, r3
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	4313      	orrs	r3, r2
 800595e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	08da      	lsrs	r2, r3, #3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3208      	adds	r2, #8
 8005968:	6939      	ldr	r1, [r7, #16]
 800596a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	2203      	movs	r2, #3
 800597a:	fa02 f303 	lsl.w	r3, r2, r3
 800597e:	43db      	mvns	r3, r3
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	4013      	ands	r3, r2
 8005984:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f003 0203 	and.w	r2, r3, #3
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	fa02 f303 	lsl.w	r3, r2, r3
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 80a6 	beq.w	8005afc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059b0:	4b5b      	ldr	r3, [pc, #364]	@ (8005b20 <HAL_GPIO_Init+0x2e4>)
 80059b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059b4:	4a5a      	ldr	r2, [pc, #360]	@ (8005b20 <HAL_GPIO_Init+0x2e4>)
 80059b6:	f043 0301 	orr.w	r3, r3, #1
 80059ba:	6613      	str	r3, [r2, #96]	@ 0x60
 80059bc:	4b58      	ldr	r3, [pc, #352]	@ (8005b20 <HAL_GPIO_Init+0x2e4>)
 80059be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	60bb      	str	r3, [r7, #8]
 80059c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059c8:	4a56      	ldr	r2, [pc, #344]	@ (8005b24 <HAL_GPIO_Init+0x2e8>)
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	089b      	lsrs	r3, r3, #2
 80059ce:	3302      	adds	r3, #2
 80059d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f003 0303 	and.w	r3, r3, #3
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	220f      	movs	r2, #15
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	43db      	mvns	r3, r3
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4013      	ands	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80059f2:	d01f      	beq.n	8005a34 <HAL_GPIO_Init+0x1f8>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a4c      	ldr	r2, [pc, #304]	@ (8005b28 <HAL_GPIO_Init+0x2ec>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d019      	beq.n	8005a30 <HAL_GPIO_Init+0x1f4>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a4b      	ldr	r2, [pc, #300]	@ (8005b2c <HAL_GPIO_Init+0x2f0>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d013      	beq.n	8005a2c <HAL_GPIO_Init+0x1f0>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a4a      	ldr	r2, [pc, #296]	@ (8005b30 <HAL_GPIO_Init+0x2f4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00d      	beq.n	8005a28 <HAL_GPIO_Init+0x1ec>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a49      	ldr	r2, [pc, #292]	@ (8005b34 <HAL_GPIO_Init+0x2f8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d007      	beq.n	8005a24 <HAL_GPIO_Init+0x1e8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a48      	ldr	r2, [pc, #288]	@ (8005b38 <HAL_GPIO_Init+0x2fc>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d101      	bne.n	8005a20 <HAL_GPIO_Init+0x1e4>
 8005a1c:	2305      	movs	r3, #5
 8005a1e:	e00a      	b.n	8005a36 <HAL_GPIO_Init+0x1fa>
 8005a20:	2306      	movs	r3, #6
 8005a22:	e008      	b.n	8005a36 <HAL_GPIO_Init+0x1fa>
 8005a24:	2304      	movs	r3, #4
 8005a26:	e006      	b.n	8005a36 <HAL_GPIO_Init+0x1fa>
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e004      	b.n	8005a36 <HAL_GPIO_Init+0x1fa>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e002      	b.n	8005a36 <HAL_GPIO_Init+0x1fa>
 8005a30:	2301      	movs	r3, #1
 8005a32:	e000      	b.n	8005a36 <HAL_GPIO_Init+0x1fa>
 8005a34:	2300      	movs	r3, #0
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	f002 0203 	and.w	r2, r2, #3
 8005a3c:	0092      	lsls	r2, r2, #2
 8005a3e:	4093      	lsls	r3, r2
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a46:	4937      	ldr	r1, [pc, #220]	@ (8005b24 <HAL_GPIO_Init+0x2e8>)
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	089b      	lsrs	r3, r3, #2
 8005a4c:	3302      	adds	r3, #2
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a54:	4b39      	ldr	r3, [pc, #228]	@ (8005b3c <HAL_GPIO_Init+0x300>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4013      	ands	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005a78:	4a30      	ldr	r2, [pc, #192]	@ (8005b3c <HAL_GPIO_Init+0x300>)
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8005b3c <HAL_GPIO_Init+0x300>)
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	43db      	mvns	r3, r3
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005aa2:	4a26      	ldr	r2, [pc, #152]	@ (8005b3c <HAL_GPIO_Init+0x300>)
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005aa8:	4b24      	ldr	r3, [pc, #144]	@ (8005b3c <HAL_GPIO_Init+0x300>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005acc:	4a1b      	ldr	r2, [pc, #108]	@ (8005b3c <HAL_GPIO_Init+0x300>)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8005b3c <HAL_GPIO_Init+0x300>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	43db      	mvns	r3, r3
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005af6:	4a11      	ldr	r2, [pc, #68]	@ (8005b3c <HAL_GPIO_Init+0x300>)
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	3301      	adds	r3, #1
 8005b00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f47f ae9d 	bne.w	800584c <HAL_GPIO_Init+0x10>
  }
}
 8005b12:	bf00      	nop
 8005b14:	bf00      	nop
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	40021000 	.word	0x40021000
 8005b24:	40010000 	.word	0x40010000
 8005b28:	48000400 	.word	0x48000400
 8005b2c:	48000800 	.word	0x48000800
 8005b30:	48000c00 	.word	0x48000c00
 8005b34:	48001000 	.word	0x48001000
 8005b38:	48001400 	.word	0x48001400
 8005b3c:	40010400 	.word	0x40010400

08005b40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	887b      	ldrh	r3, [r7, #2]
 8005b52:	4013      	ands	r3, r2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	73fb      	strb	r3, [r7, #15]
 8005b5c:	e001      	b.n	8005b62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	807b      	strh	r3, [r7, #2]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b80:	787b      	ldrb	r3, [r7, #1]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b86:	887a      	ldrh	r2, [r7, #2]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b8c:	e002      	b.n	8005b94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b8e:	887a      	ldrh	r2, [r7, #2]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d141      	bne.n	8005c32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bae:	4b4b      	ldr	r3, [pc, #300]	@ (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bba:	d131      	bne.n	8005c20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005bbc:	4b47      	ldr	r3, [pc, #284]	@ (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bc2:	4a46      	ldr	r2, [pc, #280]	@ (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bcc:	4b43      	ldr	r3, [pc, #268]	@ (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005bd4:	4a41      	ldr	r2, [pc, #260]	@ (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005bda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005bdc:	4b40      	ldr	r3, [pc, #256]	@ (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2232      	movs	r2, #50	@ 0x32
 8005be2:	fb02 f303 	mul.w	r3, r2, r3
 8005be6:	4a3f      	ldr	r2, [pc, #252]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005be8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bec:	0c9b      	lsrs	r3, r3, #18
 8005bee:	3301      	adds	r3, #1
 8005bf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bf2:	e002      	b.n	8005bfa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bfa:	4b38      	ldr	r3, [pc, #224]	@ (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c06:	d102      	bne.n	8005c0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1f2      	bne.n	8005bf4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c0e:	4b33      	ldr	r3, [pc, #204]	@ (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c1a:	d158      	bne.n	8005cce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e057      	b.n	8005cd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c20:	4b2e      	ldr	r3, [pc, #184]	@ (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c26:	4a2d      	ldr	r2, [pc, #180]	@ (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005c30:	e04d      	b.n	8005cce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c38:	d141      	bne.n	8005cbe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c3a:	4b28      	ldr	r3, [pc, #160]	@ (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c46:	d131      	bne.n	8005cac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c48:	4b24      	ldr	r3, [pc, #144]	@ (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c4e:	4a23      	ldr	r2, [pc, #140]	@ (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c58:	4b20      	ldr	r3, [pc, #128]	@ (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c60:	4a1e      	ldr	r2, [pc, #120]	@ (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c68:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2232      	movs	r2, #50	@ 0x32
 8005c6e:	fb02 f303 	mul.w	r3, r2, r3
 8005c72:	4a1c      	ldr	r2, [pc, #112]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c74:	fba2 2303 	umull	r2, r3, r2, r3
 8005c78:	0c9b      	lsrs	r3, r3, #18
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c7e:	e002      	b.n	8005c86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c86:	4b15      	ldr	r3, [pc, #84]	@ (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c92:	d102      	bne.n	8005c9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f2      	bne.n	8005c80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c9a:	4b10      	ldr	r3, [pc, #64]	@ (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ca6:	d112      	bne.n	8005cce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e011      	b.n	8005cd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cac:	4b0b      	ldr	r3, [pc, #44]	@ (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005cbc:	e007      	b.n	8005cce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005cbe:	4b07      	ldr	r3, [pc, #28]	@ (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005cc6:	4a05      	ldr	r2, [pc, #20]	@ (8005cdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ccc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	40007000 	.word	0x40007000
 8005ce0:	20000010 	.word	0x20000010
 8005ce4:	431bde83 	.word	0x431bde83

08005ce8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005cec:	4b05      	ldr	r3, [pc, #20]	@ (8005d04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	4a04      	ldr	r2, [pc, #16]	@ (8005d04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005cf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cf6:	6093      	str	r3, [r2, #8]
}
 8005cf8:	bf00      	nop
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	40007000 	.word	0x40007000

08005d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b088      	sub	sp, #32
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e2fe      	b.n	8006318 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d075      	beq.n	8005e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d26:	4b97      	ldr	r3, [pc, #604]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 030c 	and.w	r3, r3, #12
 8005d2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d30:	4b94      	ldr	r3, [pc, #592]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f003 0303 	and.w	r3, r3, #3
 8005d38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	2b0c      	cmp	r3, #12
 8005d3e:	d102      	bne.n	8005d46 <HAL_RCC_OscConfig+0x3e>
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d002      	beq.n	8005d4c <HAL_RCC_OscConfig+0x44>
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d10b      	bne.n	8005d64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d4c:	4b8d      	ldr	r3, [pc, #564]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d05b      	beq.n	8005e10 <HAL_RCC_OscConfig+0x108>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d157      	bne.n	8005e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e2d9      	b.n	8006318 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d6c:	d106      	bne.n	8005d7c <HAL_RCC_OscConfig+0x74>
 8005d6e:	4b85      	ldr	r3, [pc, #532]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a84      	ldr	r2, [pc, #528]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	e01d      	b.n	8005db8 <HAL_RCC_OscConfig+0xb0>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d84:	d10c      	bne.n	8005da0 <HAL_RCC_OscConfig+0x98>
 8005d86:	4b7f      	ldr	r3, [pc, #508]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a7e      	ldr	r2, [pc, #504]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	4b7c      	ldr	r3, [pc, #496]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a7b      	ldr	r2, [pc, #492]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	e00b      	b.n	8005db8 <HAL_RCC_OscConfig+0xb0>
 8005da0:	4b78      	ldr	r3, [pc, #480]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a77      	ldr	r2, [pc, #476]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	4b75      	ldr	r3, [pc, #468]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a74      	ldr	r2, [pc, #464]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d013      	beq.n	8005de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc0:	f7fd fb5a 	bl	8003478 <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dc8:	f7fd fb56 	bl	8003478 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b64      	cmp	r3, #100	@ 0x64
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e29e      	b.n	8006318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dda:	4b6a      	ldr	r3, [pc, #424]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCC_OscConfig+0xc0>
 8005de6:	e014      	b.n	8005e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de8:	f7fd fb46 	bl	8003478 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005df0:	f7fd fb42 	bl	8003478 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b64      	cmp	r3, #100	@ 0x64
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e28a      	b.n	8006318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e02:	4b60      	ldr	r3, [pc, #384]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f0      	bne.n	8005df0 <HAL_RCC_OscConfig+0xe8>
 8005e0e:	e000      	b.n	8005e12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d075      	beq.n	8005f0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e1e:	4b59      	ldr	r3, [pc, #356]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 030c 	and.w	r3, r3, #12
 8005e26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e28:	4b56      	ldr	r3, [pc, #344]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0303 	and.w	r3, r3, #3
 8005e30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	2b0c      	cmp	r3, #12
 8005e36:	d102      	bne.n	8005e3e <HAL_RCC_OscConfig+0x136>
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d002      	beq.n	8005e44 <HAL_RCC_OscConfig+0x13c>
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d11f      	bne.n	8005e84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e44:	4b4f      	ldr	r3, [pc, #316]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <HAL_RCC_OscConfig+0x154>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e25d      	b.n	8006318 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e5c:	4b49      	ldr	r3, [pc, #292]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	061b      	lsls	r3, r3, #24
 8005e6a:	4946      	ldr	r1, [pc, #280]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005e70:	4b45      	ldr	r3, [pc, #276]	@ (8005f88 <HAL_RCC_OscConfig+0x280>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fd fab3 	bl	80033e0 <HAL_InitTick>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d043      	beq.n	8005f08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e249      	b.n	8006318 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d023      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e8c:	4b3d      	ldr	r3, [pc, #244]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a3c      	ldr	r2, [pc, #240]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e98:	f7fd faee 	bl	8003478 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ea0:	f7fd faea 	bl	8003478 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e232      	b.n	8006318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005eb2:	4b34      	ldr	r3, [pc, #208]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0f0      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ebe:	4b31      	ldr	r3, [pc, #196]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	061b      	lsls	r3, r3, #24
 8005ecc:	492d      	ldr	r1, [pc, #180]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	604b      	str	r3, [r1, #4]
 8005ed2:	e01a      	b.n	8005f0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a2a      	ldr	r2, [pc, #168]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005eda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fd faca 	bl	8003478 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ee8:	f7fd fac6 	bl	8003478 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e20e      	b.n	8006318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005efa:	4b22      	ldr	r3, [pc, #136]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1f0      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x1e0>
 8005f06:	e000      	b.n	8005f0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0308 	and.w	r3, r3, #8
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d041      	beq.n	8005f9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d01c      	beq.n	8005f58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f1e:	4b19      	ldr	r3, [pc, #100]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f24:	4a17      	ldr	r2, [pc, #92]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005f26:	f043 0301 	orr.w	r3, r3, #1
 8005f2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f2e:	f7fd faa3 	bl	8003478 <HAL_GetTick>
 8005f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f34:	e008      	b.n	8005f48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f36:	f7fd fa9f 	bl	8003478 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e1e7      	b.n	8006318 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f48:	4b0e      	ldr	r3, [pc, #56]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0ef      	beq.n	8005f36 <HAL_RCC_OscConfig+0x22e>
 8005f56:	e020      	b.n	8005f9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f58:	4b0a      	ldr	r3, [pc, #40]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f5e:	4a09      	ldr	r2, [pc, #36]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005f60:	f023 0301 	bic.w	r3, r3, #1
 8005f64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f68:	f7fd fa86 	bl	8003478 <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f6e:	e00d      	b.n	8005f8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f70:	f7fd fa82 	bl	8003478 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d906      	bls.n	8005f8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e1ca      	b.n	8006318 <HAL_RCC_OscConfig+0x610>
 8005f82:	bf00      	nop
 8005f84:	40021000 	.word	0x40021000
 8005f88:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f8c:	4b8c      	ldr	r3, [pc, #560]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 8005f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1ea      	bne.n	8005f70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0304 	and.w	r3, r3, #4
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 80a6 	beq.w	80060f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005fac:	4b84      	ldr	r3, [pc, #528]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 8005fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <HAL_RCC_OscConfig+0x2b4>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e000      	b.n	8005fbe <HAL_RCC_OscConfig+0x2b6>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00d      	beq.n	8005fde <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fc2:	4b7f      	ldr	r3, [pc, #508]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 8005fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc6:	4a7e      	ldr	r2, [pc, #504]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 8005fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fce:	4b7c      	ldr	r3, [pc, #496]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 8005fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fde:	4b79      	ldr	r3, [pc, #484]	@ (80061c4 <HAL_RCC_OscConfig+0x4bc>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d118      	bne.n	800601c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fea:	4b76      	ldr	r3, [pc, #472]	@ (80061c4 <HAL_RCC_OscConfig+0x4bc>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a75      	ldr	r2, [pc, #468]	@ (80061c4 <HAL_RCC_OscConfig+0x4bc>)
 8005ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ff6:	f7fd fa3f 	bl	8003478 <HAL_GetTick>
 8005ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ffc:	e008      	b.n	8006010 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ffe:	f7fd fa3b 	bl	8003478 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e183      	b.n	8006318 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006010:	4b6c      	ldr	r3, [pc, #432]	@ (80061c4 <HAL_RCC_OscConfig+0x4bc>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0f0      	beq.n	8005ffe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d108      	bne.n	8006036 <HAL_RCC_OscConfig+0x32e>
 8006024:	4b66      	ldr	r3, [pc, #408]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 8006026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800602a:	4a65      	ldr	r2, [pc, #404]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 800602c:	f043 0301 	orr.w	r3, r3, #1
 8006030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006034:	e024      	b.n	8006080 <HAL_RCC_OscConfig+0x378>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	2b05      	cmp	r3, #5
 800603c:	d110      	bne.n	8006060 <HAL_RCC_OscConfig+0x358>
 800603e:	4b60      	ldr	r3, [pc, #384]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 8006040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006044:	4a5e      	ldr	r2, [pc, #376]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 8006046:	f043 0304 	orr.w	r3, r3, #4
 800604a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800604e:	4b5c      	ldr	r3, [pc, #368]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 8006050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006054:	4a5a      	ldr	r2, [pc, #360]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 8006056:	f043 0301 	orr.w	r3, r3, #1
 800605a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800605e:	e00f      	b.n	8006080 <HAL_RCC_OscConfig+0x378>
 8006060:	4b57      	ldr	r3, [pc, #348]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 8006062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006066:	4a56      	ldr	r2, [pc, #344]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 8006068:	f023 0301 	bic.w	r3, r3, #1
 800606c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006070:	4b53      	ldr	r3, [pc, #332]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 8006072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006076:	4a52      	ldr	r2, [pc, #328]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 8006078:	f023 0304 	bic.w	r3, r3, #4
 800607c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d016      	beq.n	80060b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006088:	f7fd f9f6 	bl	8003478 <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800608e:	e00a      	b.n	80060a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006090:	f7fd f9f2 	bl	8003478 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800609e:	4293      	cmp	r3, r2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e138      	b.n	8006318 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060a6:	4b46      	ldr	r3, [pc, #280]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 80060a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0ed      	beq.n	8006090 <HAL_RCC_OscConfig+0x388>
 80060b4:	e015      	b.n	80060e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b6:	f7fd f9df 	bl	8003478 <HAL_GetTick>
 80060ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060bc:	e00a      	b.n	80060d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060be:	f7fd f9db 	bl	8003478 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e121      	b.n	8006318 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060d4:	4b3a      	ldr	r3, [pc, #232]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 80060d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1ed      	bne.n	80060be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060e2:	7ffb      	ldrb	r3, [r7, #31]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d105      	bne.n	80060f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060e8:	4b35      	ldr	r3, [pc, #212]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 80060ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ec:	4a34      	ldr	r2, [pc, #208]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 80060ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0320 	and.w	r3, r3, #32
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d03c      	beq.n	800617a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d01c      	beq.n	8006142 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006108:	4b2d      	ldr	r3, [pc, #180]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 800610a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800610e:	4a2c      	ldr	r2, [pc, #176]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 8006110:	f043 0301 	orr.w	r3, r3, #1
 8006114:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006118:	f7fd f9ae 	bl	8003478 <HAL_GetTick>
 800611c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800611e:	e008      	b.n	8006132 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006120:	f7fd f9aa 	bl	8003478 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e0f2      	b.n	8006318 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006132:	4b23      	ldr	r3, [pc, #140]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 8006134:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0ef      	beq.n	8006120 <HAL_RCC_OscConfig+0x418>
 8006140:	e01b      	b.n	800617a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006142:	4b1f      	ldr	r3, [pc, #124]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 8006144:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006148:	4a1d      	ldr	r2, [pc, #116]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 800614a:	f023 0301 	bic.w	r3, r3, #1
 800614e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006152:	f7fd f991 	bl	8003478 <HAL_GetTick>
 8006156:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006158:	e008      	b.n	800616c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800615a:	f7fd f98d 	bl	8003478 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d901      	bls.n	800616c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e0d5      	b.n	8006318 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800616c:	4b14      	ldr	r3, [pc, #80]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 800616e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1ef      	bne.n	800615a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 80c9 	beq.w	8006316 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006184:	4b0e      	ldr	r3, [pc, #56]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 030c 	and.w	r3, r3, #12
 800618c:	2b0c      	cmp	r3, #12
 800618e:	f000 8083 	beq.w	8006298 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d15e      	bne.n	8006258 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800619a:	4b09      	ldr	r3, [pc, #36]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a08      	ldr	r2, [pc, #32]	@ (80061c0 <HAL_RCC_OscConfig+0x4b8>)
 80061a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a6:	f7fd f967 	bl	8003478 <HAL_GetTick>
 80061aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061ac:	e00c      	b.n	80061c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ae:	f7fd f963 	bl	8003478 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d905      	bls.n	80061c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e0ab      	b.n	8006318 <HAL_RCC_OscConfig+0x610>
 80061c0:	40021000 	.word	0x40021000
 80061c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061c8:	4b55      	ldr	r3, [pc, #340]	@ (8006320 <HAL_RCC_OscConfig+0x618>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1ec      	bne.n	80061ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061d4:	4b52      	ldr	r3, [pc, #328]	@ (8006320 <HAL_RCC_OscConfig+0x618>)
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	4b52      	ldr	r3, [pc, #328]	@ (8006324 <HAL_RCC_OscConfig+0x61c>)
 80061da:	4013      	ands	r3, r2
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6a11      	ldr	r1, [r2, #32]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061e4:	3a01      	subs	r2, #1
 80061e6:	0112      	lsls	r2, r2, #4
 80061e8:	4311      	orrs	r1, r2
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80061ee:	0212      	lsls	r2, r2, #8
 80061f0:	4311      	orrs	r1, r2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80061f6:	0852      	lsrs	r2, r2, #1
 80061f8:	3a01      	subs	r2, #1
 80061fa:	0552      	lsls	r2, r2, #21
 80061fc:	4311      	orrs	r1, r2
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006202:	0852      	lsrs	r2, r2, #1
 8006204:	3a01      	subs	r2, #1
 8006206:	0652      	lsls	r2, r2, #25
 8006208:	4311      	orrs	r1, r2
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800620e:	06d2      	lsls	r2, r2, #27
 8006210:	430a      	orrs	r2, r1
 8006212:	4943      	ldr	r1, [pc, #268]	@ (8006320 <HAL_RCC_OscConfig+0x618>)
 8006214:	4313      	orrs	r3, r2
 8006216:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006218:	4b41      	ldr	r3, [pc, #260]	@ (8006320 <HAL_RCC_OscConfig+0x618>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a40      	ldr	r2, [pc, #256]	@ (8006320 <HAL_RCC_OscConfig+0x618>)
 800621e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006222:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006224:	4b3e      	ldr	r3, [pc, #248]	@ (8006320 <HAL_RCC_OscConfig+0x618>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	4a3d      	ldr	r2, [pc, #244]	@ (8006320 <HAL_RCC_OscConfig+0x618>)
 800622a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800622e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006230:	f7fd f922 	bl	8003478 <HAL_GetTick>
 8006234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006238:	f7fd f91e 	bl	8003478 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e066      	b.n	8006318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800624a:	4b35      	ldr	r3, [pc, #212]	@ (8006320 <HAL_RCC_OscConfig+0x618>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0f0      	beq.n	8006238 <HAL_RCC_OscConfig+0x530>
 8006256:	e05e      	b.n	8006316 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006258:	4b31      	ldr	r3, [pc, #196]	@ (8006320 <HAL_RCC_OscConfig+0x618>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a30      	ldr	r2, [pc, #192]	@ (8006320 <HAL_RCC_OscConfig+0x618>)
 800625e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006264:	f7fd f908 	bl	8003478 <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800626c:	f7fd f904 	bl	8003478 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e04c      	b.n	8006318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800627e:	4b28      	ldr	r3, [pc, #160]	@ (8006320 <HAL_RCC_OscConfig+0x618>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1f0      	bne.n	800626c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800628a:	4b25      	ldr	r3, [pc, #148]	@ (8006320 <HAL_RCC_OscConfig+0x618>)
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	4924      	ldr	r1, [pc, #144]	@ (8006320 <HAL_RCC_OscConfig+0x618>)
 8006290:	4b25      	ldr	r3, [pc, #148]	@ (8006328 <HAL_RCC_OscConfig+0x620>)
 8006292:	4013      	ands	r3, r2
 8006294:	60cb      	str	r3, [r1, #12]
 8006296:	e03e      	b.n	8006316 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d101      	bne.n	80062a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e039      	b.n	8006318 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80062a4:	4b1e      	ldr	r3, [pc, #120]	@ (8006320 <HAL_RCC_OscConfig+0x618>)
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f003 0203 	and.w	r2, r3, #3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d12c      	bne.n	8006312 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c2:	3b01      	subs	r3, #1
 80062c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d123      	bne.n	8006312 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d11b      	bne.n	8006312 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d113      	bne.n	8006312 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f4:	085b      	lsrs	r3, r3, #1
 80062f6:	3b01      	subs	r3, #1
 80062f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d109      	bne.n	8006312 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006308:	085b      	lsrs	r3, r3, #1
 800630a:	3b01      	subs	r3, #1
 800630c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800630e:	429a      	cmp	r2, r3
 8006310:	d001      	beq.n	8006316 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e000      	b.n	8006318 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3720      	adds	r7, #32
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40021000 	.word	0x40021000
 8006324:	019f800c 	.word	0x019f800c
 8006328:	feeefffc 	.word	0xfeeefffc

0800632c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006336:	2300      	movs	r3, #0
 8006338:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e11e      	b.n	8006582 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006344:	4b91      	ldr	r3, [pc, #580]	@ (800658c <HAL_RCC_ClockConfig+0x260>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 030f 	and.w	r3, r3, #15
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	429a      	cmp	r2, r3
 8006350:	d910      	bls.n	8006374 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006352:	4b8e      	ldr	r3, [pc, #568]	@ (800658c <HAL_RCC_ClockConfig+0x260>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f023 020f 	bic.w	r2, r3, #15
 800635a:	498c      	ldr	r1, [pc, #560]	@ (800658c <HAL_RCC_ClockConfig+0x260>)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	4313      	orrs	r3, r2
 8006360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006362:	4b8a      	ldr	r3, [pc, #552]	@ (800658c <HAL_RCC_ClockConfig+0x260>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 030f 	and.w	r3, r3, #15
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	429a      	cmp	r2, r3
 800636e:	d001      	beq.n	8006374 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e106      	b.n	8006582 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	2b00      	cmp	r3, #0
 800637e:	d073      	beq.n	8006468 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2b03      	cmp	r3, #3
 8006386:	d129      	bne.n	80063dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006388:	4b81      	ldr	r3, [pc, #516]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e0f4      	b.n	8006582 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006398:	f000 f99e 	bl	80066d8 <RCC_GetSysClockFreqFromPLLSource>
 800639c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	4a7c      	ldr	r2, [pc, #496]	@ (8006594 <HAL_RCC_ClockConfig+0x268>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d93f      	bls.n	8006426 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80063a6:	4b7a      	ldr	r3, [pc, #488]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d009      	beq.n	80063c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d033      	beq.n	8006426 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d12f      	bne.n	8006426 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80063c6:	4b72      	ldr	r3, [pc, #456]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063ce:	4a70      	ldr	r2, [pc, #448]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 80063d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80063d6:	2380      	movs	r3, #128	@ 0x80
 80063d8:	617b      	str	r3, [r7, #20]
 80063da:	e024      	b.n	8006426 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d107      	bne.n	80063f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063e4:	4b6a      	ldr	r3, [pc, #424]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d109      	bne.n	8006404 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e0c6      	b.n	8006582 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063f4:	4b66      	ldr	r3, [pc, #408]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e0be      	b.n	8006582 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006404:	f000 f8ce 	bl	80065a4 <HAL_RCC_GetSysClockFreq>
 8006408:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	4a61      	ldr	r2, [pc, #388]	@ (8006594 <HAL_RCC_ClockConfig+0x268>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d909      	bls.n	8006426 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006412:	4b5f      	ldr	r3, [pc, #380]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800641a:	4a5d      	ldr	r2, [pc, #372]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 800641c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006420:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006422:	2380      	movs	r3, #128	@ 0x80
 8006424:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006426:	4b5a      	ldr	r3, [pc, #360]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f023 0203 	bic.w	r2, r3, #3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	4957      	ldr	r1, [pc, #348]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 8006434:	4313      	orrs	r3, r2
 8006436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006438:	f7fd f81e 	bl	8003478 <HAL_GetTick>
 800643c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800643e:	e00a      	b.n	8006456 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006440:	f7fd f81a 	bl	8003478 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800644e:	4293      	cmp	r3, r2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e095      	b.n	8006582 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006456:	4b4e      	ldr	r3, [pc, #312]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 020c 	and.w	r2, r3, #12
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	429a      	cmp	r2, r3
 8006466:	d1eb      	bne.n	8006440 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d023      	beq.n	80064bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0304 	and.w	r3, r3, #4
 800647c:	2b00      	cmp	r3, #0
 800647e:	d005      	beq.n	800648c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006480:	4b43      	ldr	r3, [pc, #268]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	4a42      	ldr	r2, [pc, #264]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 8006486:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800648a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0308 	and.w	r3, r3, #8
 8006494:	2b00      	cmp	r3, #0
 8006496:	d007      	beq.n	80064a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006498:	4b3d      	ldr	r3, [pc, #244]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80064a0:	4a3b      	ldr	r2, [pc, #236]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 80064a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80064a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064a8:	4b39      	ldr	r3, [pc, #228]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	4936      	ldr	r1, [pc, #216]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	608b      	str	r3, [r1, #8]
 80064ba:	e008      	b.n	80064ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	2b80      	cmp	r3, #128	@ 0x80
 80064c0:	d105      	bne.n	80064ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80064c2:	4b33      	ldr	r3, [pc, #204]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	4a32      	ldr	r2, [pc, #200]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 80064c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064ce:	4b2f      	ldr	r3, [pc, #188]	@ (800658c <HAL_RCC_ClockConfig+0x260>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 030f 	and.w	r3, r3, #15
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d21d      	bcs.n	8006518 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064dc:	4b2b      	ldr	r3, [pc, #172]	@ (800658c <HAL_RCC_ClockConfig+0x260>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f023 020f 	bic.w	r2, r3, #15
 80064e4:	4929      	ldr	r1, [pc, #164]	@ (800658c <HAL_RCC_ClockConfig+0x260>)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80064ec:	f7fc ffc4 	bl	8003478 <HAL_GetTick>
 80064f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064f2:	e00a      	b.n	800650a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064f4:	f7fc ffc0 	bl	8003478 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006502:	4293      	cmp	r3, r2
 8006504:	d901      	bls.n	800650a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e03b      	b.n	8006582 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800650a:	4b20      	ldr	r3, [pc, #128]	@ (800658c <HAL_RCC_ClockConfig+0x260>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	429a      	cmp	r2, r3
 8006516:	d1ed      	bne.n	80064f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	d008      	beq.n	8006536 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006524:	4b1a      	ldr	r3, [pc, #104]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	4917      	ldr	r1, [pc, #92]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 8006532:	4313      	orrs	r3, r2
 8006534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0308 	and.w	r3, r3, #8
 800653e:	2b00      	cmp	r3, #0
 8006540:	d009      	beq.n	8006556 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006542:	4b13      	ldr	r3, [pc, #76]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	490f      	ldr	r1, [pc, #60]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 8006552:	4313      	orrs	r3, r2
 8006554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006556:	f000 f825 	bl	80065a4 <HAL_RCC_GetSysClockFreq>
 800655a:	4602      	mov	r2, r0
 800655c:	4b0c      	ldr	r3, [pc, #48]	@ (8006590 <HAL_RCC_ClockConfig+0x264>)
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	091b      	lsrs	r3, r3, #4
 8006562:	f003 030f 	and.w	r3, r3, #15
 8006566:	490c      	ldr	r1, [pc, #48]	@ (8006598 <HAL_RCC_ClockConfig+0x26c>)
 8006568:	5ccb      	ldrb	r3, [r1, r3]
 800656a:	f003 031f 	and.w	r3, r3, #31
 800656e:	fa22 f303 	lsr.w	r3, r2, r3
 8006572:	4a0a      	ldr	r2, [pc, #40]	@ (800659c <HAL_RCC_ClockConfig+0x270>)
 8006574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006576:	4b0a      	ldr	r3, [pc, #40]	@ (80065a0 <HAL_RCC_ClockConfig+0x274>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4618      	mov	r0, r3
 800657c:	f7fc ff30 	bl	80033e0 <HAL_InitTick>
 8006580:	4603      	mov	r3, r0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3718      	adds	r7, #24
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	40022000 	.word	0x40022000
 8006590:	40021000 	.word	0x40021000
 8006594:	04c4b400 	.word	0x04c4b400
 8006598:	0800a910 	.word	0x0800a910
 800659c:	20000010 	.word	0x20000010
 80065a0:	20000014 	.word	0x20000014

080065a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80065aa:	4b2c      	ldr	r3, [pc, #176]	@ (800665c <HAL_RCC_GetSysClockFreq+0xb8>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f003 030c 	and.w	r3, r3, #12
 80065b2:	2b04      	cmp	r3, #4
 80065b4:	d102      	bne.n	80065bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80065b6:	4b2a      	ldr	r3, [pc, #168]	@ (8006660 <HAL_RCC_GetSysClockFreq+0xbc>)
 80065b8:	613b      	str	r3, [r7, #16]
 80065ba:	e047      	b.n	800664c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80065bc:	4b27      	ldr	r3, [pc, #156]	@ (800665c <HAL_RCC_GetSysClockFreq+0xb8>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f003 030c 	and.w	r3, r3, #12
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d102      	bne.n	80065ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80065c8:	4b26      	ldr	r3, [pc, #152]	@ (8006664 <HAL_RCC_GetSysClockFreq+0xc0>)
 80065ca:	613b      	str	r3, [r7, #16]
 80065cc:	e03e      	b.n	800664c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80065ce:	4b23      	ldr	r3, [pc, #140]	@ (800665c <HAL_RCC_GetSysClockFreq+0xb8>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 030c 	and.w	r3, r3, #12
 80065d6:	2b0c      	cmp	r3, #12
 80065d8:	d136      	bne.n	8006648 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065da:	4b20      	ldr	r3, [pc, #128]	@ (800665c <HAL_RCC_GetSysClockFreq+0xb8>)
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065e4:	4b1d      	ldr	r3, [pc, #116]	@ (800665c <HAL_RCC_GetSysClockFreq+0xb8>)
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	091b      	lsrs	r3, r3, #4
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	3301      	adds	r3, #1
 80065f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b03      	cmp	r3, #3
 80065f6:	d10c      	bne.n	8006612 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065f8:	4a1a      	ldr	r2, [pc, #104]	@ (8006664 <HAL_RCC_GetSysClockFreq+0xc0>)
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006600:	4a16      	ldr	r2, [pc, #88]	@ (800665c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006602:	68d2      	ldr	r2, [r2, #12]
 8006604:	0a12      	lsrs	r2, r2, #8
 8006606:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800660a:	fb02 f303 	mul.w	r3, r2, r3
 800660e:	617b      	str	r3, [r7, #20]
      break;
 8006610:	e00c      	b.n	800662c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006612:	4a13      	ldr	r2, [pc, #76]	@ (8006660 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	fbb2 f3f3 	udiv	r3, r2, r3
 800661a:	4a10      	ldr	r2, [pc, #64]	@ (800665c <HAL_RCC_GetSysClockFreq+0xb8>)
 800661c:	68d2      	ldr	r2, [r2, #12]
 800661e:	0a12      	lsrs	r2, r2, #8
 8006620:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006624:	fb02 f303 	mul.w	r3, r2, r3
 8006628:	617b      	str	r3, [r7, #20]
      break;
 800662a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800662c:	4b0b      	ldr	r3, [pc, #44]	@ (800665c <HAL_RCC_GetSysClockFreq+0xb8>)
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	0e5b      	lsrs	r3, r3, #25
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	3301      	adds	r3, #1
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	fbb2 f3f3 	udiv	r3, r2, r3
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	e001      	b.n	800664c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800664c:	693b      	ldr	r3, [r7, #16]
}
 800664e:	4618      	mov	r0, r3
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	40021000 	.word	0x40021000
 8006660:	00f42400 	.word	0x00f42400
 8006664:	007a1200 	.word	0x007a1200

08006668 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800666c:	4b03      	ldr	r3, [pc, #12]	@ (800667c <HAL_RCC_GetHCLKFreq+0x14>)
 800666e:	681b      	ldr	r3, [r3, #0]
}
 8006670:	4618      	mov	r0, r3
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	20000010 	.word	0x20000010

08006680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006684:	f7ff fff0 	bl	8006668 <HAL_RCC_GetHCLKFreq>
 8006688:	4602      	mov	r2, r0
 800668a:	4b06      	ldr	r3, [pc, #24]	@ (80066a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	0a1b      	lsrs	r3, r3, #8
 8006690:	f003 0307 	and.w	r3, r3, #7
 8006694:	4904      	ldr	r1, [pc, #16]	@ (80066a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006696:	5ccb      	ldrb	r3, [r1, r3]
 8006698:	f003 031f 	and.w	r3, r3, #31
 800669c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	40021000 	.word	0x40021000
 80066a8:	0800a920 	.word	0x0800a920

080066ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80066b0:	f7ff ffda 	bl	8006668 <HAL_RCC_GetHCLKFreq>
 80066b4:	4602      	mov	r2, r0
 80066b6:	4b06      	ldr	r3, [pc, #24]	@ (80066d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	0adb      	lsrs	r3, r3, #11
 80066bc:	f003 0307 	and.w	r3, r3, #7
 80066c0:	4904      	ldr	r1, [pc, #16]	@ (80066d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80066c2:	5ccb      	ldrb	r3, [r1, r3]
 80066c4:	f003 031f 	and.w	r3, r3, #31
 80066c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40021000 	.word	0x40021000
 80066d4:	0800a920 	.word	0x0800a920

080066d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066de:	4b1e      	ldr	r3, [pc, #120]	@ (8006758 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f003 0303 	and.w	r3, r3, #3
 80066e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006758 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	091b      	lsrs	r3, r3, #4
 80066ee:	f003 030f 	and.w	r3, r3, #15
 80066f2:	3301      	adds	r3, #1
 80066f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d10c      	bne.n	8006716 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066fc:	4a17      	ldr	r2, [pc, #92]	@ (800675c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	fbb2 f3f3 	udiv	r3, r2, r3
 8006704:	4a14      	ldr	r2, [pc, #80]	@ (8006758 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006706:	68d2      	ldr	r2, [r2, #12]
 8006708:	0a12      	lsrs	r2, r2, #8
 800670a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800670e:	fb02 f303 	mul.w	r3, r2, r3
 8006712:	617b      	str	r3, [r7, #20]
    break;
 8006714:	e00c      	b.n	8006730 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006716:	4a12      	ldr	r2, [pc, #72]	@ (8006760 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	fbb2 f3f3 	udiv	r3, r2, r3
 800671e:	4a0e      	ldr	r2, [pc, #56]	@ (8006758 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006720:	68d2      	ldr	r2, [r2, #12]
 8006722:	0a12      	lsrs	r2, r2, #8
 8006724:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006728:	fb02 f303 	mul.w	r3, r2, r3
 800672c:	617b      	str	r3, [r7, #20]
    break;
 800672e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006730:	4b09      	ldr	r3, [pc, #36]	@ (8006758 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	0e5b      	lsrs	r3, r3, #25
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	3301      	adds	r3, #1
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	fbb2 f3f3 	udiv	r3, r2, r3
 8006748:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800674a:	687b      	ldr	r3, [r7, #4]
}
 800674c:	4618      	mov	r0, r3
 800674e:	371c      	adds	r7, #28
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	40021000 	.word	0x40021000
 800675c:	007a1200 	.word	0x007a1200
 8006760:	00f42400 	.word	0x00f42400

08006764 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800676c:	2300      	movs	r3, #0
 800676e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006770:	2300      	movs	r3, #0
 8006772:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 8098 	beq.w	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006782:	2300      	movs	r3, #0
 8006784:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006786:	4b43      	ldr	r3, [pc, #268]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800678a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10d      	bne.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006792:	4b40      	ldr	r3, [pc, #256]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006796:	4a3f      	ldr	r2, [pc, #252]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800679c:	6593      	str	r3, [r2, #88]	@ 0x58
 800679e:	4b3d      	ldr	r3, [pc, #244]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067a6:	60bb      	str	r3, [r7, #8]
 80067a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067aa:	2301      	movs	r3, #1
 80067ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067ae:	4b3a      	ldr	r3, [pc, #232]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a39      	ldr	r2, [pc, #228]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067ba:	f7fc fe5d 	bl	8003478 <HAL_GetTick>
 80067be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067c0:	e009      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c2:	f7fc fe59 	bl	8003478 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d902      	bls.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	74fb      	strb	r3, [r7, #19]
        break;
 80067d4:	e005      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067d6:	4b30      	ldr	r3, [pc, #192]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d0ef      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80067e2:	7cfb      	ldrb	r3, [r7, #19]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d159      	bne.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80067e8:	4b2a      	ldr	r3, [pc, #168]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d01e      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	429a      	cmp	r2, r3
 8006802:	d019      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006804:	4b23      	ldr	r3, [pc, #140]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800680a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800680e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006810:	4b20      	ldr	r3, [pc, #128]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006816:	4a1f      	ldr	r2, [pc, #124]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800681c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006820:	4b1c      	ldr	r3, [pc, #112]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006826:	4a1b      	ldr	r2, [pc, #108]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800682c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006830:	4a18      	ldr	r2, [pc, #96]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b00      	cmp	r3, #0
 8006840:	d016      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006842:	f7fc fe19 	bl	8003478 <HAL_GetTick>
 8006846:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006848:	e00b      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800684a:	f7fc fe15 	bl	8003478 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006858:	4293      	cmp	r3, r2
 800685a:	d902      	bls.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	74fb      	strb	r3, [r7, #19]
            break;
 8006860:	e006      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006862:	4b0c      	ldr	r3, [pc, #48]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0ec      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006870:	7cfb      	ldrb	r3, [r7, #19]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10b      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006876:	4b07      	ldr	r3, [pc, #28]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800687c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006884:	4903      	ldr	r1, [pc, #12]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006886:	4313      	orrs	r3, r2
 8006888:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800688c:	e008      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800688e:	7cfb      	ldrb	r3, [r7, #19]
 8006890:	74bb      	strb	r3, [r7, #18]
 8006892:	e005      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006894:	40021000 	.word	0x40021000
 8006898:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800689c:	7cfb      	ldrb	r3, [r7, #19]
 800689e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068a0:	7c7b      	ldrb	r3, [r7, #17]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d105      	bne.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068a6:	4ba6      	ldr	r3, [pc, #664]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068aa:	4aa5      	ldr	r2, [pc, #660]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068be:	4ba0      	ldr	r3, [pc, #640]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068c4:	f023 0203 	bic.w	r2, r3, #3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	499c      	ldr	r1, [pc, #624]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00a      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068e0:	4b97      	ldr	r3, [pc, #604]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068e6:	f023 020c 	bic.w	r2, r3, #12
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	4994      	ldr	r1, [pc, #592]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006902:	4b8f      	ldr	r3, [pc, #572]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006908:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	498b      	ldr	r1, [pc, #556]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006912:	4313      	orrs	r3, r2
 8006914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0308 	and.w	r3, r3, #8
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00a      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006924:	4b86      	ldr	r3, [pc, #536]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800692a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	4983      	ldr	r1, [pc, #524]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006934:	4313      	orrs	r3, r2
 8006936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0320 	and.w	r3, r3, #32
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006946:	4b7e      	ldr	r3, [pc, #504]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800694c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	497a      	ldr	r1, [pc, #488]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006956:	4313      	orrs	r3, r2
 8006958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00a      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006968:	4b75      	ldr	r3, [pc, #468]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800696a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800696e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	4972      	ldr	r1, [pc, #456]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006978:	4313      	orrs	r3, r2
 800697a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800698a:	4b6d      	ldr	r3, [pc, #436]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800698c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006990:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	4969      	ldr	r1, [pc, #420]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800699a:	4313      	orrs	r3, r2
 800699c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069ac:	4b64      	ldr	r3, [pc, #400]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	4961      	ldr	r1, [pc, #388]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069ce:	4b5c      	ldr	r3, [pc, #368]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069dc:	4958      	ldr	r1, [pc, #352]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d015      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069f0:	4b53      	ldr	r3, [pc, #332]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fe:	4950      	ldr	r1, [pc, #320]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a0e:	d105      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a10:	4b4b      	ldr	r3, [pc, #300]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	4a4a      	ldr	r2, [pc, #296]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a1a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d015      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a28:	4b45      	ldr	r3, [pc, #276]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a36:	4942      	ldr	r1, [pc, #264]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a46:	d105      	bne.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a48:	4b3d      	ldr	r3, [pc, #244]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	4a3c      	ldr	r2, [pc, #240]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a52:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d015      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a60:	4b37      	ldr	r3, [pc, #220]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a66:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a6e:	4934      	ldr	r1, [pc, #208]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a7e:	d105      	bne.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a80:	4b2f      	ldr	r3, [pc, #188]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	4a2e      	ldr	r2, [pc, #184]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d015      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a98:	4b29      	ldr	r3, [pc, #164]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aa6:	4926      	ldr	r1, [pc, #152]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ab6:	d105      	bne.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ab8:	4b21      	ldr	r3, [pc, #132]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	4a20      	ldr	r2, [pc, #128]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006abe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ac2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d015      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ade:	4918      	ldr	r1, [pc, #96]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006aee:	d105      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006af0:	4b13      	ldr	r3, [pc, #76]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	4a12      	ldr	r2, [pc, #72]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006af6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006afa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d015      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006b08:	4b0d      	ldr	r3, [pc, #52]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b0e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b16:	490a      	ldr	r1, [pc, #40]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b26:	d105      	bne.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b28:	4b05      	ldr	r3, [pc, #20]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	4a04      	ldr	r2, [pc, #16]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006b34:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3718      	adds	r7, #24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	40021000 	.word	0x40021000

08006b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e049      	b.n	8006bea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7fb fec8 	bl	8002900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f001 fd0e 	bl	80085a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
	...

08006bf4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d001      	beq.n	8006c0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e042      	b.n	8006c92 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a21      	ldr	r2, [pc, #132]	@ (8006ca0 <HAL_TIM_Base_Start+0xac>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d018      	beq.n	8006c50 <HAL_TIM_Base_Start+0x5c>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c26:	d013      	beq.n	8006c50 <HAL_TIM_Base_Start+0x5c>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ca4 <HAL_TIM_Base_Start+0xb0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00e      	beq.n	8006c50 <HAL_TIM_Base_Start+0x5c>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a1c      	ldr	r2, [pc, #112]	@ (8006ca8 <HAL_TIM_Base_Start+0xb4>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d009      	beq.n	8006c50 <HAL_TIM_Base_Start+0x5c>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a1a      	ldr	r2, [pc, #104]	@ (8006cac <HAL_TIM_Base_Start+0xb8>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d004      	beq.n	8006c50 <HAL_TIM_Base_Start+0x5c>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a19      	ldr	r2, [pc, #100]	@ (8006cb0 <HAL_TIM_Base_Start+0xbc>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d115      	bne.n	8006c7c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689a      	ldr	r2, [r3, #8]
 8006c56:	4b17      	ldr	r3, [pc, #92]	@ (8006cb4 <HAL_TIM_Base_Start+0xc0>)
 8006c58:	4013      	ands	r3, r2
 8006c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b06      	cmp	r3, #6
 8006c60:	d015      	beq.n	8006c8e <HAL_TIM_Base_Start+0x9a>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c68:	d011      	beq.n	8006c8e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f042 0201 	orr.w	r2, r2, #1
 8006c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c7a:	e008      	b.n	8006c8e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f042 0201 	orr.w	r2, r2, #1
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	e000      	b.n	8006c90 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	40012c00 	.word	0x40012c00
 8006ca4:	40000400 	.word	0x40000400
 8006ca8:	40000800 	.word	0x40000800
 8006cac:	40013400 	.word	0x40013400
 8006cb0:	40014000 	.word	0x40014000
 8006cb4:	00010007 	.word	0x00010007

08006cb8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e049      	b.n	8006d5e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f841 	bl	8006d66 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	f001 fc54 	bl	80085a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006d6e:	bf00      	nop
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
	...

08006d7c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d109      	bne.n	8006da4 <HAL_TIM_OC_Start_IT+0x28>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	bf14      	ite	ne
 8006d9c:	2301      	movne	r3, #1
 8006d9e:	2300      	moveq	r3, #0
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	e03c      	b.n	8006e1e <HAL_TIM_OC_Start_IT+0xa2>
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d109      	bne.n	8006dbe <HAL_TIM_OC_Start_IT+0x42>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	bf14      	ite	ne
 8006db6:	2301      	movne	r3, #1
 8006db8:	2300      	moveq	r3, #0
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	e02f      	b.n	8006e1e <HAL_TIM_OC_Start_IT+0xa2>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	2b08      	cmp	r3, #8
 8006dc2:	d109      	bne.n	8006dd8 <HAL_TIM_OC_Start_IT+0x5c>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	bf14      	ite	ne
 8006dd0:	2301      	movne	r3, #1
 8006dd2:	2300      	moveq	r3, #0
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	e022      	b.n	8006e1e <HAL_TIM_OC_Start_IT+0xa2>
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2b0c      	cmp	r3, #12
 8006ddc:	d109      	bne.n	8006df2 <HAL_TIM_OC_Start_IT+0x76>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	bf14      	ite	ne
 8006dea:	2301      	movne	r3, #1
 8006dec:	2300      	moveq	r3, #0
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	e015      	b.n	8006e1e <HAL_TIM_OC_Start_IT+0xa2>
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b10      	cmp	r3, #16
 8006df6:	d109      	bne.n	8006e0c <HAL_TIM_OC_Start_IT+0x90>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	bf14      	ite	ne
 8006e04:	2301      	movne	r3, #1
 8006e06:	2300      	moveq	r3, #0
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	e008      	b.n	8006e1e <HAL_TIM_OC_Start_IT+0xa2>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	bf14      	ite	ne
 8006e18:	2301      	movne	r3, #1
 8006e1a:	2300      	moveq	r3, #0
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e0e2      	b.n	8006fec <HAL_TIM_OC_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d104      	bne.n	8006e36 <HAL_TIM_OC_Start_IT+0xba>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e34:	e023      	b.n	8006e7e <HAL_TIM_OC_Start_IT+0x102>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	d104      	bne.n	8006e46 <HAL_TIM_OC_Start_IT+0xca>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e44:	e01b      	b.n	8006e7e <HAL_TIM_OC_Start_IT+0x102>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d104      	bne.n	8006e56 <HAL_TIM_OC_Start_IT+0xda>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e54:	e013      	b.n	8006e7e <HAL_TIM_OC_Start_IT+0x102>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b0c      	cmp	r3, #12
 8006e5a:	d104      	bne.n	8006e66 <HAL_TIM_OC_Start_IT+0xea>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e64:	e00b      	b.n	8006e7e <HAL_TIM_OC_Start_IT+0x102>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b10      	cmp	r3, #16
 8006e6a:	d104      	bne.n	8006e76 <HAL_TIM_OC_Start_IT+0xfa>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e74:	e003      	b.n	8006e7e <HAL_TIM_OC_Start_IT+0x102>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b0c      	cmp	r3, #12
 8006e82:	d841      	bhi.n	8006f08 <HAL_TIM_OC_Start_IT+0x18c>
 8006e84:	a201      	add	r2, pc, #4	@ (adr r2, 8006e8c <HAL_TIM_OC_Start_IT+0x110>)
 8006e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8a:	bf00      	nop
 8006e8c:	08006ec1 	.word	0x08006ec1
 8006e90:	08006f09 	.word	0x08006f09
 8006e94:	08006f09 	.word	0x08006f09
 8006e98:	08006f09 	.word	0x08006f09
 8006e9c:	08006ed3 	.word	0x08006ed3
 8006ea0:	08006f09 	.word	0x08006f09
 8006ea4:	08006f09 	.word	0x08006f09
 8006ea8:	08006f09 	.word	0x08006f09
 8006eac:	08006ee5 	.word	0x08006ee5
 8006eb0:	08006f09 	.word	0x08006f09
 8006eb4:	08006f09 	.word	0x08006f09
 8006eb8:	08006f09 	.word	0x08006f09
 8006ebc:	08006ef7 	.word	0x08006ef7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0202 	orr.w	r2, r2, #2
 8006ece:	60da      	str	r2, [r3, #12]
      break;
 8006ed0:	e01d      	b.n	8006f0e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68da      	ldr	r2, [r3, #12]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f042 0204 	orr.w	r2, r2, #4
 8006ee0:	60da      	str	r2, [r3, #12]
      break;
 8006ee2:	e014      	b.n	8006f0e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0208 	orr.w	r2, r2, #8
 8006ef2:	60da      	str	r2, [r3, #12]
      break;
 8006ef4:	e00b      	b.n	8006f0e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68da      	ldr	r2, [r3, #12]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f042 0210 	orr.w	r2, r2, #16
 8006f04:	60da      	str	r2, [r3, #12]
      break;
 8006f06:	e002      	b.n	8006f0e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f0c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d16a      	bne.n	8006fea <HAL_TIM_OC_Start_IT+0x26e>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f002 f88d 	bl	800903c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a33      	ldr	r2, [pc, #204]	@ (8006ff4 <HAL_TIM_OC_Start_IT+0x278>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d013      	beq.n	8006f54 <HAL_TIM_OC_Start_IT+0x1d8>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a31      	ldr	r2, [pc, #196]	@ (8006ff8 <HAL_TIM_OC_Start_IT+0x27c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d00e      	beq.n	8006f54 <HAL_TIM_OC_Start_IT+0x1d8>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a30      	ldr	r2, [pc, #192]	@ (8006ffc <HAL_TIM_OC_Start_IT+0x280>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d009      	beq.n	8006f54 <HAL_TIM_OC_Start_IT+0x1d8>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a2e      	ldr	r2, [pc, #184]	@ (8007000 <HAL_TIM_OC_Start_IT+0x284>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d004      	beq.n	8006f54 <HAL_TIM_OC_Start_IT+0x1d8>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8007004 <HAL_TIM_OC_Start_IT+0x288>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d101      	bne.n	8006f58 <HAL_TIM_OC_Start_IT+0x1dc>
 8006f54:	2301      	movs	r3, #1
 8006f56:	e000      	b.n	8006f5a <HAL_TIM_OC_Start_IT+0x1de>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d007      	beq.n	8006f6e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a20      	ldr	r2, [pc, #128]	@ (8006ff4 <HAL_TIM_OC_Start_IT+0x278>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d018      	beq.n	8006faa <HAL_TIM_OC_Start_IT+0x22e>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f80:	d013      	beq.n	8006faa <HAL_TIM_OC_Start_IT+0x22e>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a20      	ldr	r2, [pc, #128]	@ (8007008 <HAL_TIM_OC_Start_IT+0x28c>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d00e      	beq.n	8006faa <HAL_TIM_OC_Start_IT+0x22e>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a1e      	ldr	r2, [pc, #120]	@ (800700c <HAL_TIM_OC_Start_IT+0x290>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d009      	beq.n	8006faa <HAL_TIM_OC_Start_IT+0x22e>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a17      	ldr	r2, [pc, #92]	@ (8006ff8 <HAL_TIM_OC_Start_IT+0x27c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d004      	beq.n	8006faa <HAL_TIM_OC_Start_IT+0x22e>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a15      	ldr	r2, [pc, #84]	@ (8006ffc <HAL_TIM_OC_Start_IT+0x280>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d115      	bne.n	8006fd6 <HAL_TIM_OC_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	4b17      	ldr	r3, [pc, #92]	@ (8007010 <HAL_TIM_OC_Start_IT+0x294>)
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2b06      	cmp	r3, #6
 8006fba:	d015      	beq.n	8006fe8 <HAL_TIM_OC_Start_IT+0x26c>
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fc2:	d011      	beq.n	8006fe8 <HAL_TIM_OC_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f042 0201 	orr.w	r2, r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd4:	e008      	b.n	8006fe8 <HAL_TIM_OC_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f042 0201 	orr.w	r2, r2, #1
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	e000      	b.n	8006fea <HAL_TIM_OC_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	40012c00 	.word	0x40012c00
 8006ff8:	40013400 	.word	0x40013400
 8006ffc:	40014000 	.word	0x40014000
 8007000:	40014400 	.word	0x40014400
 8007004:	40014800 	.word	0x40014800
 8007008:	40000400 	.word	0x40000400
 800700c:	40000800 	.word	0x40000800
 8007010:	00010007 	.word	0x00010007

08007014 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e049      	b.n	80070ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d106      	bne.n	8007040 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f841 	bl	80070c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2202      	movs	r2, #2
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	3304      	adds	r3, #4
 8007050:	4619      	mov	r1, r3
 8007052:	4610      	mov	r0, r2
 8007054:	f001 faa6 	bl	80085a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b083      	sub	sp, #12
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80070ca:	bf00      	nop
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
	...

080070d8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
 80070e4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80070e6:	2300      	movs	r3, #0
 80070e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d109      	bne.n	8007104 <HAL_TIM_PWM_Start_DMA+0x2c>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	bf0c      	ite	eq
 80070fc:	2301      	moveq	r3, #1
 80070fe:	2300      	movne	r3, #0
 8007100:	b2db      	uxtb	r3, r3
 8007102:	e03c      	b.n	800717e <HAL_TIM_PWM_Start_DMA+0xa6>
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2b04      	cmp	r3, #4
 8007108:	d109      	bne.n	800711e <HAL_TIM_PWM_Start_DMA+0x46>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	bf0c      	ite	eq
 8007116:	2301      	moveq	r3, #1
 8007118:	2300      	movne	r3, #0
 800711a:	b2db      	uxtb	r3, r3
 800711c:	e02f      	b.n	800717e <HAL_TIM_PWM_Start_DMA+0xa6>
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2b08      	cmp	r3, #8
 8007122:	d109      	bne.n	8007138 <HAL_TIM_PWM_Start_DMA+0x60>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	bf0c      	ite	eq
 8007130:	2301      	moveq	r3, #1
 8007132:	2300      	movne	r3, #0
 8007134:	b2db      	uxtb	r3, r3
 8007136:	e022      	b.n	800717e <HAL_TIM_PWM_Start_DMA+0xa6>
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	2b0c      	cmp	r3, #12
 800713c:	d109      	bne.n	8007152 <HAL_TIM_PWM_Start_DMA+0x7a>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b02      	cmp	r3, #2
 8007148:	bf0c      	ite	eq
 800714a:	2301      	moveq	r3, #1
 800714c:	2300      	movne	r3, #0
 800714e:	b2db      	uxtb	r3, r3
 8007150:	e015      	b.n	800717e <HAL_TIM_PWM_Start_DMA+0xa6>
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2b10      	cmp	r3, #16
 8007156:	d109      	bne.n	800716c <HAL_TIM_PWM_Start_DMA+0x94>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b02      	cmp	r3, #2
 8007162:	bf0c      	ite	eq
 8007164:	2301      	moveq	r3, #1
 8007166:	2300      	movne	r3, #0
 8007168:	b2db      	uxtb	r3, r3
 800716a:	e008      	b.n	800717e <HAL_TIM_PWM_Start_DMA+0xa6>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b02      	cmp	r3, #2
 8007176:	bf0c      	ite	eq
 8007178:	2301      	moveq	r3, #1
 800717a:	2300      	movne	r3, #0
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007182:	2302      	movs	r3, #2
 8007184:	e1a6      	b.n	80074d4 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d109      	bne.n	80071a0 <HAL_TIM_PWM_Start_DMA+0xc8>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b01      	cmp	r3, #1
 8007196:	bf0c      	ite	eq
 8007198:	2301      	moveq	r3, #1
 800719a:	2300      	movne	r3, #0
 800719c:	b2db      	uxtb	r3, r3
 800719e:	e03c      	b.n	800721a <HAL_TIM_PWM_Start_DMA+0x142>
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d109      	bne.n	80071ba <HAL_TIM_PWM_Start_DMA+0xe2>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	bf0c      	ite	eq
 80071b2:	2301      	moveq	r3, #1
 80071b4:	2300      	movne	r3, #0
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	e02f      	b.n	800721a <HAL_TIM_PWM_Start_DMA+0x142>
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d109      	bne.n	80071d4 <HAL_TIM_PWM_Start_DMA+0xfc>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	bf0c      	ite	eq
 80071cc:	2301      	moveq	r3, #1
 80071ce:	2300      	movne	r3, #0
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	e022      	b.n	800721a <HAL_TIM_PWM_Start_DMA+0x142>
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2b0c      	cmp	r3, #12
 80071d8:	d109      	bne.n	80071ee <HAL_TIM_PWM_Start_DMA+0x116>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	bf0c      	ite	eq
 80071e6:	2301      	moveq	r3, #1
 80071e8:	2300      	movne	r3, #0
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	e015      	b.n	800721a <HAL_TIM_PWM_Start_DMA+0x142>
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b10      	cmp	r3, #16
 80071f2:	d109      	bne.n	8007208 <HAL_TIM_PWM_Start_DMA+0x130>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	bf0c      	ite	eq
 8007200:	2301      	moveq	r3, #1
 8007202:	2300      	movne	r3, #0
 8007204:	b2db      	uxtb	r3, r3
 8007206:	e008      	b.n	800721a <HAL_TIM_PWM_Start_DMA+0x142>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b01      	cmp	r3, #1
 8007212:	bf0c      	ite	eq
 8007214:	2301      	moveq	r3, #1
 8007216:	2300      	movne	r3, #0
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d034      	beq.n	8007288 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <HAL_TIM_PWM_Start_DMA+0x152>
 8007224:	887b      	ldrh	r3, [r7, #2]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e152      	b.n	80074d4 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d104      	bne.n	800723e <HAL_TIM_PWM_Start_DMA+0x166>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800723c:	e026      	b.n	800728c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2b04      	cmp	r3, #4
 8007242:	d104      	bne.n	800724e <HAL_TIM_PWM_Start_DMA+0x176>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800724c:	e01e      	b.n	800728c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2b08      	cmp	r3, #8
 8007252:	d104      	bne.n	800725e <HAL_TIM_PWM_Start_DMA+0x186>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2202      	movs	r2, #2
 8007258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800725c:	e016      	b.n	800728c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	2b0c      	cmp	r3, #12
 8007262:	d104      	bne.n	800726e <HAL_TIM_PWM_Start_DMA+0x196>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2202      	movs	r2, #2
 8007268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800726c:	e00e      	b.n	800728c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2b10      	cmp	r3, #16
 8007272:	d104      	bne.n	800727e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2202      	movs	r2, #2
 8007278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800727c:	e006      	b.n	800728c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2202      	movs	r2, #2
 8007282:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007286:	e001      	b.n	800728c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e123      	b.n	80074d4 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	2b0c      	cmp	r3, #12
 8007290:	f200 80ae 	bhi.w	80073f0 <HAL_TIM_PWM_Start_DMA+0x318>
 8007294:	a201      	add	r2, pc, #4	@ (adr r2, 800729c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8007296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729a:	bf00      	nop
 800729c:	080072d1 	.word	0x080072d1
 80072a0:	080073f1 	.word	0x080073f1
 80072a4:	080073f1 	.word	0x080073f1
 80072a8:	080073f1 	.word	0x080073f1
 80072ac:	08007319 	.word	0x08007319
 80072b0:	080073f1 	.word	0x080073f1
 80072b4:	080073f1 	.word	0x080073f1
 80072b8:	080073f1 	.word	0x080073f1
 80072bc:	08007361 	.word	0x08007361
 80072c0:	080073f1 	.word	0x080073f1
 80072c4:	080073f1 	.word	0x080073f1
 80072c8:	080073f1 	.word	0x080073f1
 80072cc:	080073a9 	.word	0x080073a9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d4:	4a81      	ldr	r2, [pc, #516]	@ (80074dc <HAL_TIM_PWM_Start_DMA+0x404>)
 80072d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072dc:	4a80      	ldr	r2, [pc, #512]	@ (80074e0 <HAL_TIM_PWM_Start_DMA+0x408>)
 80072de:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e4:	4a7f      	ldr	r2, [pc, #508]	@ (80074e4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80072e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80072ec:	6879      	ldr	r1, [r7, #4]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3334      	adds	r3, #52	@ 0x34
 80072f4:	461a      	mov	r2, r3
 80072f6:	887b      	ldrh	r3, [r7, #2]
 80072f8:	f7fe f86e 	bl	80053d8 <HAL_DMA_Start_IT>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e0e6      	b.n	80074d4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68da      	ldr	r2, [r3, #12]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007314:	60da      	str	r2, [r3, #12]
      break;
 8007316:	e06e      	b.n	80073f6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800731c:	4a6f      	ldr	r2, [pc, #444]	@ (80074dc <HAL_TIM_PWM_Start_DMA+0x404>)
 800731e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007324:	4a6e      	ldr	r2, [pc, #440]	@ (80074e0 <HAL_TIM_PWM_Start_DMA+0x408>)
 8007326:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732c:	4a6d      	ldr	r2, [pc, #436]	@ (80074e4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800732e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007334:	6879      	ldr	r1, [r7, #4]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3338      	adds	r3, #56	@ 0x38
 800733c:	461a      	mov	r2, r3
 800733e:	887b      	ldrh	r3, [r7, #2]
 8007340:	f7fe f84a 	bl	80053d8 <HAL_DMA_Start_IT>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e0c2      	b.n	80074d4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68da      	ldr	r2, [r3, #12]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800735c:	60da      	str	r2, [r3, #12]
      break;
 800735e:	e04a      	b.n	80073f6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007364:	4a5d      	ldr	r2, [pc, #372]	@ (80074dc <HAL_TIM_PWM_Start_DMA+0x404>)
 8007366:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736c:	4a5c      	ldr	r2, [pc, #368]	@ (80074e0 <HAL_TIM_PWM_Start_DMA+0x408>)
 800736e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007374:	4a5b      	ldr	r2, [pc, #364]	@ (80074e4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8007376:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800737c:	6879      	ldr	r1, [r7, #4]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	333c      	adds	r3, #60	@ 0x3c
 8007384:	461a      	mov	r2, r3
 8007386:	887b      	ldrh	r3, [r7, #2]
 8007388:	f7fe f826 	bl	80053d8 <HAL_DMA_Start_IT>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e09e      	b.n	80074d4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073a4:	60da      	str	r2, [r3, #12]
      break;
 80073a6:	e026      	b.n	80073f6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ac:	4a4b      	ldr	r2, [pc, #300]	@ (80074dc <HAL_TIM_PWM_Start_DMA+0x404>)
 80073ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b4:	4a4a      	ldr	r2, [pc, #296]	@ (80074e0 <HAL_TIM_PWM_Start_DMA+0x408>)
 80073b6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073bc:	4a49      	ldr	r2, [pc, #292]	@ (80074e4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80073be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80073c4:	6879      	ldr	r1, [r7, #4]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3340      	adds	r3, #64	@ 0x40
 80073cc:	461a      	mov	r2, r3
 80073ce:	887b      	ldrh	r3, [r7, #2]
 80073d0:	f7fe f802 	bl	80053d8 <HAL_DMA_Start_IT>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e07a      	b.n	80074d4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80073ec:	60da      	str	r2, [r3, #12]
      break;
 80073ee:	e002      	b.n	80073f6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	75fb      	strb	r3, [r7, #23]
      break;
 80073f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d16a      	bne.n	80074d2 <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2201      	movs	r2, #1
 8007402:	68b9      	ldr	r1, [r7, #8]
 8007404:	4618      	mov	r0, r3
 8007406:	f001 fe19 	bl	800903c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a36      	ldr	r2, [pc, #216]	@ (80074e8 <HAL_TIM_PWM_Start_DMA+0x410>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d013      	beq.n	800743c <HAL_TIM_PWM_Start_DMA+0x364>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a34      	ldr	r2, [pc, #208]	@ (80074ec <HAL_TIM_PWM_Start_DMA+0x414>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00e      	beq.n	800743c <HAL_TIM_PWM_Start_DMA+0x364>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a33      	ldr	r2, [pc, #204]	@ (80074f0 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d009      	beq.n	800743c <HAL_TIM_PWM_Start_DMA+0x364>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a31      	ldr	r2, [pc, #196]	@ (80074f4 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d004      	beq.n	800743c <HAL_TIM_PWM_Start_DMA+0x364>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a30      	ldr	r2, [pc, #192]	@ (80074f8 <HAL_TIM_PWM_Start_DMA+0x420>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d101      	bne.n	8007440 <HAL_TIM_PWM_Start_DMA+0x368>
 800743c:	2301      	movs	r3, #1
 800743e:	e000      	b.n	8007442 <HAL_TIM_PWM_Start_DMA+0x36a>
 8007440:	2300      	movs	r3, #0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d007      	beq.n	8007456 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007454:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a23      	ldr	r2, [pc, #140]	@ (80074e8 <HAL_TIM_PWM_Start_DMA+0x410>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d018      	beq.n	8007492 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007468:	d013      	beq.n	8007492 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a23      	ldr	r2, [pc, #140]	@ (80074fc <HAL_TIM_PWM_Start_DMA+0x424>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d00e      	beq.n	8007492 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a21      	ldr	r2, [pc, #132]	@ (8007500 <HAL_TIM_PWM_Start_DMA+0x428>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d009      	beq.n	8007492 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a1a      	ldr	r2, [pc, #104]	@ (80074ec <HAL_TIM_PWM_Start_DMA+0x414>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d004      	beq.n	8007492 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a18      	ldr	r2, [pc, #96]	@ (80074f0 <HAL_TIM_PWM_Start_DMA+0x418>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d115      	bne.n	80074be <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	689a      	ldr	r2, [r3, #8]
 8007498:	4b1a      	ldr	r3, [pc, #104]	@ (8007504 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800749a:	4013      	ands	r3, r2
 800749c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	2b06      	cmp	r3, #6
 80074a2:	d015      	beq.n	80074d0 <HAL_TIM_PWM_Start_DMA+0x3f8>
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074aa:	d011      	beq.n	80074d0 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0201 	orr.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074bc:	e008      	b.n	80074d0 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f042 0201 	orr.w	r2, r2, #1
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	e000      	b.n	80074d2 <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074d0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3718      	adds	r7, #24
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	08008493 	.word	0x08008493
 80074e0:	0800853b 	.word	0x0800853b
 80074e4:	08008401 	.word	0x08008401
 80074e8:	40012c00 	.word	0x40012c00
 80074ec:	40013400 	.word	0x40013400
 80074f0:	40014000 	.word	0x40014000
 80074f4:	40014400 	.word	0x40014400
 80074f8:	40014800 	.word	0x40014800
 80074fc:	40000400 	.word	0x40000400
 8007500:	40000800 	.word	0x40000800
 8007504:	00010007 	.word	0x00010007

08007508 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2b0c      	cmp	r3, #12
 800751a:	d855      	bhi.n	80075c8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800751c:	a201      	add	r2, pc, #4	@ (adr r2, 8007524 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800751e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007522:	bf00      	nop
 8007524:	08007559 	.word	0x08007559
 8007528:	080075c9 	.word	0x080075c9
 800752c:	080075c9 	.word	0x080075c9
 8007530:	080075c9 	.word	0x080075c9
 8007534:	08007575 	.word	0x08007575
 8007538:	080075c9 	.word	0x080075c9
 800753c:	080075c9 	.word	0x080075c9
 8007540:	080075c9 	.word	0x080075c9
 8007544:	08007591 	.word	0x08007591
 8007548:	080075c9 	.word	0x080075c9
 800754c:	080075c9 	.word	0x080075c9
 8007550:	080075c9 	.word	0x080075c9
 8007554:	080075ad 	.word	0x080075ad
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68da      	ldr	r2, [r3, #12]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007566:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800756c:	4618      	mov	r0, r3
 800756e:	f7fd ffae 	bl	80054ce <HAL_DMA_Abort_IT>
      break;
 8007572:	e02c      	b.n	80075ce <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007582:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007588:	4618      	mov	r0, r3
 800758a:	f7fd ffa0 	bl	80054ce <HAL_DMA_Abort_IT>
      break;
 800758e:	e01e      	b.n	80075ce <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68da      	ldr	r2, [r3, #12]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800759e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fd ff92 	bl	80054ce <HAL_DMA_Abort_IT>
      break;
 80075aa:	e010      	b.n	80075ce <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80075ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fd ff84 	bl	80054ce <HAL_DMA_Abort_IT>
      break;
 80075c6:	e002      	b.n	80075ce <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	73fb      	strb	r3, [r7, #15]
      break;
 80075cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f040 8081 	bne.w	80076d8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2200      	movs	r2, #0
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	4618      	mov	r0, r3
 80075e0:	f001 fd2c 	bl	800903c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a3e      	ldr	r2, [pc, #248]	@ (80076e4 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d013      	beq.n	8007616 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a3d      	ldr	r2, [pc, #244]	@ (80076e8 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d00e      	beq.n	8007616 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a3b      	ldr	r2, [pc, #236]	@ (80076ec <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d009      	beq.n	8007616 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a3a      	ldr	r2, [pc, #232]	@ (80076f0 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d004      	beq.n	8007616 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a38      	ldr	r2, [pc, #224]	@ (80076f4 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d101      	bne.n	800761a <HAL_TIM_PWM_Stop_DMA+0x112>
 8007616:	2301      	movs	r3, #1
 8007618:	e000      	b.n	800761c <HAL_TIM_PWM_Stop_DMA+0x114>
 800761a:	2300      	movs	r3, #0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d017      	beq.n	8007650 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6a1a      	ldr	r2, [r3, #32]
 8007626:	f241 1311 	movw	r3, #4369	@ 0x1111
 800762a:	4013      	ands	r3, r2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10f      	bne.n	8007650 <HAL_TIM_PWM_Stop_DMA+0x148>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6a1a      	ldr	r2, [r3, #32]
 8007636:	f244 4344 	movw	r3, #17476	@ 0x4444
 800763a:	4013      	ands	r3, r2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d107      	bne.n	8007650 <HAL_TIM_PWM_Stop_DMA+0x148>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800764e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6a1a      	ldr	r2, [r3, #32]
 8007656:	f241 1311 	movw	r3, #4369	@ 0x1111
 800765a:	4013      	ands	r3, r2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10f      	bne.n	8007680 <HAL_TIM_PWM_Stop_DMA+0x178>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6a1a      	ldr	r2, [r3, #32]
 8007666:	f244 4344 	movw	r3, #17476	@ 0x4444
 800766a:	4013      	ands	r3, r2
 800766c:	2b00      	cmp	r3, #0
 800766e:	d107      	bne.n	8007680 <HAL_TIM_PWM_Stop_DMA+0x178>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f022 0201 	bic.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d104      	bne.n	8007690 <HAL_TIM_PWM_Stop_DMA+0x188>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800768e:	e023      	b.n	80076d8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2b04      	cmp	r3, #4
 8007694:	d104      	bne.n	80076a0 <HAL_TIM_PWM_Stop_DMA+0x198>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800769e:	e01b      	b.n	80076d8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2b08      	cmp	r3, #8
 80076a4:	d104      	bne.n	80076b0 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076ae:	e013      	b.n	80076d8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2b0c      	cmp	r3, #12
 80076b4:	d104      	bne.n	80076c0 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076be:	e00b      	b.n	80076d8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	2b10      	cmp	r3, #16
 80076c4:	d104      	bne.n	80076d0 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076ce:	e003      	b.n	80076d8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	40012c00 	.word	0x40012c00
 80076e8:	40013400 	.word	0x40013400
 80076ec:	40014000 	.word	0x40014000
 80076f0:	40014400 	.word	0x40014400
 80076f4:	40014800 	.word	0x40014800

080076f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e049      	b.n	800779e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d106      	bne.n	8007724 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f841 	bl	80077a6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3304      	adds	r3, #4
 8007734:	4619      	mov	r1, r3
 8007736:	4610      	mov	r0, r2
 8007738:	f000 ff34 	bl	80085a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80077ae:	bf00      	nop
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
	...

080077bc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d104      	bne.n	80077da <HAL_TIM_IC_Start_IT+0x1e>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	e023      	b.n	8007822 <HAL_TIM_IC_Start_IT+0x66>
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b04      	cmp	r3, #4
 80077de:	d104      	bne.n	80077ea <HAL_TIM_IC_Start_IT+0x2e>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	e01b      	b.n	8007822 <HAL_TIM_IC_Start_IT+0x66>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b08      	cmp	r3, #8
 80077ee:	d104      	bne.n	80077fa <HAL_TIM_IC_Start_IT+0x3e>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	e013      	b.n	8007822 <HAL_TIM_IC_Start_IT+0x66>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b0c      	cmp	r3, #12
 80077fe:	d104      	bne.n	800780a <HAL_TIM_IC_Start_IT+0x4e>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007806:	b2db      	uxtb	r3, r3
 8007808:	e00b      	b.n	8007822 <HAL_TIM_IC_Start_IT+0x66>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b10      	cmp	r3, #16
 800780e:	d104      	bne.n	800781a <HAL_TIM_IC_Start_IT+0x5e>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007816:	b2db      	uxtb	r3, r3
 8007818:	e003      	b.n	8007822 <HAL_TIM_IC_Start_IT+0x66>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007820:	b2db      	uxtb	r3, r3
 8007822:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d104      	bne.n	8007834 <HAL_TIM_IC_Start_IT+0x78>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007830:	b2db      	uxtb	r3, r3
 8007832:	e013      	b.n	800785c <HAL_TIM_IC_Start_IT+0xa0>
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2b04      	cmp	r3, #4
 8007838:	d104      	bne.n	8007844 <HAL_TIM_IC_Start_IT+0x88>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007840:	b2db      	uxtb	r3, r3
 8007842:	e00b      	b.n	800785c <HAL_TIM_IC_Start_IT+0xa0>
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	2b08      	cmp	r3, #8
 8007848:	d104      	bne.n	8007854 <HAL_TIM_IC_Start_IT+0x98>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007850:	b2db      	uxtb	r3, r3
 8007852:	e003      	b.n	800785c <HAL_TIM_IC_Start_IT+0xa0>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800785a:	b2db      	uxtb	r3, r3
 800785c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800785e:	7bbb      	ldrb	r3, [r7, #14]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d102      	bne.n	800786a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007864:	7b7b      	ldrb	r3, [r7, #13]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d001      	beq.n	800786e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e0d8      	b.n	8007a20 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d104      	bne.n	800787e <HAL_TIM_IC_Start_IT+0xc2>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2202      	movs	r2, #2
 8007878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800787c:	e023      	b.n	80078c6 <HAL_TIM_IC_Start_IT+0x10a>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b04      	cmp	r3, #4
 8007882:	d104      	bne.n	800788e <HAL_TIM_IC_Start_IT+0xd2>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800788c:	e01b      	b.n	80078c6 <HAL_TIM_IC_Start_IT+0x10a>
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b08      	cmp	r3, #8
 8007892:	d104      	bne.n	800789e <HAL_TIM_IC_Start_IT+0xe2>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2202      	movs	r2, #2
 8007898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800789c:	e013      	b.n	80078c6 <HAL_TIM_IC_Start_IT+0x10a>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b0c      	cmp	r3, #12
 80078a2:	d104      	bne.n	80078ae <HAL_TIM_IC_Start_IT+0xf2>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2202      	movs	r2, #2
 80078a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80078ac:	e00b      	b.n	80078c6 <HAL_TIM_IC_Start_IT+0x10a>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b10      	cmp	r3, #16
 80078b2:	d104      	bne.n	80078be <HAL_TIM_IC_Start_IT+0x102>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078bc:	e003      	b.n	80078c6 <HAL_TIM_IC_Start_IT+0x10a>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2202      	movs	r2, #2
 80078c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d104      	bne.n	80078d6 <HAL_TIM_IC_Start_IT+0x11a>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078d4:	e013      	b.n	80078fe <HAL_TIM_IC_Start_IT+0x142>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b04      	cmp	r3, #4
 80078da:	d104      	bne.n	80078e6 <HAL_TIM_IC_Start_IT+0x12a>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2202      	movs	r2, #2
 80078e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078e4:	e00b      	b.n	80078fe <HAL_TIM_IC_Start_IT+0x142>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b08      	cmp	r3, #8
 80078ea:	d104      	bne.n	80078f6 <HAL_TIM_IC_Start_IT+0x13a>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2202      	movs	r2, #2
 80078f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80078f4:	e003      	b.n	80078fe <HAL_TIM_IC_Start_IT+0x142>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2202      	movs	r2, #2
 80078fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b0c      	cmp	r3, #12
 8007902:	d841      	bhi.n	8007988 <HAL_TIM_IC_Start_IT+0x1cc>
 8007904:	a201      	add	r2, pc, #4	@ (adr r2, 800790c <HAL_TIM_IC_Start_IT+0x150>)
 8007906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790a:	bf00      	nop
 800790c:	08007941 	.word	0x08007941
 8007910:	08007989 	.word	0x08007989
 8007914:	08007989 	.word	0x08007989
 8007918:	08007989 	.word	0x08007989
 800791c:	08007953 	.word	0x08007953
 8007920:	08007989 	.word	0x08007989
 8007924:	08007989 	.word	0x08007989
 8007928:	08007989 	.word	0x08007989
 800792c:	08007965 	.word	0x08007965
 8007930:	08007989 	.word	0x08007989
 8007934:	08007989 	.word	0x08007989
 8007938:	08007989 	.word	0x08007989
 800793c:	08007977 	.word	0x08007977
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68da      	ldr	r2, [r3, #12]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f042 0202 	orr.w	r2, r2, #2
 800794e:	60da      	str	r2, [r3, #12]
      break;
 8007950:	e01d      	b.n	800798e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f042 0204 	orr.w	r2, r2, #4
 8007960:	60da      	str	r2, [r3, #12]
      break;
 8007962:	e014      	b.n	800798e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f042 0208 	orr.w	r2, r2, #8
 8007972:	60da      	str	r2, [r3, #12]
      break;
 8007974:	e00b      	b.n	800798e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f042 0210 	orr.w	r2, r2, #16
 8007984:	60da      	str	r2, [r3, #12]
      break;
 8007986:	e002      	b.n	800798e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	73fb      	strb	r3, [r7, #15]
      break;
 800798c:	bf00      	nop
  }

  if (status == HAL_OK)
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d144      	bne.n	8007a1e <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2201      	movs	r2, #1
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	4618      	mov	r0, r3
 800799e:	f001 fb4d 	bl	800903c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a20      	ldr	r2, [pc, #128]	@ (8007a28 <HAL_TIM_IC_Start_IT+0x26c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d018      	beq.n	80079de <HAL_TIM_IC_Start_IT+0x222>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079b4:	d013      	beq.n	80079de <HAL_TIM_IC_Start_IT+0x222>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a1c      	ldr	r2, [pc, #112]	@ (8007a2c <HAL_TIM_IC_Start_IT+0x270>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d00e      	beq.n	80079de <HAL_TIM_IC_Start_IT+0x222>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a1a      	ldr	r2, [pc, #104]	@ (8007a30 <HAL_TIM_IC_Start_IT+0x274>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d009      	beq.n	80079de <HAL_TIM_IC_Start_IT+0x222>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a19      	ldr	r2, [pc, #100]	@ (8007a34 <HAL_TIM_IC_Start_IT+0x278>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d004      	beq.n	80079de <HAL_TIM_IC_Start_IT+0x222>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a17      	ldr	r2, [pc, #92]	@ (8007a38 <HAL_TIM_IC_Start_IT+0x27c>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d115      	bne.n	8007a0a <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689a      	ldr	r2, [r3, #8]
 80079e4:	4b15      	ldr	r3, [pc, #84]	@ (8007a3c <HAL_TIM_IC_Start_IT+0x280>)
 80079e6:	4013      	ands	r3, r2
 80079e8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2b06      	cmp	r3, #6
 80079ee:	d015      	beq.n	8007a1c <HAL_TIM_IC_Start_IT+0x260>
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079f6:	d011      	beq.n	8007a1c <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0201 	orr.w	r2, r2, #1
 8007a06:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a08:	e008      	b.n	8007a1c <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f042 0201 	orr.w	r2, r2, #1
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	e000      	b.n	8007a1e <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a1c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	40012c00 	.word	0x40012c00
 8007a2c:	40000400 	.word	0x40000400
 8007a30:	40000800 	.word	0x40000800
 8007a34:	40013400 	.word	0x40013400
 8007a38:	40014000 	.word	0x40014000
 8007a3c:	00010007 	.word	0x00010007

08007a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d020      	beq.n	8007aa4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f003 0302 	and.w	r3, r3, #2
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d01b      	beq.n	8007aa4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f06f 0202 	mvn.w	r2, #2
 8007a74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	f003 0303 	and.w	r3, r3, #3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7f9 fd72 	bl	8001574 <HAL_TIM_IC_CaptureCallback>
 8007a90:	e005      	b.n	8007a9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7f9 ffce 	bl	8001a34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7fb faab 	bl	8002ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f003 0304 	and.w	r3, r3, #4
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d020      	beq.n	8007af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f003 0304 	and.w	r3, r3, #4
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d01b      	beq.n	8007af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f06f 0204 	mvn.w	r2, #4
 8007ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2202      	movs	r2, #2
 8007ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7f9 fd4c 	bl	8001574 <HAL_TIM_IC_CaptureCallback>
 8007adc:	e005      	b.n	8007aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7f9 ffa8 	bl	8001a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7fb fa85 	bl	8002ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f003 0308 	and.w	r3, r3, #8
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d020      	beq.n	8007b3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f003 0308 	and.w	r3, r3, #8
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d01b      	beq.n	8007b3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f06f 0208 	mvn.w	r2, #8
 8007b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2204      	movs	r2, #4
 8007b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	69db      	ldr	r3, [r3, #28]
 8007b1a:	f003 0303 	and.w	r3, r3, #3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d003      	beq.n	8007b2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7f9 fd26 	bl	8001574 <HAL_TIM_IC_CaptureCallback>
 8007b28:	e005      	b.n	8007b36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7f9 ff82 	bl	8001a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7fb fa5f 	bl	8002ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	f003 0310 	and.w	r3, r3, #16
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d020      	beq.n	8007b88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f003 0310 	and.w	r3, r3, #16
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d01b      	beq.n	8007b88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f06f 0210 	mvn.w	r2, #16
 8007b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2208      	movs	r2, #8
 8007b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7f9 fd00 	bl	8001574 <HAL_TIM_IC_CaptureCallback>
 8007b74:	e005      	b.n	8007b82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f7f9 ff5c 	bl	8001a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7fb fa39 	bl	8002ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00c      	beq.n	8007bac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d007      	beq.n	8007bac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f06f 0201 	mvn.w	r2, #1
 8007ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fc02 	bl	80083b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d104      	bne.n	8007bc0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00c      	beq.n	8007bda <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d007      	beq.n	8007bda <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f001 fae3 	bl	80091a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00c      	beq.n	8007bfe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d007      	beq.n	8007bfe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f001 fadb 	bl	80091b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00c      	beq.n	8007c22 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d007      	beq.n	8007c22 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fbdb 	bl	80083d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f003 0320 	and.w	r3, r3, #32
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00c      	beq.n	8007c46 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f003 0320 	and.w	r3, r3, #32
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d007      	beq.n	8007c46 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f06f 0220 	mvn.w	r2, #32
 8007c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f001 faa3 	bl	800918c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00c      	beq.n	8007c6a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d007      	beq.n	8007c6a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f001 faaf 	bl	80091c8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00c      	beq.n	8007c8e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d007      	beq.n	8007c8e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f001 faa7 	bl	80091dc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00c      	beq.n	8007cb2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d007      	beq.n	8007cb2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f001 fa9f 	bl	80091f0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00c      	beq.n	8007cd6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d007      	beq.n	8007cd6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f001 fa97 	bl	8009204 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cd6:	bf00      	nop
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d101      	bne.n	8007cfe <HAL_TIM_OC_ConfigChannel+0x1e>
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	e066      	b.n	8007dcc <HAL_TIM_OC_ConfigChannel+0xec>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b14      	cmp	r3, #20
 8007d0a:	d857      	bhi.n	8007dbc <HAL_TIM_OC_ConfigChannel+0xdc>
 8007d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d14 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d12:	bf00      	nop
 8007d14:	08007d69 	.word	0x08007d69
 8007d18:	08007dbd 	.word	0x08007dbd
 8007d1c:	08007dbd 	.word	0x08007dbd
 8007d20:	08007dbd 	.word	0x08007dbd
 8007d24:	08007d77 	.word	0x08007d77
 8007d28:	08007dbd 	.word	0x08007dbd
 8007d2c:	08007dbd 	.word	0x08007dbd
 8007d30:	08007dbd 	.word	0x08007dbd
 8007d34:	08007d85 	.word	0x08007d85
 8007d38:	08007dbd 	.word	0x08007dbd
 8007d3c:	08007dbd 	.word	0x08007dbd
 8007d40:	08007dbd 	.word	0x08007dbd
 8007d44:	08007d93 	.word	0x08007d93
 8007d48:	08007dbd 	.word	0x08007dbd
 8007d4c:	08007dbd 	.word	0x08007dbd
 8007d50:	08007dbd 	.word	0x08007dbd
 8007d54:	08007da1 	.word	0x08007da1
 8007d58:	08007dbd 	.word	0x08007dbd
 8007d5c:	08007dbd 	.word	0x08007dbd
 8007d60:	08007dbd 	.word	0x08007dbd
 8007d64:	08007daf 	.word	0x08007daf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68b9      	ldr	r1, [r7, #8]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 fcb4 	bl	80086dc <TIM_OC1_SetConfig>
      break;
 8007d74:	e025      	b.n	8007dc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68b9      	ldr	r1, [r7, #8]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 fd3d 	bl	80087fc <TIM_OC2_SetConfig>
      break;
 8007d82:	e01e      	b.n	8007dc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68b9      	ldr	r1, [r7, #8]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 fdc0 	bl	8008910 <TIM_OC3_SetConfig>
      break;
 8007d90:	e017      	b.n	8007dc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68b9      	ldr	r1, [r7, #8]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f000 fe41 	bl	8008a20 <TIM_OC4_SetConfig>
      break;
 8007d9e:	e010      	b.n	8007dc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68b9      	ldr	r1, [r7, #8]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 fec4 	bl	8008b34 <TIM_OC5_SetConfig>
      break;
 8007dac:	e009      	b.n	8007dc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68b9      	ldr	r1, [r7, #8]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 ff21 	bl	8008bfc <TIM_OC6_SetConfig>
      break;
 8007dba:	e002      	b.n	8007dc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8007dc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3718      	adds	r7, #24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d101      	bne.n	8007df2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007dee:	2302      	movs	r3, #2
 8007df0:	e088      	b.n	8007f04 <HAL_TIM_IC_ConfigChannel+0x130>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d11b      	bne.n	8007e38 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007e10:	f000 ff5a 	bl	8008cc8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	699a      	ldr	r2, [r3, #24]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f022 020c 	bic.w	r2, r2, #12
 8007e22:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6999      	ldr	r1, [r3, #24]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	689a      	ldr	r2, [r3, #8]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	430a      	orrs	r2, r1
 8007e34:	619a      	str	r2, [r3, #24]
 8007e36:	e060      	b.n	8007efa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b04      	cmp	r3, #4
 8007e3c:	d11c      	bne.n	8007e78 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007e4e:	f000 ffd2 	bl	8008df6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	699a      	ldr	r2, [r3, #24]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007e60:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6999      	ldr	r1, [r3, #24]
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	021a      	lsls	r2, r3, #8
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	619a      	str	r2, [r3, #24]
 8007e76:	e040      	b.n	8007efa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b08      	cmp	r3, #8
 8007e7c:	d11b      	bne.n	8007eb6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007e8e:	f001 f81f 	bl	8008ed0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69da      	ldr	r2, [r3, #28]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f022 020c 	bic.w	r2, r2, #12
 8007ea0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69d9      	ldr	r1, [r3, #28]
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	689a      	ldr	r2, [r3, #8]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	61da      	str	r2, [r3, #28]
 8007eb4:	e021      	b.n	8007efa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b0c      	cmp	r3, #12
 8007eba:	d11c      	bne.n	8007ef6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007ecc:	f001 f83c 	bl	8008f48 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	69da      	ldr	r2, [r3, #28]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007ede:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	69d9      	ldr	r1, [r3, #28]
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	021a      	lsls	r2, r3, #8
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	61da      	str	r2, [r3, #28]
 8007ef4:	e001      	b.n	8007efa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d101      	bne.n	8007f2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f26:	2302      	movs	r3, #2
 8007f28:	e0ff      	b.n	800812a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2b14      	cmp	r3, #20
 8007f36:	f200 80f0 	bhi.w	800811a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f40:	08007f95 	.word	0x08007f95
 8007f44:	0800811b 	.word	0x0800811b
 8007f48:	0800811b 	.word	0x0800811b
 8007f4c:	0800811b 	.word	0x0800811b
 8007f50:	08007fd5 	.word	0x08007fd5
 8007f54:	0800811b 	.word	0x0800811b
 8007f58:	0800811b 	.word	0x0800811b
 8007f5c:	0800811b 	.word	0x0800811b
 8007f60:	08008017 	.word	0x08008017
 8007f64:	0800811b 	.word	0x0800811b
 8007f68:	0800811b 	.word	0x0800811b
 8007f6c:	0800811b 	.word	0x0800811b
 8007f70:	08008057 	.word	0x08008057
 8007f74:	0800811b 	.word	0x0800811b
 8007f78:	0800811b 	.word	0x0800811b
 8007f7c:	0800811b 	.word	0x0800811b
 8007f80:	08008099 	.word	0x08008099
 8007f84:	0800811b 	.word	0x0800811b
 8007f88:	0800811b 	.word	0x0800811b
 8007f8c:	0800811b 	.word	0x0800811b
 8007f90:	080080d9 	.word	0x080080d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68b9      	ldr	r1, [r7, #8]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 fb9e 	bl	80086dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	699a      	ldr	r2, [r3, #24]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f042 0208 	orr.w	r2, r2, #8
 8007fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	699a      	ldr	r2, [r3, #24]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f022 0204 	bic.w	r2, r2, #4
 8007fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6999      	ldr	r1, [r3, #24]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	691a      	ldr	r2, [r3, #16]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	619a      	str	r2, [r3, #24]
      break;
 8007fd2:	e0a5      	b.n	8008120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68b9      	ldr	r1, [r7, #8]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 fc0e 	bl	80087fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	699a      	ldr	r2, [r3, #24]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	699a      	ldr	r2, [r3, #24]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6999      	ldr	r1, [r3, #24]
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	021a      	lsls	r2, r3, #8
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	430a      	orrs	r2, r1
 8008012:	619a      	str	r2, [r3, #24]
      break;
 8008014:	e084      	b.n	8008120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68b9      	ldr	r1, [r7, #8]
 800801c:	4618      	mov	r0, r3
 800801e:	f000 fc77 	bl	8008910 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69da      	ldr	r2, [r3, #28]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f042 0208 	orr.w	r2, r2, #8
 8008030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	69da      	ldr	r2, [r3, #28]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f022 0204 	bic.w	r2, r2, #4
 8008040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69d9      	ldr	r1, [r3, #28]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	691a      	ldr	r2, [r3, #16]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	430a      	orrs	r2, r1
 8008052:	61da      	str	r2, [r3, #28]
      break;
 8008054:	e064      	b.n	8008120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68b9      	ldr	r1, [r7, #8]
 800805c:	4618      	mov	r0, r3
 800805e:	f000 fcdf 	bl	8008a20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	69da      	ldr	r2, [r3, #28]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	69da      	ldr	r2, [r3, #28]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	69d9      	ldr	r1, [r3, #28]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	021a      	lsls	r2, r3, #8
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	430a      	orrs	r2, r1
 8008094:	61da      	str	r2, [r3, #28]
      break;
 8008096:	e043      	b.n	8008120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68b9      	ldr	r1, [r7, #8]
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fd48 	bl	8008b34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f042 0208 	orr.w	r2, r2, #8
 80080b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 0204 	bic.w	r2, r2, #4
 80080c2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	691a      	ldr	r2, [r3, #16]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	430a      	orrs	r2, r1
 80080d4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80080d6:	e023      	b.n	8008120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68b9      	ldr	r1, [r7, #8]
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 fd8c 	bl	8008bfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008102:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	021a      	lsls	r2, r3, #8
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	430a      	orrs	r2, r1
 8008116:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008118:	e002      	b.n	8008120 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	75fb      	strb	r3, [r7, #23]
      break;
 800811e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008128:	7dfb      	ldrb	r3, [r7, #23]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3718      	adds	r7, #24
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop

08008134 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008148:	2b01      	cmp	r3, #1
 800814a:	d101      	bne.n	8008150 <HAL_TIM_ConfigClockSource+0x1c>
 800814c:	2302      	movs	r3, #2
 800814e:	e0de      	b.n	800830e <HAL_TIM_ConfigClockSource+0x1da>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2202      	movs	r2, #2
 800815c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800816e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800817a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a63      	ldr	r2, [pc, #396]	@ (8008318 <HAL_TIM_ConfigClockSource+0x1e4>)
 800818a:	4293      	cmp	r3, r2
 800818c:	f000 80a9 	beq.w	80082e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008190:	4a61      	ldr	r2, [pc, #388]	@ (8008318 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008192:	4293      	cmp	r3, r2
 8008194:	f200 80ae 	bhi.w	80082f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008198:	4a60      	ldr	r2, [pc, #384]	@ (800831c <HAL_TIM_ConfigClockSource+0x1e8>)
 800819a:	4293      	cmp	r3, r2
 800819c:	f000 80a1 	beq.w	80082e2 <HAL_TIM_ConfigClockSource+0x1ae>
 80081a0:	4a5e      	ldr	r2, [pc, #376]	@ (800831c <HAL_TIM_ConfigClockSource+0x1e8>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	f200 80a6 	bhi.w	80082f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80081a8:	4a5d      	ldr	r2, [pc, #372]	@ (8008320 <HAL_TIM_ConfigClockSource+0x1ec>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	f000 8099 	beq.w	80082e2 <HAL_TIM_ConfigClockSource+0x1ae>
 80081b0:	4a5b      	ldr	r2, [pc, #364]	@ (8008320 <HAL_TIM_ConfigClockSource+0x1ec>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	f200 809e 	bhi.w	80082f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80081b8:	4a5a      	ldr	r2, [pc, #360]	@ (8008324 <HAL_TIM_ConfigClockSource+0x1f0>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	f000 8091 	beq.w	80082e2 <HAL_TIM_ConfigClockSource+0x1ae>
 80081c0:	4a58      	ldr	r2, [pc, #352]	@ (8008324 <HAL_TIM_ConfigClockSource+0x1f0>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	f200 8096 	bhi.w	80082f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80081c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081cc:	f000 8089 	beq.w	80082e2 <HAL_TIM_ConfigClockSource+0x1ae>
 80081d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081d4:	f200 808e 	bhi.w	80082f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80081d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081dc:	d03e      	beq.n	800825c <HAL_TIM_ConfigClockSource+0x128>
 80081de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081e2:	f200 8087 	bhi.w	80082f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80081e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081ea:	f000 8086 	beq.w	80082fa <HAL_TIM_ConfigClockSource+0x1c6>
 80081ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081f2:	d87f      	bhi.n	80082f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80081f4:	2b70      	cmp	r3, #112	@ 0x70
 80081f6:	d01a      	beq.n	800822e <HAL_TIM_ConfigClockSource+0xfa>
 80081f8:	2b70      	cmp	r3, #112	@ 0x70
 80081fa:	d87b      	bhi.n	80082f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80081fc:	2b60      	cmp	r3, #96	@ 0x60
 80081fe:	d050      	beq.n	80082a2 <HAL_TIM_ConfigClockSource+0x16e>
 8008200:	2b60      	cmp	r3, #96	@ 0x60
 8008202:	d877      	bhi.n	80082f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008204:	2b50      	cmp	r3, #80	@ 0x50
 8008206:	d03c      	beq.n	8008282 <HAL_TIM_ConfigClockSource+0x14e>
 8008208:	2b50      	cmp	r3, #80	@ 0x50
 800820a:	d873      	bhi.n	80082f4 <HAL_TIM_ConfigClockSource+0x1c0>
 800820c:	2b40      	cmp	r3, #64	@ 0x40
 800820e:	d058      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x18e>
 8008210:	2b40      	cmp	r3, #64	@ 0x40
 8008212:	d86f      	bhi.n	80082f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008214:	2b30      	cmp	r3, #48	@ 0x30
 8008216:	d064      	beq.n	80082e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008218:	2b30      	cmp	r3, #48	@ 0x30
 800821a:	d86b      	bhi.n	80082f4 <HAL_TIM_ConfigClockSource+0x1c0>
 800821c:	2b20      	cmp	r3, #32
 800821e:	d060      	beq.n	80082e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008220:	2b20      	cmp	r3, #32
 8008222:	d867      	bhi.n	80082f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008224:	2b00      	cmp	r3, #0
 8008226:	d05c      	beq.n	80082e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008228:	2b10      	cmp	r3, #16
 800822a:	d05a      	beq.n	80082e2 <HAL_TIM_ConfigClockSource+0x1ae>
 800822c:	e062      	b.n	80082f4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800823e:	f000 fedd 	bl	8008ffc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	609a      	str	r2, [r3, #8]
      break;
 800825a:	e04f      	b.n	80082fc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800826c:	f000 fec6 	bl	8008ffc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689a      	ldr	r2, [r3, #8]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800827e:	609a      	str	r2, [r3, #8]
      break;
 8008280:	e03c      	b.n	80082fc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800828e:	461a      	mov	r2, r3
 8008290:	f000 fd82 	bl	8008d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2150      	movs	r1, #80	@ 0x50
 800829a:	4618      	mov	r0, r3
 800829c:	f000 fe91 	bl	8008fc2 <TIM_ITRx_SetConfig>
      break;
 80082a0:	e02c      	b.n	80082fc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082ae:	461a      	mov	r2, r3
 80082b0:	f000 fdde 	bl	8008e70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2160      	movs	r1, #96	@ 0x60
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 fe81 	bl	8008fc2 <TIM_ITRx_SetConfig>
      break;
 80082c0:	e01c      	b.n	80082fc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082ce:	461a      	mov	r2, r3
 80082d0:	f000 fd62 	bl	8008d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2140      	movs	r1, #64	@ 0x40
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 fe71 	bl	8008fc2 <TIM_ITRx_SetConfig>
      break;
 80082e0:	e00c      	b.n	80082fc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4619      	mov	r1, r3
 80082ec:	4610      	mov	r0, r2
 80082ee:	f000 fe68 	bl	8008fc2 <TIM_ITRx_SetConfig>
      break;
 80082f2:	e003      	b.n	80082fc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	73fb      	strb	r3, [r7, #15]
      break;
 80082f8:	e000      	b.n	80082fc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80082fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800830c:	7bfb      	ldrb	r3, [r7, #15]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	00100070 	.word	0x00100070
 800831c:	00100040 	.word	0x00100040
 8008320:	00100030 	.word	0x00100030
 8008324:	00100020 	.word	0x00100020

08008328 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008332:	2300      	movs	r3, #0
 8008334:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b0c      	cmp	r3, #12
 800833a:	d831      	bhi.n	80083a0 <HAL_TIM_ReadCapturedValue+0x78>
 800833c:	a201      	add	r2, pc, #4	@ (adr r2, 8008344 <HAL_TIM_ReadCapturedValue+0x1c>)
 800833e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008342:	bf00      	nop
 8008344:	08008379 	.word	0x08008379
 8008348:	080083a1 	.word	0x080083a1
 800834c:	080083a1 	.word	0x080083a1
 8008350:	080083a1 	.word	0x080083a1
 8008354:	08008383 	.word	0x08008383
 8008358:	080083a1 	.word	0x080083a1
 800835c:	080083a1 	.word	0x080083a1
 8008360:	080083a1 	.word	0x080083a1
 8008364:	0800838d 	.word	0x0800838d
 8008368:	080083a1 	.word	0x080083a1
 800836c:	080083a1 	.word	0x080083a1
 8008370:	080083a1 	.word	0x080083a1
 8008374:	08008397 	.word	0x08008397
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800837e:	60fb      	str	r3, [r7, #12]

      break;
 8008380:	e00f      	b.n	80083a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008388:	60fb      	str	r3, [r7, #12]

      break;
 800838a:	e00a      	b.n	80083a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008392:	60fb      	str	r3, [r7, #12]

      break;
 8008394:	e005      	b.n	80083a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800839c:	60fb      	str	r3, [r7, #12]

      break;
 800839e:	e000      	b.n	80083a2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80083a0:	bf00      	nop
  }

  return tmpreg;
 80083a2:	68fb      	ldr	r3, [r7, #12]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3714      	adds	r7, #20
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	429a      	cmp	r2, r3
 8008416:	d107      	bne.n	8008428 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2201      	movs	r2, #1
 800841c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008426:	e02a      	b.n	800847e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	429a      	cmp	r2, r3
 8008430:	d107      	bne.n	8008442 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2202      	movs	r2, #2
 8008436:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008440:	e01d      	b.n	800847e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	429a      	cmp	r2, r3
 800844a:	d107      	bne.n	800845c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2204      	movs	r2, #4
 8008450:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800845a:	e010      	b.n	800847e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	429a      	cmp	r2, r3
 8008464:	d107      	bne.n	8008476 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2208      	movs	r2, #8
 800846a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008474:	e003      	b.n	800847e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f7ff ffb4 	bl	80083ec <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	771a      	strb	r2, [r3, #28]
}
 800848a:	bf00      	nop
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800849e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d10b      	bne.n	80084c2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2201      	movs	r2, #1
 80084ae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	69db      	ldr	r3, [r3, #28]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d136      	bne.n	8008526 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084c0:	e031      	b.n	8008526 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d10b      	bne.n	80084e4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2202      	movs	r2, #2
 80084d0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	69db      	ldr	r3, [r3, #28]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d125      	bne.n	8008526 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084e2:	e020      	b.n	8008526 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d10b      	bne.n	8008506 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2204      	movs	r2, #4
 80084f2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	69db      	ldr	r3, [r3, #28]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d114      	bne.n	8008526 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008504:	e00f      	b.n	8008526 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	429a      	cmp	r2, r3
 800850e:	d10a      	bne.n	8008526 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2208      	movs	r2, #8
 8008514:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	69db      	ldr	r3, [r3, #28]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d103      	bne.n	8008526 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f7fa fd64 	bl	8002ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	771a      	strb	r2, [r3, #28]
}
 8008532:	bf00      	nop
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b084      	sub	sp, #16
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008546:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	429a      	cmp	r2, r3
 8008550:	d103      	bne.n	800855a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2201      	movs	r2, #1
 8008556:	771a      	strb	r2, [r3, #28]
 8008558:	e019      	b.n	800858e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	429a      	cmp	r2, r3
 8008562:	d103      	bne.n	800856c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2202      	movs	r2, #2
 8008568:	771a      	strb	r2, [r3, #28]
 800856a:	e010      	b.n	800858e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	429a      	cmp	r2, r3
 8008574:	d103      	bne.n	800857e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2204      	movs	r2, #4
 800857a:	771a      	strb	r2, [r3, #28]
 800857c:	e007      	b.n	800858e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	429a      	cmp	r2, r3
 8008586:	d102      	bne.n	800858e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2208      	movs	r2, #8
 800858c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f7ff ff18 	bl	80083c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	771a      	strb	r2, [r3, #28]
}
 800859a:	bf00      	nop
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a42      	ldr	r2, [pc, #264]	@ (80086c0 <TIM_Base_SetConfig+0x11c>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d00f      	beq.n	80085dc <TIM_Base_SetConfig+0x38>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085c2:	d00b      	beq.n	80085dc <TIM_Base_SetConfig+0x38>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a3f      	ldr	r2, [pc, #252]	@ (80086c4 <TIM_Base_SetConfig+0x120>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d007      	beq.n	80085dc <TIM_Base_SetConfig+0x38>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a3e      	ldr	r2, [pc, #248]	@ (80086c8 <TIM_Base_SetConfig+0x124>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d003      	beq.n	80085dc <TIM_Base_SetConfig+0x38>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a3d      	ldr	r2, [pc, #244]	@ (80086cc <TIM_Base_SetConfig+0x128>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d108      	bne.n	80085ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a33      	ldr	r2, [pc, #204]	@ (80086c0 <TIM_Base_SetConfig+0x11c>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d01b      	beq.n	800862e <TIM_Base_SetConfig+0x8a>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085fc:	d017      	beq.n	800862e <TIM_Base_SetConfig+0x8a>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a30      	ldr	r2, [pc, #192]	@ (80086c4 <TIM_Base_SetConfig+0x120>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d013      	beq.n	800862e <TIM_Base_SetConfig+0x8a>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a2f      	ldr	r2, [pc, #188]	@ (80086c8 <TIM_Base_SetConfig+0x124>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d00f      	beq.n	800862e <TIM_Base_SetConfig+0x8a>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a2e      	ldr	r2, [pc, #184]	@ (80086cc <TIM_Base_SetConfig+0x128>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d00b      	beq.n	800862e <TIM_Base_SetConfig+0x8a>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a2d      	ldr	r2, [pc, #180]	@ (80086d0 <TIM_Base_SetConfig+0x12c>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d007      	beq.n	800862e <TIM_Base_SetConfig+0x8a>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a2c      	ldr	r2, [pc, #176]	@ (80086d4 <TIM_Base_SetConfig+0x130>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d003      	beq.n	800862e <TIM_Base_SetConfig+0x8a>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a2b      	ldr	r2, [pc, #172]	@ (80086d8 <TIM_Base_SetConfig+0x134>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d108      	bne.n	8008640 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	4313      	orrs	r3, r2
 800863e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	4313      	orrs	r3, r2
 800864c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	689a      	ldr	r2, [r3, #8]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a16      	ldr	r2, [pc, #88]	@ (80086c0 <TIM_Base_SetConfig+0x11c>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d00f      	beq.n	800868c <TIM_Base_SetConfig+0xe8>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a17      	ldr	r2, [pc, #92]	@ (80086cc <TIM_Base_SetConfig+0x128>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d00b      	beq.n	800868c <TIM_Base_SetConfig+0xe8>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a16      	ldr	r2, [pc, #88]	@ (80086d0 <TIM_Base_SetConfig+0x12c>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d007      	beq.n	800868c <TIM_Base_SetConfig+0xe8>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a15      	ldr	r2, [pc, #84]	@ (80086d4 <TIM_Base_SetConfig+0x130>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d003      	beq.n	800868c <TIM_Base_SetConfig+0xe8>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a14      	ldr	r2, [pc, #80]	@ (80086d8 <TIM_Base_SetConfig+0x134>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d103      	bne.n	8008694 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	691a      	ldr	r2, [r3, #16]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d105      	bne.n	80086b2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	f023 0201 	bic.w	r2, r3, #1
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	611a      	str	r2, [r3, #16]
  }
}
 80086b2:	bf00      	nop
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	40012c00 	.word	0x40012c00
 80086c4:	40000400 	.word	0x40000400
 80086c8:	40000800 	.word	0x40000800
 80086cc:	40013400 	.word	0x40013400
 80086d0:	40014000 	.word	0x40014000
 80086d4:	40014400 	.word	0x40014400
 80086d8:	40014800 	.word	0x40014800

080086dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086dc:	b480      	push	{r7}
 80086de:	b087      	sub	sp, #28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a1b      	ldr	r3, [r3, #32]
 80086f0:	f023 0201 	bic.w	r2, r3, #1
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800870a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800870e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f023 0303 	bic.w	r3, r3, #3
 8008716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	4313      	orrs	r3, r2
 8008720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f023 0302 	bic.w	r3, r3, #2
 8008728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	4313      	orrs	r3, r2
 8008732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a2c      	ldr	r2, [pc, #176]	@ (80087e8 <TIM_OC1_SetConfig+0x10c>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d00f      	beq.n	800875c <TIM_OC1_SetConfig+0x80>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a2b      	ldr	r2, [pc, #172]	@ (80087ec <TIM_OC1_SetConfig+0x110>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d00b      	beq.n	800875c <TIM_OC1_SetConfig+0x80>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a2a      	ldr	r2, [pc, #168]	@ (80087f0 <TIM_OC1_SetConfig+0x114>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d007      	beq.n	800875c <TIM_OC1_SetConfig+0x80>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a29      	ldr	r2, [pc, #164]	@ (80087f4 <TIM_OC1_SetConfig+0x118>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d003      	beq.n	800875c <TIM_OC1_SetConfig+0x80>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a28      	ldr	r2, [pc, #160]	@ (80087f8 <TIM_OC1_SetConfig+0x11c>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d10c      	bne.n	8008776 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f023 0308 	bic.w	r3, r3, #8
 8008762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	4313      	orrs	r3, r2
 800876c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f023 0304 	bic.w	r3, r3, #4
 8008774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a1b      	ldr	r2, [pc, #108]	@ (80087e8 <TIM_OC1_SetConfig+0x10c>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d00f      	beq.n	800879e <TIM_OC1_SetConfig+0xc2>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a1a      	ldr	r2, [pc, #104]	@ (80087ec <TIM_OC1_SetConfig+0x110>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d00b      	beq.n	800879e <TIM_OC1_SetConfig+0xc2>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a19      	ldr	r2, [pc, #100]	@ (80087f0 <TIM_OC1_SetConfig+0x114>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d007      	beq.n	800879e <TIM_OC1_SetConfig+0xc2>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a18      	ldr	r2, [pc, #96]	@ (80087f4 <TIM_OC1_SetConfig+0x118>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d003      	beq.n	800879e <TIM_OC1_SetConfig+0xc2>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a17      	ldr	r2, [pc, #92]	@ (80087f8 <TIM_OC1_SetConfig+0x11c>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d111      	bne.n	80087c2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80087ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	4313      	orrs	r3, r2
 80087c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	685a      	ldr	r2, [r3, #4]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	621a      	str	r2, [r3, #32]
}
 80087dc:	bf00      	nop
 80087de:	371c      	adds	r7, #28
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	40012c00 	.word	0x40012c00
 80087ec:	40013400 	.word	0x40013400
 80087f0:	40014000 	.word	0x40014000
 80087f4:	40014400 	.word	0x40014400
 80087f8:	40014800 	.word	0x40014800

080087fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b087      	sub	sp, #28
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a1b      	ldr	r3, [r3, #32]
 800880a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a1b      	ldr	r3, [r3, #32]
 8008810:	f023 0210 	bic.w	r2, r3, #16
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	699b      	ldr	r3, [r3, #24]
 8008822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800882a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800882e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	021b      	lsls	r3, r3, #8
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	4313      	orrs	r3, r2
 8008842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f023 0320 	bic.w	r3, r3, #32
 800884a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	011b      	lsls	r3, r3, #4
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	4313      	orrs	r3, r2
 8008856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a28      	ldr	r2, [pc, #160]	@ (80088fc <TIM_OC2_SetConfig+0x100>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d003      	beq.n	8008868 <TIM_OC2_SetConfig+0x6c>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a27      	ldr	r2, [pc, #156]	@ (8008900 <TIM_OC2_SetConfig+0x104>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d10d      	bne.n	8008884 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800886e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	011b      	lsls	r3, r3, #4
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	4313      	orrs	r3, r2
 800887a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008882:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a1d      	ldr	r2, [pc, #116]	@ (80088fc <TIM_OC2_SetConfig+0x100>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d00f      	beq.n	80088ac <TIM_OC2_SetConfig+0xb0>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a1c      	ldr	r2, [pc, #112]	@ (8008900 <TIM_OC2_SetConfig+0x104>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d00b      	beq.n	80088ac <TIM_OC2_SetConfig+0xb0>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a1b      	ldr	r2, [pc, #108]	@ (8008904 <TIM_OC2_SetConfig+0x108>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d007      	beq.n	80088ac <TIM_OC2_SetConfig+0xb0>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a1a      	ldr	r2, [pc, #104]	@ (8008908 <TIM_OC2_SetConfig+0x10c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d003      	beq.n	80088ac <TIM_OC2_SetConfig+0xb0>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a19      	ldr	r2, [pc, #100]	@ (800890c <TIM_OC2_SetConfig+0x110>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d113      	bne.n	80088d4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80088b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80088ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	695b      	ldr	r3, [r3, #20]
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	621a      	str	r2, [r3, #32]
}
 80088ee:	bf00      	nop
 80088f0:	371c      	adds	r7, #28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	40012c00 	.word	0x40012c00
 8008900:	40013400 	.word	0x40013400
 8008904:	40014000 	.word	0x40014000
 8008908:	40014400 	.word	0x40014400
 800890c:	40014800 	.word	0x40014800

08008910 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008910:	b480      	push	{r7}
 8008912:	b087      	sub	sp, #28
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a1b      	ldr	r3, [r3, #32]
 8008924:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	69db      	ldr	r3, [r3, #28]
 8008936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800893e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 0303 	bic.w	r3, r3, #3
 800894a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	4313      	orrs	r3, r2
 8008954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800895c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	021b      	lsls	r3, r3, #8
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	4313      	orrs	r3, r2
 8008968:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a27      	ldr	r2, [pc, #156]	@ (8008a0c <TIM_OC3_SetConfig+0xfc>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d003      	beq.n	800897a <TIM_OC3_SetConfig+0x6a>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a26      	ldr	r2, [pc, #152]	@ (8008a10 <TIM_OC3_SetConfig+0x100>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d10d      	bne.n	8008996 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008980:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	021b      	lsls	r3, r3, #8
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	4313      	orrs	r3, r2
 800898c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a1c      	ldr	r2, [pc, #112]	@ (8008a0c <TIM_OC3_SetConfig+0xfc>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d00f      	beq.n	80089be <TIM_OC3_SetConfig+0xae>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a1b      	ldr	r2, [pc, #108]	@ (8008a10 <TIM_OC3_SetConfig+0x100>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d00b      	beq.n	80089be <TIM_OC3_SetConfig+0xae>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a1a      	ldr	r2, [pc, #104]	@ (8008a14 <TIM_OC3_SetConfig+0x104>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d007      	beq.n	80089be <TIM_OC3_SetConfig+0xae>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a19      	ldr	r2, [pc, #100]	@ (8008a18 <TIM_OC3_SetConfig+0x108>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d003      	beq.n	80089be <TIM_OC3_SetConfig+0xae>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a18      	ldr	r2, [pc, #96]	@ (8008a1c <TIM_OC3_SetConfig+0x10c>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d113      	bne.n	80089e6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80089cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	011b      	lsls	r3, r3, #4
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	011b      	lsls	r3, r3, #4
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	685a      	ldr	r2, [r3, #4]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	697a      	ldr	r2, [r7, #20]
 80089fe:	621a      	str	r2, [r3, #32]
}
 8008a00:	bf00      	nop
 8008a02:	371c      	adds	r7, #28
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr
 8008a0c:	40012c00 	.word	0x40012c00
 8008a10:	40013400 	.word	0x40013400
 8008a14:	40014000 	.word	0x40014000
 8008a18:	40014400 	.word	0x40014400
 8008a1c:	40014800 	.word	0x40014800

08008a20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a1b      	ldr	r3, [r3, #32]
 8008a34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	69db      	ldr	r3, [r3, #28]
 8008a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	021b      	lsls	r3, r3, #8
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	031b      	lsls	r3, r3, #12
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a28      	ldr	r2, [pc, #160]	@ (8008b20 <TIM_OC4_SetConfig+0x100>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d003      	beq.n	8008a8c <TIM_OC4_SetConfig+0x6c>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a27      	ldr	r2, [pc, #156]	@ (8008b24 <TIM_OC4_SetConfig+0x104>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d10d      	bne.n	8008aa8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	031b      	lsls	r3, r3, #12
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008aa6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8008b20 <TIM_OC4_SetConfig+0x100>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d00f      	beq.n	8008ad0 <TIM_OC4_SetConfig+0xb0>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8008b24 <TIM_OC4_SetConfig+0x104>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d00b      	beq.n	8008ad0 <TIM_OC4_SetConfig+0xb0>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a1b      	ldr	r2, [pc, #108]	@ (8008b28 <TIM_OC4_SetConfig+0x108>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d007      	beq.n	8008ad0 <TIM_OC4_SetConfig+0xb0>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8008b2c <TIM_OC4_SetConfig+0x10c>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d003      	beq.n	8008ad0 <TIM_OC4_SetConfig+0xb0>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a19      	ldr	r2, [pc, #100]	@ (8008b30 <TIM_OC4_SetConfig+0x110>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d113      	bne.n	8008af8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ad6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ade:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	695b      	ldr	r3, [r3, #20]
 8008ae4:	019b      	lsls	r3, r3, #6
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	019b      	lsls	r3, r3, #6
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	693a      	ldr	r2, [r7, #16]
 8008afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	621a      	str	r2, [r3, #32]
}
 8008b12:	bf00      	nop
 8008b14:	371c      	adds	r7, #28
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	40012c00 	.word	0x40012c00
 8008b24:	40013400 	.word	0x40013400
 8008b28:	40014000 	.word	0x40014000
 8008b2c:	40014400 	.word	0x40014400
 8008b30:	40014800 	.word	0x40014800

08008b34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b087      	sub	sp, #28
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a1b      	ldr	r3, [r3, #32]
 8008b42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a1b      	ldr	r3, [r3, #32]
 8008b48:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008b78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	041b      	lsls	r3, r3, #16
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a17      	ldr	r2, [pc, #92]	@ (8008be8 <TIM_OC5_SetConfig+0xb4>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d00f      	beq.n	8008bae <TIM_OC5_SetConfig+0x7a>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a16      	ldr	r2, [pc, #88]	@ (8008bec <TIM_OC5_SetConfig+0xb8>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d00b      	beq.n	8008bae <TIM_OC5_SetConfig+0x7a>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a15      	ldr	r2, [pc, #84]	@ (8008bf0 <TIM_OC5_SetConfig+0xbc>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d007      	beq.n	8008bae <TIM_OC5_SetConfig+0x7a>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a14      	ldr	r2, [pc, #80]	@ (8008bf4 <TIM_OC5_SetConfig+0xc0>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d003      	beq.n	8008bae <TIM_OC5_SetConfig+0x7a>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a13      	ldr	r2, [pc, #76]	@ (8008bf8 <TIM_OC5_SetConfig+0xc4>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d109      	bne.n	8008bc2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	021b      	lsls	r3, r3, #8
 8008bbc:	697a      	ldr	r2, [r7, #20]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	621a      	str	r2, [r3, #32]
}
 8008bdc:	bf00      	nop
 8008bde:	371c      	adds	r7, #28
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr
 8008be8:	40012c00 	.word	0x40012c00
 8008bec:	40013400 	.word	0x40013400
 8008bf0:	40014000 	.word	0x40014000
 8008bf4:	40014400 	.word	0x40014400
 8008bf8:	40014800 	.word	0x40014800

08008bfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b087      	sub	sp, #28
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a1b      	ldr	r3, [r3, #32]
 8008c10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	021b      	lsls	r3, r3, #8
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008c42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	051b      	lsls	r3, r3, #20
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a18      	ldr	r2, [pc, #96]	@ (8008cb4 <TIM_OC6_SetConfig+0xb8>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d00f      	beq.n	8008c78 <TIM_OC6_SetConfig+0x7c>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a17      	ldr	r2, [pc, #92]	@ (8008cb8 <TIM_OC6_SetConfig+0xbc>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d00b      	beq.n	8008c78 <TIM_OC6_SetConfig+0x7c>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a16      	ldr	r2, [pc, #88]	@ (8008cbc <TIM_OC6_SetConfig+0xc0>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d007      	beq.n	8008c78 <TIM_OC6_SetConfig+0x7c>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a15      	ldr	r2, [pc, #84]	@ (8008cc0 <TIM_OC6_SetConfig+0xc4>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d003      	beq.n	8008c78 <TIM_OC6_SetConfig+0x7c>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a14      	ldr	r2, [pc, #80]	@ (8008cc4 <TIM_OC6_SetConfig+0xc8>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d109      	bne.n	8008c8c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	695b      	ldr	r3, [r3, #20]
 8008c84:	029b      	lsls	r3, r3, #10
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	621a      	str	r2, [r3, #32]
}
 8008ca6:	bf00      	nop
 8008ca8:	371c      	adds	r7, #28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	40012c00 	.word	0x40012c00
 8008cb8:	40013400 	.word	0x40013400
 8008cbc:	40014000 	.word	0x40014000
 8008cc0:	40014400 	.word	0x40014400
 8008cc4:	40014800 	.word	0x40014800

08008cc8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b087      	sub	sp, #28
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
 8008cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6a1b      	ldr	r3, [r3, #32]
 8008ce0:	f023 0201 	bic.w	r2, r3, #1
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	4a24      	ldr	r2, [pc, #144]	@ (8008d84 <TIM_TI1_SetConfig+0xbc>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d013      	beq.n	8008d1e <TIM_TI1_SetConfig+0x56>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cfc:	d00f      	beq.n	8008d1e <TIM_TI1_SetConfig+0x56>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	4a21      	ldr	r2, [pc, #132]	@ (8008d88 <TIM_TI1_SetConfig+0xc0>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d00b      	beq.n	8008d1e <TIM_TI1_SetConfig+0x56>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	4a20      	ldr	r2, [pc, #128]	@ (8008d8c <TIM_TI1_SetConfig+0xc4>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d007      	beq.n	8008d1e <TIM_TI1_SetConfig+0x56>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	4a1f      	ldr	r2, [pc, #124]	@ (8008d90 <TIM_TI1_SetConfig+0xc8>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d003      	beq.n	8008d1e <TIM_TI1_SetConfig+0x56>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	4a1e      	ldr	r2, [pc, #120]	@ (8008d94 <TIM_TI1_SetConfig+0xcc>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d101      	bne.n	8008d22 <TIM_TI1_SetConfig+0x5a>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e000      	b.n	8008d24 <TIM_TI1_SetConfig+0x5c>
 8008d22:	2300      	movs	r3, #0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d008      	beq.n	8008d3a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	f023 0303 	bic.w	r3, r3, #3
 8008d2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	617b      	str	r3, [r7, #20]
 8008d38:	e003      	b.n	8008d42 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f043 0301 	orr.w	r3, r3, #1
 8008d40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	011b      	lsls	r3, r3, #4
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	f023 030a 	bic.w	r3, r3, #10
 8008d5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	f003 030a 	and.w	r3, r3, #10
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	621a      	str	r2, [r3, #32]
}
 8008d76:	bf00      	nop
 8008d78:	371c      	adds	r7, #28
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	40012c00 	.word	0x40012c00
 8008d88:	40000400 	.word	0x40000400
 8008d8c:	40000800 	.word	0x40000800
 8008d90:	40013400 	.word	0x40013400
 8008d94:	40014000 	.word	0x40014000

08008d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b087      	sub	sp, #28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6a1b      	ldr	r3, [r3, #32]
 8008da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6a1b      	ldr	r3, [r3, #32]
 8008dae:	f023 0201 	bic.w	r2, r3, #1
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	011b      	lsls	r3, r3, #4
 8008dc8:	693a      	ldr	r2, [r7, #16]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	f023 030a 	bic.w	r3, r3, #10
 8008dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	621a      	str	r2, [r3, #32]
}
 8008dea:	bf00      	nop
 8008dec:	371c      	adds	r7, #28
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008df6:	b480      	push	{r7}
 8008df8:	b087      	sub	sp, #28
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	60f8      	str	r0, [r7, #12]
 8008dfe:	60b9      	str	r1, [r7, #8]
 8008e00:	607a      	str	r2, [r7, #4]
 8008e02:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6a1b      	ldr	r3, [r3, #32]
 8008e08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	f023 0210 	bic.w	r2, r3, #16
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	021b      	lsls	r3, r3, #8
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	031b      	lsls	r3, r3, #12
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e48:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	011b      	lsls	r3, r3, #4
 8008e4e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008e52:	697a      	ldr	r2, [r7, #20]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	697a      	ldr	r2, [r7, #20]
 8008e62:	621a      	str	r2, [r3, #32]
}
 8008e64:	bf00      	nop
 8008e66:	371c      	adds	r7, #28
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6a1b      	ldr	r3, [r3, #32]
 8008e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6a1b      	ldr	r3, [r3, #32]
 8008e86:	f023 0210 	bic.w	r2, r3, #16
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	031b      	lsls	r3, r3, #12
 8008ea0:	693a      	ldr	r2, [r7, #16]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008eac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	011b      	lsls	r3, r3, #4
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	621a      	str	r2, [r3, #32]
}
 8008ec4:	bf00      	nop
 8008ec6:	371c      	adds	r7, #28
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b087      	sub	sp, #28
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
 8008edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6a1b      	ldr	r3, [r3, #32]
 8008ee8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	69db      	ldr	r3, [r3, #28]
 8008ef4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	f023 0303 	bic.w	r3, r3, #3
 8008efc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f0c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	011b      	lsls	r3, r3, #4
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008f20:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	021b      	lsls	r3, r3, #8
 8008f26:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	621a      	str	r2, [r3, #32]
}
 8008f3c:	bf00      	nop
 8008f3e:	371c      	adds	r7, #28
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b087      	sub	sp, #28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
 8008f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6a1b      	ldr	r3, [r3, #32]
 8008f5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6a1b      	ldr	r3, [r3, #32]
 8008f60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f74:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	021b      	lsls	r3, r3, #8
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f86:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	031b      	lsls	r3, r3, #12
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008f9a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	031b      	lsls	r3, r3, #12
 8008fa0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008fa4:	697a      	ldr	r2, [r7, #20]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	697a      	ldr	r2, [r7, #20]
 8008fb4:	621a      	str	r2, [r3, #32]
}
 8008fb6:	bf00      	nop
 8008fb8:	371c      	adds	r7, #28
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fc2:	b480      	push	{r7}
 8008fc4:	b085      	sub	sp, #20
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
 8008fca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	f043 0307 	orr.w	r3, r3, #7
 8008fe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	609a      	str	r2, [r3, #8]
}
 8008ff0:	bf00      	nop
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
 8009008:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009016:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	021a      	lsls	r2, r3, #8
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	431a      	orrs	r2, r3
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	4313      	orrs	r3, r2
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	4313      	orrs	r3, r2
 8009028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	609a      	str	r2, [r3, #8]
}
 8009030:	bf00      	nop
 8009032:	371c      	adds	r7, #28
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800903c:	b480      	push	{r7}
 800903e:	b087      	sub	sp, #28
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	f003 031f 	and.w	r3, r3, #31
 800904e:	2201      	movs	r2, #1
 8009050:	fa02 f303 	lsl.w	r3, r2, r3
 8009054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6a1a      	ldr	r2, [r3, #32]
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	43db      	mvns	r3, r3
 800905e:	401a      	ands	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6a1a      	ldr	r2, [r3, #32]
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	f003 031f 	and.w	r3, r3, #31
 800906e:	6879      	ldr	r1, [r7, #4]
 8009070:	fa01 f303 	lsl.w	r3, r1, r3
 8009074:	431a      	orrs	r2, r3
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	621a      	str	r2, [r3, #32]
}
 800907a:	bf00      	nop
 800907c:	371c      	adds	r7, #28
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
	...

08009088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009098:	2b01      	cmp	r3, #1
 800909a:	d101      	bne.n	80090a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800909c:	2302      	movs	r3, #2
 800909e:	e065      	b.n	800916c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2202      	movs	r2, #2
 80090ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a2c      	ldr	r2, [pc, #176]	@ (8009178 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d004      	beq.n	80090d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a2b      	ldr	r2, [pc, #172]	@ (800917c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d108      	bne.n	80090e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80090da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80090ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a1b      	ldr	r2, [pc, #108]	@ (8009178 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d018      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009116:	d013      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a18      	ldr	r2, [pc, #96]	@ (8009180 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d00e      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a17      	ldr	r2, [pc, #92]	@ (8009184 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d009      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a12      	ldr	r2, [pc, #72]	@ (800917c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d004      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a13      	ldr	r2, [pc, #76]	@ (8009188 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d10c      	bne.n	800915a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009146:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	4313      	orrs	r3, r2
 8009150:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	40012c00 	.word	0x40012c00
 800917c:	40013400 	.word	0x40013400
 8009180:	40000400 	.word	0x40000400
 8009184:	40000800 	.word	0x40000800
 8009188:	40014000 	.word	0x40014000

0800918c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80091f8:	bf00      	nop
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d101      	bne.n	800922a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e042      	b.n	80092b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009230:	2b00      	cmp	r3, #0
 8009232:	d106      	bne.n	8009242 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7f9 fca1 	bl	8002b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2224      	movs	r2, #36	@ 0x24
 8009246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f022 0201 	bic.w	r2, r2, #1
 8009258:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800925e:	2b00      	cmp	r3, #0
 8009260:	d002      	beq.n	8009268 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fb82 	bl	800996c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f8b3 	bl	80093d4 <UART_SetConfig>
 800926e:	4603      	mov	r3, r0
 8009270:	2b01      	cmp	r3, #1
 8009272:	d101      	bne.n	8009278 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	e01b      	b.n	80092b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	685a      	ldr	r2, [r3, #4]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009286:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	689a      	ldr	r2, [r3, #8]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009296:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f042 0201 	orr.w	r2, r2, #1
 80092a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fc01 	bl	8009ab0 <UART_CheckIdleState>
 80092ae:	4603      	mov	r3, r0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08a      	sub	sp, #40	@ 0x28
 80092bc:	af02      	add	r7, sp, #8
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	603b      	str	r3, [r7, #0]
 80092c4:	4613      	mov	r3, r2
 80092c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092ce:	2b20      	cmp	r3, #32
 80092d0:	d17b      	bne.n	80093ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d002      	beq.n	80092de <HAL_UART_Transmit+0x26>
 80092d8:	88fb      	ldrh	r3, [r7, #6]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d101      	bne.n	80092e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	e074      	b.n	80093cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2221      	movs	r2, #33	@ 0x21
 80092ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092f2:	f7fa f8c1 	bl	8003478 <HAL_GetTick>
 80092f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	88fa      	ldrh	r2, [r7, #6]
 80092fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	88fa      	ldrh	r2, [r7, #6]
 8009304:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009310:	d108      	bne.n	8009324 <HAL_UART_Transmit+0x6c>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d104      	bne.n	8009324 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800931a:	2300      	movs	r3, #0
 800931c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	61bb      	str	r3, [r7, #24]
 8009322:	e003      	b.n	800932c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009328:	2300      	movs	r3, #0
 800932a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800932c:	e030      	b.n	8009390 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	2200      	movs	r2, #0
 8009336:	2180      	movs	r1, #128	@ 0x80
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f000 fc63 	bl	8009c04 <UART_WaitOnFlagUntilTimeout>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d005      	beq.n	8009350 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2220      	movs	r2, #32
 8009348:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800934c:	2303      	movs	r3, #3
 800934e:	e03d      	b.n	80093cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10b      	bne.n	800936e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	461a      	mov	r2, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009364:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	3302      	adds	r3, #2
 800936a:	61bb      	str	r3, [r7, #24]
 800936c:	e007      	b.n	800937e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	781a      	ldrb	r2, [r3, #0]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	3301      	adds	r3, #1
 800937c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009384:	b29b      	uxth	r3, r3
 8009386:	3b01      	subs	r3, #1
 8009388:	b29a      	uxth	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009396:	b29b      	uxth	r3, r3
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1c8      	bne.n	800932e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	2200      	movs	r2, #0
 80093a4:	2140      	movs	r1, #64	@ 0x40
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f000 fc2c 	bl	8009c04 <UART_WaitOnFlagUntilTimeout>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d005      	beq.n	80093be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2220      	movs	r2, #32
 80093b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e006      	b.n	80093cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2220      	movs	r2, #32
 80093c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	e000      	b.n	80093cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80093ca:	2302      	movs	r3, #2
  }
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3720      	adds	r7, #32
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093d8:	b08c      	sub	sp, #48	@ 0x30
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	431a      	orrs	r2, r3
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	431a      	orrs	r2, r3
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	69db      	ldr	r3, [r3, #28]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	4bab      	ldr	r3, [pc, #684]	@ (80096b0 <UART_SetConfig+0x2dc>)
 8009404:	4013      	ands	r3, r2
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	6812      	ldr	r2, [r2, #0]
 800940a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800940c:	430b      	orrs	r3, r1
 800940e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	68da      	ldr	r2, [r3, #12]
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	430a      	orrs	r2, r1
 8009424:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4aa0      	ldr	r2, [pc, #640]	@ (80096b4 <UART_SetConfig+0x2e0>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d004      	beq.n	8009440 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	6a1b      	ldr	r3, [r3, #32]
 800943a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800943c:	4313      	orrs	r3, r2
 800943e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800944a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800944e:	697a      	ldr	r2, [r7, #20]
 8009450:	6812      	ldr	r2, [r2, #0]
 8009452:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009454:	430b      	orrs	r3, r1
 8009456:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945e:	f023 010f 	bic.w	r1, r3, #15
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	430a      	orrs	r2, r1
 800946c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a91      	ldr	r2, [pc, #580]	@ (80096b8 <UART_SetConfig+0x2e4>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d125      	bne.n	80094c4 <UART_SetConfig+0xf0>
 8009478:	4b90      	ldr	r3, [pc, #576]	@ (80096bc <UART_SetConfig+0x2e8>)
 800947a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800947e:	f003 0303 	and.w	r3, r3, #3
 8009482:	2b03      	cmp	r3, #3
 8009484:	d81a      	bhi.n	80094bc <UART_SetConfig+0xe8>
 8009486:	a201      	add	r2, pc, #4	@ (adr r2, 800948c <UART_SetConfig+0xb8>)
 8009488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948c:	0800949d 	.word	0x0800949d
 8009490:	080094ad 	.word	0x080094ad
 8009494:	080094a5 	.word	0x080094a5
 8009498:	080094b5 	.word	0x080094b5
 800949c:	2301      	movs	r3, #1
 800949e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094a2:	e0d6      	b.n	8009652 <UART_SetConfig+0x27e>
 80094a4:	2302      	movs	r3, #2
 80094a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094aa:	e0d2      	b.n	8009652 <UART_SetConfig+0x27e>
 80094ac:	2304      	movs	r3, #4
 80094ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094b2:	e0ce      	b.n	8009652 <UART_SetConfig+0x27e>
 80094b4:	2308      	movs	r3, #8
 80094b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094ba:	e0ca      	b.n	8009652 <UART_SetConfig+0x27e>
 80094bc:	2310      	movs	r3, #16
 80094be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094c2:	e0c6      	b.n	8009652 <UART_SetConfig+0x27e>
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a7d      	ldr	r2, [pc, #500]	@ (80096c0 <UART_SetConfig+0x2ec>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d138      	bne.n	8009540 <UART_SetConfig+0x16c>
 80094ce:	4b7b      	ldr	r3, [pc, #492]	@ (80096bc <UART_SetConfig+0x2e8>)
 80094d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094d4:	f003 030c 	and.w	r3, r3, #12
 80094d8:	2b0c      	cmp	r3, #12
 80094da:	d82d      	bhi.n	8009538 <UART_SetConfig+0x164>
 80094dc:	a201      	add	r2, pc, #4	@ (adr r2, 80094e4 <UART_SetConfig+0x110>)
 80094de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e2:	bf00      	nop
 80094e4:	08009519 	.word	0x08009519
 80094e8:	08009539 	.word	0x08009539
 80094ec:	08009539 	.word	0x08009539
 80094f0:	08009539 	.word	0x08009539
 80094f4:	08009529 	.word	0x08009529
 80094f8:	08009539 	.word	0x08009539
 80094fc:	08009539 	.word	0x08009539
 8009500:	08009539 	.word	0x08009539
 8009504:	08009521 	.word	0x08009521
 8009508:	08009539 	.word	0x08009539
 800950c:	08009539 	.word	0x08009539
 8009510:	08009539 	.word	0x08009539
 8009514:	08009531 	.word	0x08009531
 8009518:	2300      	movs	r3, #0
 800951a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800951e:	e098      	b.n	8009652 <UART_SetConfig+0x27e>
 8009520:	2302      	movs	r3, #2
 8009522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009526:	e094      	b.n	8009652 <UART_SetConfig+0x27e>
 8009528:	2304      	movs	r3, #4
 800952a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800952e:	e090      	b.n	8009652 <UART_SetConfig+0x27e>
 8009530:	2308      	movs	r3, #8
 8009532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009536:	e08c      	b.n	8009652 <UART_SetConfig+0x27e>
 8009538:	2310      	movs	r3, #16
 800953a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800953e:	e088      	b.n	8009652 <UART_SetConfig+0x27e>
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a5f      	ldr	r2, [pc, #380]	@ (80096c4 <UART_SetConfig+0x2f0>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d125      	bne.n	8009596 <UART_SetConfig+0x1c2>
 800954a:	4b5c      	ldr	r3, [pc, #368]	@ (80096bc <UART_SetConfig+0x2e8>)
 800954c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009550:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009554:	2b30      	cmp	r3, #48	@ 0x30
 8009556:	d016      	beq.n	8009586 <UART_SetConfig+0x1b2>
 8009558:	2b30      	cmp	r3, #48	@ 0x30
 800955a:	d818      	bhi.n	800958e <UART_SetConfig+0x1ba>
 800955c:	2b20      	cmp	r3, #32
 800955e:	d00a      	beq.n	8009576 <UART_SetConfig+0x1a2>
 8009560:	2b20      	cmp	r3, #32
 8009562:	d814      	bhi.n	800958e <UART_SetConfig+0x1ba>
 8009564:	2b00      	cmp	r3, #0
 8009566:	d002      	beq.n	800956e <UART_SetConfig+0x19a>
 8009568:	2b10      	cmp	r3, #16
 800956a:	d008      	beq.n	800957e <UART_SetConfig+0x1aa>
 800956c:	e00f      	b.n	800958e <UART_SetConfig+0x1ba>
 800956e:	2300      	movs	r3, #0
 8009570:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009574:	e06d      	b.n	8009652 <UART_SetConfig+0x27e>
 8009576:	2302      	movs	r3, #2
 8009578:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800957c:	e069      	b.n	8009652 <UART_SetConfig+0x27e>
 800957e:	2304      	movs	r3, #4
 8009580:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009584:	e065      	b.n	8009652 <UART_SetConfig+0x27e>
 8009586:	2308      	movs	r3, #8
 8009588:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800958c:	e061      	b.n	8009652 <UART_SetConfig+0x27e>
 800958e:	2310      	movs	r3, #16
 8009590:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009594:	e05d      	b.n	8009652 <UART_SetConfig+0x27e>
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a4b      	ldr	r2, [pc, #300]	@ (80096c8 <UART_SetConfig+0x2f4>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d125      	bne.n	80095ec <UART_SetConfig+0x218>
 80095a0:	4b46      	ldr	r3, [pc, #280]	@ (80096bc <UART_SetConfig+0x2e8>)
 80095a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80095aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80095ac:	d016      	beq.n	80095dc <UART_SetConfig+0x208>
 80095ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80095b0:	d818      	bhi.n	80095e4 <UART_SetConfig+0x210>
 80095b2:	2b80      	cmp	r3, #128	@ 0x80
 80095b4:	d00a      	beq.n	80095cc <UART_SetConfig+0x1f8>
 80095b6:	2b80      	cmp	r3, #128	@ 0x80
 80095b8:	d814      	bhi.n	80095e4 <UART_SetConfig+0x210>
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d002      	beq.n	80095c4 <UART_SetConfig+0x1f0>
 80095be:	2b40      	cmp	r3, #64	@ 0x40
 80095c0:	d008      	beq.n	80095d4 <UART_SetConfig+0x200>
 80095c2:	e00f      	b.n	80095e4 <UART_SetConfig+0x210>
 80095c4:	2300      	movs	r3, #0
 80095c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095ca:	e042      	b.n	8009652 <UART_SetConfig+0x27e>
 80095cc:	2302      	movs	r3, #2
 80095ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095d2:	e03e      	b.n	8009652 <UART_SetConfig+0x27e>
 80095d4:	2304      	movs	r3, #4
 80095d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095da:	e03a      	b.n	8009652 <UART_SetConfig+0x27e>
 80095dc:	2308      	movs	r3, #8
 80095de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095e2:	e036      	b.n	8009652 <UART_SetConfig+0x27e>
 80095e4:	2310      	movs	r3, #16
 80095e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095ea:	e032      	b.n	8009652 <UART_SetConfig+0x27e>
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a30      	ldr	r2, [pc, #192]	@ (80096b4 <UART_SetConfig+0x2e0>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d12a      	bne.n	800964c <UART_SetConfig+0x278>
 80095f6:	4b31      	ldr	r3, [pc, #196]	@ (80096bc <UART_SetConfig+0x2e8>)
 80095f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009600:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009604:	d01a      	beq.n	800963c <UART_SetConfig+0x268>
 8009606:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800960a:	d81b      	bhi.n	8009644 <UART_SetConfig+0x270>
 800960c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009610:	d00c      	beq.n	800962c <UART_SetConfig+0x258>
 8009612:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009616:	d815      	bhi.n	8009644 <UART_SetConfig+0x270>
 8009618:	2b00      	cmp	r3, #0
 800961a:	d003      	beq.n	8009624 <UART_SetConfig+0x250>
 800961c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009620:	d008      	beq.n	8009634 <UART_SetConfig+0x260>
 8009622:	e00f      	b.n	8009644 <UART_SetConfig+0x270>
 8009624:	2300      	movs	r3, #0
 8009626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800962a:	e012      	b.n	8009652 <UART_SetConfig+0x27e>
 800962c:	2302      	movs	r3, #2
 800962e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009632:	e00e      	b.n	8009652 <UART_SetConfig+0x27e>
 8009634:	2304      	movs	r3, #4
 8009636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800963a:	e00a      	b.n	8009652 <UART_SetConfig+0x27e>
 800963c:	2308      	movs	r3, #8
 800963e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009642:	e006      	b.n	8009652 <UART_SetConfig+0x27e>
 8009644:	2310      	movs	r3, #16
 8009646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800964a:	e002      	b.n	8009652 <UART_SetConfig+0x27e>
 800964c:	2310      	movs	r3, #16
 800964e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a17      	ldr	r2, [pc, #92]	@ (80096b4 <UART_SetConfig+0x2e0>)
 8009658:	4293      	cmp	r3, r2
 800965a:	f040 80a8 	bne.w	80097ae <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800965e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009662:	2b08      	cmp	r3, #8
 8009664:	d834      	bhi.n	80096d0 <UART_SetConfig+0x2fc>
 8009666:	a201      	add	r2, pc, #4	@ (adr r2, 800966c <UART_SetConfig+0x298>)
 8009668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966c:	08009691 	.word	0x08009691
 8009670:	080096d1 	.word	0x080096d1
 8009674:	08009699 	.word	0x08009699
 8009678:	080096d1 	.word	0x080096d1
 800967c:	0800969f 	.word	0x0800969f
 8009680:	080096d1 	.word	0x080096d1
 8009684:	080096d1 	.word	0x080096d1
 8009688:	080096d1 	.word	0x080096d1
 800968c:	080096a7 	.word	0x080096a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009690:	f7fc fff6 	bl	8006680 <HAL_RCC_GetPCLK1Freq>
 8009694:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009696:	e021      	b.n	80096dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009698:	4b0c      	ldr	r3, [pc, #48]	@ (80096cc <UART_SetConfig+0x2f8>)
 800969a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800969c:	e01e      	b.n	80096dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800969e:	f7fc ff81 	bl	80065a4 <HAL_RCC_GetSysClockFreq>
 80096a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80096a4:	e01a      	b.n	80096dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80096ac:	e016      	b.n	80096dc <UART_SetConfig+0x308>
 80096ae:	bf00      	nop
 80096b0:	cfff69f3 	.word	0xcfff69f3
 80096b4:	40008000 	.word	0x40008000
 80096b8:	40013800 	.word	0x40013800
 80096bc:	40021000 	.word	0x40021000
 80096c0:	40004400 	.word	0x40004400
 80096c4:	40004800 	.word	0x40004800
 80096c8:	40004c00 	.word	0x40004c00
 80096cc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80096d0:	2300      	movs	r3, #0
 80096d2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80096da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80096dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f000 812a 	beq.w	8009938 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096e8:	4a9e      	ldr	r2, [pc, #632]	@ (8009964 <UART_SetConfig+0x590>)
 80096ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096ee:	461a      	mov	r2, r3
 80096f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80096f6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	4613      	mov	r3, r2
 80096fe:	005b      	lsls	r3, r3, #1
 8009700:	4413      	add	r3, r2
 8009702:	69ba      	ldr	r2, [r7, #24]
 8009704:	429a      	cmp	r2, r3
 8009706:	d305      	bcc.n	8009714 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800970e:	69ba      	ldr	r2, [r7, #24]
 8009710:	429a      	cmp	r2, r3
 8009712:	d903      	bls.n	800971c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800971a:	e10d      	b.n	8009938 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800971c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971e:	2200      	movs	r2, #0
 8009720:	60bb      	str	r3, [r7, #8]
 8009722:	60fa      	str	r2, [r7, #12]
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009728:	4a8e      	ldr	r2, [pc, #568]	@ (8009964 <UART_SetConfig+0x590>)
 800972a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800972e:	b29b      	uxth	r3, r3
 8009730:	2200      	movs	r2, #0
 8009732:	603b      	str	r3, [r7, #0]
 8009734:	607a      	str	r2, [r7, #4]
 8009736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800973a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800973e:	f7f7 f9bd 	bl	8000abc <__aeabi_uldivmod>
 8009742:	4602      	mov	r2, r0
 8009744:	460b      	mov	r3, r1
 8009746:	4610      	mov	r0, r2
 8009748:	4619      	mov	r1, r3
 800974a:	f04f 0200 	mov.w	r2, #0
 800974e:	f04f 0300 	mov.w	r3, #0
 8009752:	020b      	lsls	r3, r1, #8
 8009754:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009758:	0202      	lsls	r2, r0, #8
 800975a:	6979      	ldr	r1, [r7, #20]
 800975c:	6849      	ldr	r1, [r1, #4]
 800975e:	0849      	lsrs	r1, r1, #1
 8009760:	2000      	movs	r0, #0
 8009762:	460c      	mov	r4, r1
 8009764:	4605      	mov	r5, r0
 8009766:	eb12 0804 	adds.w	r8, r2, r4
 800976a:	eb43 0905 	adc.w	r9, r3, r5
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	469a      	mov	sl, r3
 8009776:	4693      	mov	fp, r2
 8009778:	4652      	mov	r2, sl
 800977a:	465b      	mov	r3, fp
 800977c:	4640      	mov	r0, r8
 800977e:	4649      	mov	r1, r9
 8009780:	f7f7 f99c 	bl	8000abc <__aeabi_uldivmod>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	4613      	mov	r3, r2
 800978a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800978c:	6a3b      	ldr	r3, [r7, #32]
 800978e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009792:	d308      	bcc.n	80097a6 <UART_SetConfig+0x3d2>
 8009794:	6a3b      	ldr	r3, [r7, #32]
 8009796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800979a:	d204      	bcs.n	80097a6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	6a3a      	ldr	r2, [r7, #32]
 80097a2:	60da      	str	r2, [r3, #12]
 80097a4:	e0c8      	b.n	8009938 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80097ac:	e0c4      	b.n	8009938 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	69db      	ldr	r3, [r3, #28]
 80097b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097b6:	d167      	bne.n	8009888 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80097b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80097bc:	2b08      	cmp	r3, #8
 80097be:	d828      	bhi.n	8009812 <UART_SetConfig+0x43e>
 80097c0:	a201      	add	r2, pc, #4	@ (adr r2, 80097c8 <UART_SetConfig+0x3f4>)
 80097c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c6:	bf00      	nop
 80097c8:	080097ed 	.word	0x080097ed
 80097cc:	080097f5 	.word	0x080097f5
 80097d0:	080097fd 	.word	0x080097fd
 80097d4:	08009813 	.word	0x08009813
 80097d8:	08009803 	.word	0x08009803
 80097dc:	08009813 	.word	0x08009813
 80097e0:	08009813 	.word	0x08009813
 80097e4:	08009813 	.word	0x08009813
 80097e8:	0800980b 	.word	0x0800980b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097ec:	f7fc ff48 	bl	8006680 <HAL_RCC_GetPCLK1Freq>
 80097f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80097f2:	e014      	b.n	800981e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097f4:	f7fc ff5a 	bl	80066ac <HAL_RCC_GetPCLK2Freq>
 80097f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80097fa:	e010      	b.n	800981e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097fc:	4b5a      	ldr	r3, [pc, #360]	@ (8009968 <UART_SetConfig+0x594>)
 80097fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009800:	e00d      	b.n	800981e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009802:	f7fc fecf 	bl	80065a4 <HAL_RCC_GetSysClockFreq>
 8009806:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009808:	e009      	b.n	800981e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800980a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800980e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009810:	e005      	b.n	800981e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009812:	2300      	movs	r3, #0
 8009814:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800981c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800981e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009820:	2b00      	cmp	r3, #0
 8009822:	f000 8089 	beq.w	8009938 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800982a:	4a4e      	ldr	r2, [pc, #312]	@ (8009964 <UART_SetConfig+0x590>)
 800982c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009830:	461a      	mov	r2, r3
 8009832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009834:	fbb3 f3f2 	udiv	r3, r3, r2
 8009838:	005a      	lsls	r2, r3, #1
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	085b      	lsrs	r3, r3, #1
 8009840:	441a      	add	r2, r3
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	fbb2 f3f3 	udiv	r3, r2, r3
 800984a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800984c:	6a3b      	ldr	r3, [r7, #32]
 800984e:	2b0f      	cmp	r3, #15
 8009850:	d916      	bls.n	8009880 <UART_SetConfig+0x4ac>
 8009852:	6a3b      	ldr	r3, [r7, #32]
 8009854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009858:	d212      	bcs.n	8009880 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800985a:	6a3b      	ldr	r3, [r7, #32]
 800985c:	b29b      	uxth	r3, r3
 800985e:	f023 030f 	bic.w	r3, r3, #15
 8009862:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	085b      	lsrs	r3, r3, #1
 8009868:	b29b      	uxth	r3, r3
 800986a:	f003 0307 	and.w	r3, r3, #7
 800986e:	b29a      	uxth	r2, r3
 8009870:	8bfb      	ldrh	r3, [r7, #30]
 8009872:	4313      	orrs	r3, r2
 8009874:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	8bfa      	ldrh	r2, [r7, #30]
 800987c:	60da      	str	r2, [r3, #12]
 800987e:	e05b      	b.n	8009938 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009886:	e057      	b.n	8009938 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009888:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800988c:	2b08      	cmp	r3, #8
 800988e:	d828      	bhi.n	80098e2 <UART_SetConfig+0x50e>
 8009890:	a201      	add	r2, pc, #4	@ (adr r2, 8009898 <UART_SetConfig+0x4c4>)
 8009892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009896:	bf00      	nop
 8009898:	080098bd 	.word	0x080098bd
 800989c:	080098c5 	.word	0x080098c5
 80098a0:	080098cd 	.word	0x080098cd
 80098a4:	080098e3 	.word	0x080098e3
 80098a8:	080098d3 	.word	0x080098d3
 80098ac:	080098e3 	.word	0x080098e3
 80098b0:	080098e3 	.word	0x080098e3
 80098b4:	080098e3 	.word	0x080098e3
 80098b8:	080098db 	.word	0x080098db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098bc:	f7fc fee0 	bl	8006680 <HAL_RCC_GetPCLK1Freq>
 80098c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80098c2:	e014      	b.n	80098ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098c4:	f7fc fef2 	bl	80066ac <HAL_RCC_GetPCLK2Freq>
 80098c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80098ca:	e010      	b.n	80098ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098cc:	4b26      	ldr	r3, [pc, #152]	@ (8009968 <UART_SetConfig+0x594>)
 80098ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80098d0:	e00d      	b.n	80098ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098d2:	f7fc fe67 	bl	80065a4 <HAL_RCC_GetSysClockFreq>
 80098d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80098d8:	e009      	b.n	80098ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80098e0:	e005      	b.n	80098ee <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80098e2:	2300      	movs	r3, #0
 80098e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80098ec:	bf00      	nop
    }

    if (pclk != 0U)
 80098ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d021      	beq.n	8009938 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098f8:	4a1a      	ldr	r2, [pc, #104]	@ (8009964 <UART_SetConfig+0x590>)
 80098fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098fe:	461a      	mov	r2, r3
 8009900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009902:	fbb3 f2f2 	udiv	r2, r3, r2
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	085b      	lsrs	r3, r3, #1
 800990c:	441a      	add	r2, r3
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	fbb2 f3f3 	udiv	r3, r2, r3
 8009916:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009918:	6a3b      	ldr	r3, [r7, #32]
 800991a:	2b0f      	cmp	r3, #15
 800991c:	d909      	bls.n	8009932 <UART_SetConfig+0x55e>
 800991e:	6a3b      	ldr	r3, [r7, #32]
 8009920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009924:	d205      	bcs.n	8009932 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	b29a      	uxth	r2, r3
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	60da      	str	r2, [r3, #12]
 8009930:	e002      	b.n	8009938 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	2201      	movs	r2, #1
 800993c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	2201      	movs	r2, #1
 8009944:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	2200      	movs	r2, #0
 800994c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	2200      	movs	r2, #0
 8009952:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009954:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009958:	4618      	mov	r0, r3
 800995a:	3730      	adds	r7, #48	@ 0x30
 800995c:	46bd      	mov	sp, r7
 800995e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009962:	bf00      	nop
 8009964:	0800a928 	.word	0x0800a928
 8009968:	00f42400 	.word	0x00f42400

0800996c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009978:	f003 0308 	and.w	r3, r3, #8
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00a      	beq.n	8009996 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	430a      	orrs	r2, r1
 8009994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d00a      	beq.n	80099b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	430a      	orrs	r2, r1
 80099b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099bc:	f003 0302 	and.w	r3, r3, #2
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00a      	beq.n	80099da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	430a      	orrs	r2, r1
 80099d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099de:	f003 0304 	and.w	r3, r3, #4
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00a      	beq.n	80099fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	430a      	orrs	r2, r1
 80099fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a00:	f003 0310 	and.w	r3, r3, #16
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00a      	beq.n	8009a1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a22:	f003 0320 	and.w	r3, r3, #32
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00a      	beq.n	8009a40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	430a      	orrs	r2, r1
 8009a3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d01a      	beq.n	8009a82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	430a      	orrs	r2, r1
 8009a60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a6a:	d10a      	bne.n	8009a82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	430a      	orrs	r2, r1
 8009a80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00a      	beq.n	8009aa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	605a      	str	r2, [r3, #4]
  }
}
 8009aa4:	bf00      	nop
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b098      	sub	sp, #96	@ 0x60
 8009ab4:	af02      	add	r7, sp, #8
 8009ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ac0:	f7f9 fcda 	bl	8003478 <HAL_GetTick>
 8009ac4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f003 0308 	and.w	r3, r3, #8
 8009ad0:	2b08      	cmp	r3, #8
 8009ad2:	d12f      	bne.n	8009b34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ad4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ad8:	9300      	str	r3, [sp, #0]
 8009ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009adc:	2200      	movs	r2, #0
 8009ade:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f88e 	bl	8009c04 <UART_WaitOnFlagUntilTimeout>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d022      	beq.n	8009b34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af6:	e853 3f00 	ldrex	r3, [r3]
 8009afa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009afe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b02:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	461a      	mov	r2, r3
 8009b0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b0e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b14:	e841 2300 	strex	r3, r2, [r1]
 8009b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1e6      	bne.n	8009aee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2220      	movs	r2, #32
 8009b24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e063      	b.n	8009bfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f003 0304 	and.w	r3, r3, #4
 8009b3e:	2b04      	cmp	r3, #4
 8009b40:	d149      	bne.n	8009bd6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b42:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f857 	bl	8009c04 <UART_WaitOnFlagUntilTimeout>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d03c      	beq.n	8009bd6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b64:	e853 3f00 	ldrex	r3, [r3]
 8009b68:	623b      	str	r3, [r7, #32]
   return(result);
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	461a      	mov	r2, r3
 8009b78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b82:	e841 2300 	strex	r3, r2, [r1]
 8009b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1e6      	bne.n	8009b5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	3308      	adds	r3, #8
 8009b94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	e853 3f00 	ldrex	r3, [r3]
 8009b9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f023 0301 	bic.w	r3, r3, #1
 8009ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	3308      	adds	r3, #8
 8009bac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bae:	61fa      	str	r2, [r7, #28]
 8009bb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb2:	69b9      	ldr	r1, [r7, #24]
 8009bb4:	69fa      	ldr	r2, [r7, #28]
 8009bb6:	e841 2300 	strex	r3, r2, [r1]
 8009bba:	617b      	str	r3, [r7, #20]
   return(result);
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1e5      	bne.n	8009b8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2220      	movs	r2, #32
 8009bc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	e012      	b.n	8009bfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2220      	movs	r2, #32
 8009bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2220      	movs	r2, #32
 8009be2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3758      	adds	r7, #88	@ 0x58
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	603b      	str	r3, [r7, #0]
 8009c10:	4613      	mov	r3, r2
 8009c12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c14:	e04f      	b.n	8009cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c1c:	d04b      	beq.n	8009cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c1e:	f7f9 fc2b 	bl	8003478 <HAL_GetTick>
 8009c22:	4602      	mov	r2, r0
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	69ba      	ldr	r2, [r7, #24]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d302      	bcc.n	8009c34 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e04e      	b.n	8009cd6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f003 0304 	and.w	r3, r3, #4
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d037      	beq.n	8009cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	2b80      	cmp	r3, #128	@ 0x80
 8009c4a:	d034      	beq.n	8009cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	2b40      	cmp	r3, #64	@ 0x40
 8009c50:	d031      	beq.n	8009cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	69db      	ldr	r3, [r3, #28]
 8009c58:	f003 0308 	and.w	r3, r3, #8
 8009c5c:	2b08      	cmp	r3, #8
 8009c5e:	d110      	bne.n	8009c82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2208      	movs	r2, #8
 8009c66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f000 f838 	bl	8009cde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2208      	movs	r2, #8
 8009c72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e029      	b.n	8009cd6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	69db      	ldr	r3, [r3, #28]
 8009c88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c90:	d111      	bne.n	8009cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f000 f81e 	bl	8009cde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2220      	movs	r2, #32
 8009ca6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	e00f      	b.n	8009cd6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	69da      	ldr	r2, [r3, #28]
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	bf0c      	ite	eq
 8009cc6:	2301      	moveq	r3, #1
 8009cc8:	2300      	movne	r3, #0
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	461a      	mov	r2, r3
 8009cce:	79fb      	ldrb	r3, [r7, #7]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d0a0      	beq.n	8009c16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b095      	sub	sp, #84	@ 0x54
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cee:	e853 3f00 	ldrex	r3, [r3]
 8009cf2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	461a      	mov	r2, r3
 8009d02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d04:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d06:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d0c:	e841 2300 	strex	r3, r2, [r1]
 8009d10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1e6      	bne.n	8009ce6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3308      	adds	r3, #8
 8009d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d20:	6a3b      	ldr	r3, [r7, #32]
 8009d22:	e853 3f00 	ldrex	r3, [r3]
 8009d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d2e:	f023 0301 	bic.w	r3, r3, #1
 8009d32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	3308      	adds	r3, #8
 8009d3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d44:	e841 2300 	strex	r3, r2, [r1]
 8009d48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1e3      	bne.n	8009d18 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d118      	bne.n	8009d8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	e853 3f00 	ldrex	r3, [r3]
 8009d64:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	f023 0310 	bic.w	r3, r3, #16
 8009d6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	461a      	mov	r2, r3
 8009d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d76:	61bb      	str	r3, [r7, #24]
 8009d78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7a:	6979      	ldr	r1, [r7, #20]
 8009d7c:	69ba      	ldr	r2, [r7, #24]
 8009d7e:	e841 2300 	strex	r3, r2, [r1]
 8009d82:	613b      	str	r3, [r7, #16]
   return(result);
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1e6      	bne.n	8009d58 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2220      	movs	r2, #32
 8009d8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009d9e:	bf00      	nop
 8009da0:	3754      	adds	r7, #84	@ 0x54
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009daa:	b480      	push	{r7}
 8009dac:	b085      	sub	sp, #20
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d101      	bne.n	8009dc0 <HAL_UARTEx_DisableFifoMode+0x16>
 8009dbc:	2302      	movs	r3, #2
 8009dbe:	e027      	b.n	8009e10 <HAL_UARTEx_DisableFifoMode+0x66>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2224      	movs	r2, #36	@ 0x24
 8009dcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f022 0201 	bic.w	r2, r2, #1
 8009de6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009dee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2220      	movs	r2, #32
 8009e02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d101      	bne.n	8009e34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009e30:	2302      	movs	r3, #2
 8009e32:	e02d      	b.n	8009e90 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2224      	movs	r2, #36	@ 0x24
 8009e40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f022 0201 	bic.w	r2, r2, #1
 8009e5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	430a      	orrs	r2, r1
 8009e6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f84f 	bl	8009f14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2220      	movs	r2, #32
 8009e82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d101      	bne.n	8009eb0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009eac:	2302      	movs	r3, #2
 8009eae:	e02d      	b.n	8009f0c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2224      	movs	r2, #36	@ 0x24
 8009ebc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f022 0201 	bic.w	r2, r2, #1
 8009ed6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	430a      	orrs	r2, r1
 8009eea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 f811 	bl	8009f14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2220      	movs	r2, #32
 8009efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d108      	bne.n	8009f36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009f34:	e031      	b.n	8009f9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009f36:	2308      	movs	r3, #8
 8009f38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f3a:	2308      	movs	r3, #8
 8009f3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	0e5b      	lsrs	r3, r3, #25
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	f003 0307 	and.w	r3, r3, #7
 8009f4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	0f5b      	lsrs	r3, r3, #29
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	f003 0307 	and.w	r3, r3, #7
 8009f5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f5e:	7bbb      	ldrb	r3, [r7, #14]
 8009f60:	7b3a      	ldrb	r2, [r7, #12]
 8009f62:	4911      	ldr	r1, [pc, #68]	@ (8009fa8 <UARTEx_SetNbDataToProcess+0x94>)
 8009f64:	5c8a      	ldrb	r2, [r1, r2]
 8009f66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f6a:	7b3a      	ldrb	r2, [r7, #12]
 8009f6c:	490f      	ldr	r1, [pc, #60]	@ (8009fac <UARTEx_SetNbDataToProcess+0x98>)
 8009f6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f70:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
 8009f7e:	7b7a      	ldrb	r2, [r7, #13]
 8009f80:	4909      	ldr	r1, [pc, #36]	@ (8009fa8 <UARTEx_SetNbDataToProcess+0x94>)
 8009f82:	5c8a      	ldrb	r2, [r1, r2]
 8009f84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f88:	7b7a      	ldrb	r2, [r7, #13]
 8009f8a:	4908      	ldr	r1, [pc, #32]	@ (8009fac <UARTEx_SetNbDataToProcess+0x98>)
 8009f8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009f9a:	bf00      	nop
 8009f9c:	3714      	adds	r7, #20
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	0800a940 	.word	0x0800a940
 8009fac:	0800a948 	.word	0x0800a948

08009fb0 <siprintf>:
 8009fb0:	b40e      	push	{r1, r2, r3}
 8009fb2:	b500      	push	{lr}
 8009fb4:	b09c      	sub	sp, #112	@ 0x70
 8009fb6:	ab1d      	add	r3, sp, #116	@ 0x74
 8009fb8:	9002      	str	r0, [sp, #8]
 8009fba:	9006      	str	r0, [sp, #24]
 8009fbc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009fc0:	4809      	ldr	r0, [pc, #36]	@ (8009fe8 <siprintf+0x38>)
 8009fc2:	9107      	str	r1, [sp, #28]
 8009fc4:	9104      	str	r1, [sp, #16]
 8009fc6:	4909      	ldr	r1, [pc, #36]	@ (8009fec <siprintf+0x3c>)
 8009fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fcc:	9105      	str	r1, [sp, #20]
 8009fce:	6800      	ldr	r0, [r0, #0]
 8009fd0:	9301      	str	r3, [sp, #4]
 8009fd2:	a902      	add	r1, sp, #8
 8009fd4:	f000 f994 	bl	800a300 <_svfiprintf_r>
 8009fd8:	9b02      	ldr	r3, [sp, #8]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	701a      	strb	r2, [r3, #0]
 8009fde:	b01c      	add	sp, #112	@ 0x70
 8009fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fe4:	b003      	add	sp, #12
 8009fe6:	4770      	bx	lr
 8009fe8:	2000001c 	.word	0x2000001c
 8009fec:	ffff0208 	.word	0xffff0208

08009ff0 <memset>:
 8009ff0:	4402      	add	r2, r0
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d100      	bne.n	8009ffa <memset+0xa>
 8009ff8:	4770      	bx	lr
 8009ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8009ffe:	e7f9      	b.n	8009ff4 <memset+0x4>

0800a000 <__errno>:
 800a000:	4b01      	ldr	r3, [pc, #4]	@ (800a008 <__errno+0x8>)
 800a002:	6818      	ldr	r0, [r3, #0]
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	2000001c 	.word	0x2000001c

0800a00c <__libc_init_array>:
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	4d0d      	ldr	r5, [pc, #52]	@ (800a044 <__libc_init_array+0x38>)
 800a010:	4c0d      	ldr	r4, [pc, #52]	@ (800a048 <__libc_init_array+0x3c>)
 800a012:	1b64      	subs	r4, r4, r5
 800a014:	10a4      	asrs	r4, r4, #2
 800a016:	2600      	movs	r6, #0
 800a018:	42a6      	cmp	r6, r4
 800a01a:	d109      	bne.n	800a030 <__libc_init_array+0x24>
 800a01c:	4d0b      	ldr	r5, [pc, #44]	@ (800a04c <__libc_init_array+0x40>)
 800a01e:	4c0c      	ldr	r4, [pc, #48]	@ (800a050 <__libc_init_array+0x44>)
 800a020:	f000 fc66 	bl	800a8f0 <_init>
 800a024:	1b64      	subs	r4, r4, r5
 800a026:	10a4      	asrs	r4, r4, #2
 800a028:	2600      	movs	r6, #0
 800a02a:	42a6      	cmp	r6, r4
 800a02c:	d105      	bne.n	800a03a <__libc_init_array+0x2e>
 800a02e:	bd70      	pop	{r4, r5, r6, pc}
 800a030:	f855 3b04 	ldr.w	r3, [r5], #4
 800a034:	4798      	blx	r3
 800a036:	3601      	adds	r6, #1
 800a038:	e7ee      	b.n	800a018 <__libc_init_array+0xc>
 800a03a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a03e:	4798      	blx	r3
 800a040:	3601      	adds	r6, #1
 800a042:	e7f2      	b.n	800a02a <__libc_init_array+0x1e>
 800a044:	0800a98c 	.word	0x0800a98c
 800a048:	0800a98c 	.word	0x0800a98c
 800a04c:	0800a98c 	.word	0x0800a98c
 800a050:	0800a990 	.word	0x0800a990

0800a054 <__retarget_lock_acquire_recursive>:
 800a054:	4770      	bx	lr

0800a056 <__retarget_lock_release_recursive>:
 800a056:	4770      	bx	lr

0800a058 <_free_r>:
 800a058:	b538      	push	{r3, r4, r5, lr}
 800a05a:	4605      	mov	r5, r0
 800a05c:	2900      	cmp	r1, #0
 800a05e:	d041      	beq.n	800a0e4 <_free_r+0x8c>
 800a060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a064:	1f0c      	subs	r4, r1, #4
 800a066:	2b00      	cmp	r3, #0
 800a068:	bfb8      	it	lt
 800a06a:	18e4      	addlt	r4, r4, r3
 800a06c:	f000 f8e0 	bl	800a230 <__malloc_lock>
 800a070:	4a1d      	ldr	r2, [pc, #116]	@ (800a0e8 <_free_r+0x90>)
 800a072:	6813      	ldr	r3, [r2, #0]
 800a074:	b933      	cbnz	r3, 800a084 <_free_r+0x2c>
 800a076:	6063      	str	r3, [r4, #4]
 800a078:	6014      	str	r4, [r2, #0]
 800a07a:	4628      	mov	r0, r5
 800a07c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a080:	f000 b8dc 	b.w	800a23c <__malloc_unlock>
 800a084:	42a3      	cmp	r3, r4
 800a086:	d908      	bls.n	800a09a <_free_r+0x42>
 800a088:	6820      	ldr	r0, [r4, #0]
 800a08a:	1821      	adds	r1, r4, r0
 800a08c:	428b      	cmp	r3, r1
 800a08e:	bf01      	itttt	eq
 800a090:	6819      	ldreq	r1, [r3, #0]
 800a092:	685b      	ldreq	r3, [r3, #4]
 800a094:	1809      	addeq	r1, r1, r0
 800a096:	6021      	streq	r1, [r4, #0]
 800a098:	e7ed      	b.n	800a076 <_free_r+0x1e>
 800a09a:	461a      	mov	r2, r3
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	b10b      	cbz	r3, 800a0a4 <_free_r+0x4c>
 800a0a0:	42a3      	cmp	r3, r4
 800a0a2:	d9fa      	bls.n	800a09a <_free_r+0x42>
 800a0a4:	6811      	ldr	r1, [r2, #0]
 800a0a6:	1850      	adds	r0, r2, r1
 800a0a8:	42a0      	cmp	r0, r4
 800a0aa:	d10b      	bne.n	800a0c4 <_free_r+0x6c>
 800a0ac:	6820      	ldr	r0, [r4, #0]
 800a0ae:	4401      	add	r1, r0
 800a0b0:	1850      	adds	r0, r2, r1
 800a0b2:	4283      	cmp	r3, r0
 800a0b4:	6011      	str	r1, [r2, #0]
 800a0b6:	d1e0      	bne.n	800a07a <_free_r+0x22>
 800a0b8:	6818      	ldr	r0, [r3, #0]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	6053      	str	r3, [r2, #4]
 800a0be:	4408      	add	r0, r1
 800a0c0:	6010      	str	r0, [r2, #0]
 800a0c2:	e7da      	b.n	800a07a <_free_r+0x22>
 800a0c4:	d902      	bls.n	800a0cc <_free_r+0x74>
 800a0c6:	230c      	movs	r3, #12
 800a0c8:	602b      	str	r3, [r5, #0]
 800a0ca:	e7d6      	b.n	800a07a <_free_r+0x22>
 800a0cc:	6820      	ldr	r0, [r4, #0]
 800a0ce:	1821      	adds	r1, r4, r0
 800a0d0:	428b      	cmp	r3, r1
 800a0d2:	bf04      	itt	eq
 800a0d4:	6819      	ldreq	r1, [r3, #0]
 800a0d6:	685b      	ldreq	r3, [r3, #4]
 800a0d8:	6063      	str	r3, [r4, #4]
 800a0da:	bf04      	itt	eq
 800a0dc:	1809      	addeq	r1, r1, r0
 800a0de:	6021      	streq	r1, [r4, #0]
 800a0e0:	6054      	str	r4, [r2, #4]
 800a0e2:	e7ca      	b.n	800a07a <_free_r+0x22>
 800a0e4:	bd38      	pop	{r3, r4, r5, pc}
 800a0e6:	bf00      	nop
 800a0e8:	20000dc8 	.word	0x20000dc8

0800a0ec <sbrk_aligned>:
 800a0ec:	b570      	push	{r4, r5, r6, lr}
 800a0ee:	4e0f      	ldr	r6, [pc, #60]	@ (800a12c <sbrk_aligned+0x40>)
 800a0f0:	460c      	mov	r4, r1
 800a0f2:	6831      	ldr	r1, [r6, #0]
 800a0f4:	4605      	mov	r5, r0
 800a0f6:	b911      	cbnz	r1, 800a0fe <sbrk_aligned+0x12>
 800a0f8:	f000 fba6 	bl	800a848 <_sbrk_r>
 800a0fc:	6030      	str	r0, [r6, #0]
 800a0fe:	4621      	mov	r1, r4
 800a100:	4628      	mov	r0, r5
 800a102:	f000 fba1 	bl	800a848 <_sbrk_r>
 800a106:	1c43      	adds	r3, r0, #1
 800a108:	d103      	bne.n	800a112 <sbrk_aligned+0x26>
 800a10a:	f04f 34ff 	mov.w	r4, #4294967295
 800a10e:	4620      	mov	r0, r4
 800a110:	bd70      	pop	{r4, r5, r6, pc}
 800a112:	1cc4      	adds	r4, r0, #3
 800a114:	f024 0403 	bic.w	r4, r4, #3
 800a118:	42a0      	cmp	r0, r4
 800a11a:	d0f8      	beq.n	800a10e <sbrk_aligned+0x22>
 800a11c:	1a21      	subs	r1, r4, r0
 800a11e:	4628      	mov	r0, r5
 800a120:	f000 fb92 	bl	800a848 <_sbrk_r>
 800a124:	3001      	adds	r0, #1
 800a126:	d1f2      	bne.n	800a10e <sbrk_aligned+0x22>
 800a128:	e7ef      	b.n	800a10a <sbrk_aligned+0x1e>
 800a12a:	bf00      	nop
 800a12c:	20000dc4 	.word	0x20000dc4

0800a130 <_malloc_r>:
 800a130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a134:	1ccd      	adds	r5, r1, #3
 800a136:	f025 0503 	bic.w	r5, r5, #3
 800a13a:	3508      	adds	r5, #8
 800a13c:	2d0c      	cmp	r5, #12
 800a13e:	bf38      	it	cc
 800a140:	250c      	movcc	r5, #12
 800a142:	2d00      	cmp	r5, #0
 800a144:	4606      	mov	r6, r0
 800a146:	db01      	blt.n	800a14c <_malloc_r+0x1c>
 800a148:	42a9      	cmp	r1, r5
 800a14a:	d904      	bls.n	800a156 <_malloc_r+0x26>
 800a14c:	230c      	movs	r3, #12
 800a14e:	6033      	str	r3, [r6, #0]
 800a150:	2000      	movs	r0, #0
 800a152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a156:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a22c <_malloc_r+0xfc>
 800a15a:	f000 f869 	bl	800a230 <__malloc_lock>
 800a15e:	f8d8 3000 	ldr.w	r3, [r8]
 800a162:	461c      	mov	r4, r3
 800a164:	bb44      	cbnz	r4, 800a1b8 <_malloc_r+0x88>
 800a166:	4629      	mov	r1, r5
 800a168:	4630      	mov	r0, r6
 800a16a:	f7ff ffbf 	bl	800a0ec <sbrk_aligned>
 800a16e:	1c43      	adds	r3, r0, #1
 800a170:	4604      	mov	r4, r0
 800a172:	d158      	bne.n	800a226 <_malloc_r+0xf6>
 800a174:	f8d8 4000 	ldr.w	r4, [r8]
 800a178:	4627      	mov	r7, r4
 800a17a:	2f00      	cmp	r7, #0
 800a17c:	d143      	bne.n	800a206 <_malloc_r+0xd6>
 800a17e:	2c00      	cmp	r4, #0
 800a180:	d04b      	beq.n	800a21a <_malloc_r+0xea>
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	4639      	mov	r1, r7
 800a186:	4630      	mov	r0, r6
 800a188:	eb04 0903 	add.w	r9, r4, r3
 800a18c:	f000 fb5c 	bl	800a848 <_sbrk_r>
 800a190:	4581      	cmp	r9, r0
 800a192:	d142      	bne.n	800a21a <_malloc_r+0xea>
 800a194:	6821      	ldr	r1, [r4, #0]
 800a196:	1a6d      	subs	r5, r5, r1
 800a198:	4629      	mov	r1, r5
 800a19a:	4630      	mov	r0, r6
 800a19c:	f7ff ffa6 	bl	800a0ec <sbrk_aligned>
 800a1a0:	3001      	adds	r0, #1
 800a1a2:	d03a      	beq.n	800a21a <_malloc_r+0xea>
 800a1a4:	6823      	ldr	r3, [r4, #0]
 800a1a6:	442b      	add	r3, r5
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	f8d8 3000 	ldr.w	r3, [r8]
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	bb62      	cbnz	r2, 800a20c <_malloc_r+0xdc>
 800a1b2:	f8c8 7000 	str.w	r7, [r8]
 800a1b6:	e00f      	b.n	800a1d8 <_malloc_r+0xa8>
 800a1b8:	6822      	ldr	r2, [r4, #0]
 800a1ba:	1b52      	subs	r2, r2, r5
 800a1bc:	d420      	bmi.n	800a200 <_malloc_r+0xd0>
 800a1be:	2a0b      	cmp	r2, #11
 800a1c0:	d917      	bls.n	800a1f2 <_malloc_r+0xc2>
 800a1c2:	1961      	adds	r1, r4, r5
 800a1c4:	42a3      	cmp	r3, r4
 800a1c6:	6025      	str	r5, [r4, #0]
 800a1c8:	bf18      	it	ne
 800a1ca:	6059      	strne	r1, [r3, #4]
 800a1cc:	6863      	ldr	r3, [r4, #4]
 800a1ce:	bf08      	it	eq
 800a1d0:	f8c8 1000 	streq.w	r1, [r8]
 800a1d4:	5162      	str	r2, [r4, r5]
 800a1d6:	604b      	str	r3, [r1, #4]
 800a1d8:	4630      	mov	r0, r6
 800a1da:	f000 f82f 	bl	800a23c <__malloc_unlock>
 800a1de:	f104 000b 	add.w	r0, r4, #11
 800a1e2:	1d23      	adds	r3, r4, #4
 800a1e4:	f020 0007 	bic.w	r0, r0, #7
 800a1e8:	1ac2      	subs	r2, r0, r3
 800a1ea:	bf1c      	itt	ne
 800a1ec:	1a1b      	subne	r3, r3, r0
 800a1ee:	50a3      	strne	r3, [r4, r2]
 800a1f0:	e7af      	b.n	800a152 <_malloc_r+0x22>
 800a1f2:	6862      	ldr	r2, [r4, #4]
 800a1f4:	42a3      	cmp	r3, r4
 800a1f6:	bf0c      	ite	eq
 800a1f8:	f8c8 2000 	streq.w	r2, [r8]
 800a1fc:	605a      	strne	r2, [r3, #4]
 800a1fe:	e7eb      	b.n	800a1d8 <_malloc_r+0xa8>
 800a200:	4623      	mov	r3, r4
 800a202:	6864      	ldr	r4, [r4, #4]
 800a204:	e7ae      	b.n	800a164 <_malloc_r+0x34>
 800a206:	463c      	mov	r4, r7
 800a208:	687f      	ldr	r7, [r7, #4]
 800a20a:	e7b6      	b.n	800a17a <_malloc_r+0x4a>
 800a20c:	461a      	mov	r2, r3
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	42a3      	cmp	r3, r4
 800a212:	d1fb      	bne.n	800a20c <_malloc_r+0xdc>
 800a214:	2300      	movs	r3, #0
 800a216:	6053      	str	r3, [r2, #4]
 800a218:	e7de      	b.n	800a1d8 <_malloc_r+0xa8>
 800a21a:	230c      	movs	r3, #12
 800a21c:	6033      	str	r3, [r6, #0]
 800a21e:	4630      	mov	r0, r6
 800a220:	f000 f80c 	bl	800a23c <__malloc_unlock>
 800a224:	e794      	b.n	800a150 <_malloc_r+0x20>
 800a226:	6005      	str	r5, [r0, #0]
 800a228:	e7d6      	b.n	800a1d8 <_malloc_r+0xa8>
 800a22a:	bf00      	nop
 800a22c:	20000dc8 	.word	0x20000dc8

0800a230 <__malloc_lock>:
 800a230:	4801      	ldr	r0, [pc, #4]	@ (800a238 <__malloc_lock+0x8>)
 800a232:	f7ff bf0f 	b.w	800a054 <__retarget_lock_acquire_recursive>
 800a236:	bf00      	nop
 800a238:	20000dc0 	.word	0x20000dc0

0800a23c <__malloc_unlock>:
 800a23c:	4801      	ldr	r0, [pc, #4]	@ (800a244 <__malloc_unlock+0x8>)
 800a23e:	f7ff bf0a 	b.w	800a056 <__retarget_lock_release_recursive>
 800a242:	bf00      	nop
 800a244:	20000dc0 	.word	0x20000dc0

0800a248 <__ssputs_r>:
 800a248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a24c:	688e      	ldr	r6, [r1, #8]
 800a24e:	461f      	mov	r7, r3
 800a250:	42be      	cmp	r6, r7
 800a252:	680b      	ldr	r3, [r1, #0]
 800a254:	4682      	mov	sl, r0
 800a256:	460c      	mov	r4, r1
 800a258:	4690      	mov	r8, r2
 800a25a:	d82d      	bhi.n	800a2b8 <__ssputs_r+0x70>
 800a25c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a260:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a264:	d026      	beq.n	800a2b4 <__ssputs_r+0x6c>
 800a266:	6965      	ldr	r5, [r4, #20]
 800a268:	6909      	ldr	r1, [r1, #16]
 800a26a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a26e:	eba3 0901 	sub.w	r9, r3, r1
 800a272:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a276:	1c7b      	adds	r3, r7, #1
 800a278:	444b      	add	r3, r9
 800a27a:	106d      	asrs	r5, r5, #1
 800a27c:	429d      	cmp	r5, r3
 800a27e:	bf38      	it	cc
 800a280:	461d      	movcc	r5, r3
 800a282:	0553      	lsls	r3, r2, #21
 800a284:	d527      	bpl.n	800a2d6 <__ssputs_r+0x8e>
 800a286:	4629      	mov	r1, r5
 800a288:	f7ff ff52 	bl	800a130 <_malloc_r>
 800a28c:	4606      	mov	r6, r0
 800a28e:	b360      	cbz	r0, 800a2ea <__ssputs_r+0xa2>
 800a290:	6921      	ldr	r1, [r4, #16]
 800a292:	464a      	mov	r2, r9
 800a294:	f000 fae8 	bl	800a868 <memcpy>
 800a298:	89a3      	ldrh	r3, [r4, #12]
 800a29a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a29e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2a2:	81a3      	strh	r3, [r4, #12]
 800a2a4:	6126      	str	r6, [r4, #16]
 800a2a6:	6165      	str	r5, [r4, #20]
 800a2a8:	444e      	add	r6, r9
 800a2aa:	eba5 0509 	sub.w	r5, r5, r9
 800a2ae:	6026      	str	r6, [r4, #0]
 800a2b0:	60a5      	str	r5, [r4, #8]
 800a2b2:	463e      	mov	r6, r7
 800a2b4:	42be      	cmp	r6, r7
 800a2b6:	d900      	bls.n	800a2ba <__ssputs_r+0x72>
 800a2b8:	463e      	mov	r6, r7
 800a2ba:	6820      	ldr	r0, [r4, #0]
 800a2bc:	4632      	mov	r2, r6
 800a2be:	4641      	mov	r1, r8
 800a2c0:	f000 faa8 	bl	800a814 <memmove>
 800a2c4:	68a3      	ldr	r3, [r4, #8]
 800a2c6:	1b9b      	subs	r3, r3, r6
 800a2c8:	60a3      	str	r3, [r4, #8]
 800a2ca:	6823      	ldr	r3, [r4, #0]
 800a2cc:	4433      	add	r3, r6
 800a2ce:	6023      	str	r3, [r4, #0]
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2d6:	462a      	mov	r2, r5
 800a2d8:	f000 fad4 	bl	800a884 <_realloc_r>
 800a2dc:	4606      	mov	r6, r0
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d1e0      	bne.n	800a2a4 <__ssputs_r+0x5c>
 800a2e2:	6921      	ldr	r1, [r4, #16]
 800a2e4:	4650      	mov	r0, sl
 800a2e6:	f7ff feb7 	bl	800a058 <_free_r>
 800a2ea:	230c      	movs	r3, #12
 800a2ec:	f8ca 3000 	str.w	r3, [sl]
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2f6:	81a3      	strh	r3, [r4, #12]
 800a2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fc:	e7e9      	b.n	800a2d2 <__ssputs_r+0x8a>
	...

0800a300 <_svfiprintf_r>:
 800a300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a304:	4698      	mov	r8, r3
 800a306:	898b      	ldrh	r3, [r1, #12]
 800a308:	061b      	lsls	r3, r3, #24
 800a30a:	b09d      	sub	sp, #116	@ 0x74
 800a30c:	4607      	mov	r7, r0
 800a30e:	460d      	mov	r5, r1
 800a310:	4614      	mov	r4, r2
 800a312:	d510      	bpl.n	800a336 <_svfiprintf_r+0x36>
 800a314:	690b      	ldr	r3, [r1, #16]
 800a316:	b973      	cbnz	r3, 800a336 <_svfiprintf_r+0x36>
 800a318:	2140      	movs	r1, #64	@ 0x40
 800a31a:	f7ff ff09 	bl	800a130 <_malloc_r>
 800a31e:	6028      	str	r0, [r5, #0]
 800a320:	6128      	str	r0, [r5, #16]
 800a322:	b930      	cbnz	r0, 800a332 <_svfiprintf_r+0x32>
 800a324:	230c      	movs	r3, #12
 800a326:	603b      	str	r3, [r7, #0]
 800a328:	f04f 30ff 	mov.w	r0, #4294967295
 800a32c:	b01d      	add	sp, #116	@ 0x74
 800a32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a332:	2340      	movs	r3, #64	@ 0x40
 800a334:	616b      	str	r3, [r5, #20]
 800a336:	2300      	movs	r3, #0
 800a338:	9309      	str	r3, [sp, #36]	@ 0x24
 800a33a:	2320      	movs	r3, #32
 800a33c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a340:	f8cd 800c 	str.w	r8, [sp, #12]
 800a344:	2330      	movs	r3, #48	@ 0x30
 800a346:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a4e4 <_svfiprintf_r+0x1e4>
 800a34a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a34e:	f04f 0901 	mov.w	r9, #1
 800a352:	4623      	mov	r3, r4
 800a354:	469a      	mov	sl, r3
 800a356:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a35a:	b10a      	cbz	r2, 800a360 <_svfiprintf_r+0x60>
 800a35c:	2a25      	cmp	r2, #37	@ 0x25
 800a35e:	d1f9      	bne.n	800a354 <_svfiprintf_r+0x54>
 800a360:	ebba 0b04 	subs.w	fp, sl, r4
 800a364:	d00b      	beq.n	800a37e <_svfiprintf_r+0x7e>
 800a366:	465b      	mov	r3, fp
 800a368:	4622      	mov	r2, r4
 800a36a:	4629      	mov	r1, r5
 800a36c:	4638      	mov	r0, r7
 800a36e:	f7ff ff6b 	bl	800a248 <__ssputs_r>
 800a372:	3001      	adds	r0, #1
 800a374:	f000 80a7 	beq.w	800a4c6 <_svfiprintf_r+0x1c6>
 800a378:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a37a:	445a      	add	r2, fp
 800a37c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a37e:	f89a 3000 	ldrb.w	r3, [sl]
 800a382:	2b00      	cmp	r3, #0
 800a384:	f000 809f 	beq.w	800a4c6 <_svfiprintf_r+0x1c6>
 800a388:	2300      	movs	r3, #0
 800a38a:	f04f 32ff 	mov.w	r2, #4294967295
 800a38e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a392:	f10a 0a01 	add.w	sl, sl, #1
 800a396:	9304      	str	r3, [sp, #16]
 800a398:	9307      	str	r3, [sp, #28]
 800a39a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a39e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3a0:	4654      	mov	r4, sl
 800a3a2:	2205      	movs	r2, #5
 800a3a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3a8:	484e      	ldr	r0, [pc, #312]	@ (800a4e4 <_svfiprintf_r+0x1e4>)
 800a3aa:	f7f5 ff41 	bl	8000230 <memchr>
 800a3ae:	9a04      	ldr	r2, [sp, #16]
 800a3b0:	b9d8      	cbnz	r0, 800a3ea <_svfiprintf_r+0xea>
 800a3b2:	06d0      	lsls	r0, r2, #27
 800a3b4:	bf44      	itt	mi
 800a3b6:	2320      	movmi	r3, #32
 800a3b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3bc:	0711      	lsls	r1, r2, #28
 800a3be:	bf44      	itt	mi
 800a3c0:	232b      	movmi	r3, #43	@ 0x2b
 800a3c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3c6:	f89a 3000 	ldrb.w	r3, [sl]
 800a3ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3cc:	d015      	beq.n	800a3fa <_svfiprintf_r+0xfa>
 800a3ce:	9a07      	ldr	r2, [sp, #28]
 800a3d0:	4654      	mov	r4, sl
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	f04f 0c0a 	mov.w	ip, #10
 800a3d8:	4621      	mov	r1, r4
 800a3da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3de:	3b30      	subs	r3, #48	@ 0x30
 800a3e0:	2b09      	cmp	r3, #9
 800a3e2:	d94b      	bls.n	800a47c <_svfiprintf_r+0x17c>
 800a3e4:	b1b0      	cbz	r0, 800a414 <_svfiprintf_r+0x114>
 800a3e6:	9207      	str	r2, [sp, #28]
 800a3e8:	e014      	b.n	800a414 <_svfiprintf_r+0x114>
 800a3ea:	eba0 0308 	sub.w	r3, r0, r8
 800a3ee:	fa09 f303 	lsl.w	r3, r9, r3
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	9304      	str	r3, [sp, #16]
 800a3f6:	46a2      	mov	sl, r4
 800a3f8:	e7d2      	b.n	800a3a0 <_svfiprintf_r+0xa0>
 800a3fa:	9b03      	ldr	r3, [sp, #12]
 800a3fc:	1d19      	adds	r1, r3, #4
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	9103      	str	r1, [sp, #12]
 800a402:	2b00      	cmp	r3, #0
 800a404:	bfbb      	ittet	lt
 800a406:	425b      	neglt	r3, r3
 800a408:	f042 0202 	orrlt.w	r2, r2, #2
 800a40c:	9307      	strge	r3, [sp, #28]
 800a40e:	9307      	strlt	r3, [sp, #28]
 800a410:	bfb8      	it	lt
 800a412:	9204      	strlt	r2, [sp, #16]
 800a414:	7823      	ldrb	r3, [r4, #0]
 800a416:	2b2e      	cmp	r3, #46	@ 0x2e
 800a418:	d10a      	bne.n	800a430 <_svfiprintf_r+0x130>
 800a41a:	7863      	ldrb	r3, [r4, #1]
 800a41c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a41e:	d132      	bne.n	800a486 <_svfiprintf_r+0x186>
 800a420:	9b03      	ldr	r3, [sp, #12]
 800a422:	1d1a      	adds	r2, r3, #4
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	9203      	str	r2, [sp, #12]
 800a428:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a42c:	3402      	adds	r4, #2
 800a42e:	9305      	str	r3, [sp, #20]
 800a430:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a4f4 <_svfiprintf_r+0x1f4>
 800a434:	7821      	ldrb	r1, [r4, #0]
 800a436:	2203      	movs	r2, #3
 800a438:	4650      	mov	r0, sl
 800a43a:	f7f5 fef9 	bl	8000230 <memchr>
 800a43e:	b138      	cbz	r0, 800a450 <_svfiprintf_r+0x150>
 800a440:	9b04      	ldr	r3, [sp, #16]
 800a442:	eba0 000a 	sub.w	r0, r0, sl
 800a446:	2240      	movs	r2, #64	@ 0x40
 800a448:	4082      	lsls	r2, r0
 800a44a:	4313      	orrs	r3, r2
 800a44c:	3401      	adds	r4, #1
 800a44e:	9304      	str	r3, [sp, #16]
 800a450:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a454:	4824      	ldr	r0, [pc, #144]	@ (800a4e8 <_svfiprintf_r+0x1e8>)
 800a456:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a45a:	2206      	movs	r2, #6
 800a45c:	f7f5 fee8 	bl	8000230 <memchr>
 800a460:	2800      	cmp	r0, #0
 800a462:	d036      	beq.n	800a4d2 <_svfiprintf_r+0x1d2>
 800a464:	4b21      	ldr	r3, [pc, #132]	@ (800a4ec <_svfiprintf_r+0x1ec>)
 800a466:	bb1b      	cbnz	r3, 800a4b0 <_svfiprintf_r+0x1b0>
 800a468:	9b03      	ldr	r3, [sp, #12]
 800a46a:	3307      	adds	r3, #7
 800a46c:	f023 0307 	bic.w	r3, r3, #7
 800a470:	3308      	adds	r3, #8
 800a472:	9303      	str	r3, [sp, #12]
 800a474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a476:	4433      	add	r3, r6
 800a478:	9309      	str	r3, [sp, #36]	@ 0x24
 800a47a:	e76a      	b.n	800a352 <_svfiprintf_r+0x52>
 800a47c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a480:	460c      	mov	r4, r1
 800a482:	2001      	movs	r0, #1
 800a484:	e7a8      	b.n	800a3d8 <_svfiprintf_r+0xd8>
 800a486:	2300      	movs	r3, #0
 800a488:	3401      	adds	r4, #1
 800a48a:	9305      	str	r3, [sp, #20]
 800a48c:	4619      	mov	r1, r3
 800a48e:	f04f 0c0a 	mov.w	ip, #10
 800a492:	4620      	mov	r0, r4
 800a494:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a498:	3a30      	subs	r2, #48	@ 0x30
 800a49a:	2a09      	cmp	r2, #9
 800a49c:	d903      	bls.n	800a4a6 <_svfiprintf_r+0x1a6>
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d0c6      	beq.n	800a430 <_svfiprintf_r+0x130>
 800a4a2:	9105      	str	r1, [sp, #20]
 800a4a4:	e7c4      	b.n	800a430 <_svfiprintf_r+0x130>
 800a4a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	e7f0      	b.n	800a492 <_svfiprintf_r+0x192>
 800a4b0:	ab03      	add	r3, sp, #12
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	462a      	mov	r2, r5
 800a4b6:	4b0e      	ldr	r3, [pc, #56]	@ (800a4f0 <_svfiprintf_r+0x1f0>)
 800a4b8:	a904      	add	r1, sp, #16
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	f3af 8000 	nop.w
 800a4c0:	1c42      	adds	r2, r0, #1
 800a4c2:	4606      	mov	r6, r0
 800a4c4:	d1d6      	bne.n	800a474 <_svfiprintf_r+0x174>
 800a4c6:	89ab      	ldrh	r3, [r5, #12]
 800a4c8:	065b      	lsls	r3, r3, #25
 800a4ca:	f53f af2d 	bmi.w	800a328 <_svfiprintf_r+0x28>
 800a4ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4d0:	e72c      	b.n	800a32c <_svfiprintf_r+0x2c>
 800a4d2:	ab03      	add	r3, sp, #12
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	462a      	mov	r2, r5
 800a4d8:	4b05      	ldr	r3, [pc, #20]	@ (800a4f0 <_svfiprintf_r+0x1f0>)
 800a4da:	a904      	add	r1, sp, #16
 800a4dc:	4638      	mov	r0, r7
 800a4de:	f000 f879 	bl	800a5d4 <_printf_i>
 800a4e2:	e7ed      	b.n	800a4c0 <_svfiprintf_r+0x1c0>
 800a4e4:	0800a950 	.word	0x0800a950
 800a4e8:	0800a95a 	.word	0x0800a95a
 800a4ec:	00000000 	.word	0x00000000
 800a4f0:	0800a249 	.word	0x0800a249
 800a4f4:	0800a956 	.word	0x0800a956

0800a4f8 <_printf_common>:
 800a4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4fc:	4616      	mov	r6, r2
 800a4fe:	4698      	mov	r8, r3
 800a500:	688a      	ldr	r2, [r1, #8]
 800a502:	690b      	ldr	r3, [r1, #16]
 800a504:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a508:	4293      	cmp	r3, r2
 800a50a:	bfb8      	it	lt
 800a50c:	4613      	movlt	r3, r2
 800a50e:	6033      	str	r3, [r6, #0]
 800a510:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a514:	4607      	mov	r7, r0
 800a516:	460c      	mov	r4, r1
 800a518:	b10a      	cbz	r2, 800a51e <_printf_common+0x26>
 800a51a:	3301      	adds	r3, #1
 800a51c:	6033      	str	r3, [r6, #0]
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	0699      	lsls	r1, r3, #26
 800a522:	bf42      	ittt	mi
 800a524:	6833      	ldrmi	r3, [r6, #0]
 800a526:	3302      	addmi	r3, #2
 800a528:	6033      	strmi	r3, [r6, #0]
 800a52a:	6825      	ldr	r5, [r4, #0]
 800a52c:	f015 0506 	ands.w	r5, r5, #6
 800a530:	d106      	bne.n	800a540 <_printf_common+0x48>
 800a532:	f104 0a19 	add.w	sl, r4, #25
 800a536:	68e3      	ldr	r3, [r4, #12]
 800a538:	6832      	ldr	r2, [r6, #0]
 800a53a:	1a9b      	subs	r3, r3, r2
 800a53c:	42ab      	cmp	r3, r5
 800a53e:	dc26      	bgt.n	800a58e <_printf_common+0x96>
 800a540:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a544:	6822      	ldr	r2, [r4, #0]
 800a546:	3b00      	subs	r3, #0
 800a548:	bf18      	it	ne
 800a54a:	2301      	movne	r3, #1
 800a54c:	0692      	lsls	r2, r2, #26
 800a54e:	d42b      	bmi.n	800a5a8 <_printf_common+0xb0>
 800a550:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a554:	4641      	mov	r1, r8
 800a556:	4638      	mov	r0, r7
 800a558:	47c8      	blx	r9
 800a55a:	3001      	adds	r0, #1
 800a55c:	d01e      	beq.n	800a59c <_printf_common+0xa4>
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	6922      	ldr	r2, [r4, #16]
 800a562:	f003 0306 	and.w	r3, r3, #6
 800a566:	2b04      	cmp	r3, #4
 800a568:	bf02      	ittt	eq
 800a56a:	68e5      	ldreq	r5, [r4, #12]
 800a56c:	6833      	ldreq	r3, [r6, #0]
 800a56e:	1aed      	subeq	r5, r5, r3
 800a570:	68a3      	ldr	r3, [r4, #8]
 800a572:	bf0c      	ite	eq
 800a574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a578:	2500      	movne	r5, #0
 800a57a:	4293      	cmp	r3, r2
 800a57c:	bfc4      	itt	gt
 800a57e:	1a9b      	subgt	r3, r3, r2
 800a580:	18ed      	addgt	r5, r5, r3
 800a582:	2600      	movs	r6, #0
 800a584:	341a      	adds	r4, #26
 800a586:	42b5      	cmp	r5, r6
 800a588:	d11a      	bne.n	800a5c0 <_printf_common+0xc8>
 800a58a:	2000      	movs	r0, #0
 800a58c:	e008      	b.n	800a5a0 <_printf_common+0xa8>
 800a58e:	2301      	movs	r3, #1
 800a590:	4652      	mov	r2, sl
 800a592:	4641      	mov	r1, r8
 800a594:	4638      	mov	r0, r7
 800a596:	47c8      	blx	r9
 800a598:	3001      	adds	r0, #1
 800a59a:	d103      	bne.n	800a5a4 <_printf_common+0xac>
 800a59c:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5a4:	3501      	adds	r5, #1
 800a5a6:	e7c6      	b.n	800a536 <_printf_common+0x3e>
 800a5a8:	18e1      	adds	r1, r4, r3
 800a5aa:	1c5a      	adds	r2, r3, #1
 800a5ac:	2030      	movs	r0, #48	@ 0x30
 800a5ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a5b2:	4422      	add	r2, r4
 800a5b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a5b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a5bc:	3302      	adds	r3, #2
 800a5be:	e7c7      	b.n	800a550 <_printf_common+0x58>
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	4622      	mov	r2, r4
 800a5c4:	4641      	mov	r1, r8
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	47c8      	blx	r9
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	d0e6      	beq.n	800a59c <_printf_common+0xa4>
 800a5ce:	3601      	adds	r6, #1
 800a5d0:	e7d9      	b.n	800a586 <_printf_common+0x8e>
	...

0800a5d4 <_printf_i>:
 800a5d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5d8:	7e0f      	ldrb	r7, [r1, #24]
 800a5da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5dc:	2f78      	cmp	r7, #120	@ 0x78
 800a5de:	4691      	mov	r9, r2
 800a5e0:	4680      	mov	r8, r0
 800a5e2:	460c      	mov	r4, r1
 800a5e4:	469a      	mov	sl, r3
 800a5e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5ea:	d807      	bhi.n	800a5fc <_printf_i+0x28>
 800a5ec:	2f62      	cmp	r7, #98	@ 0x62
 800a5ee:	d80a      	bhi.n	800a606 <_printf_i+0x32>
 800a5f0:	2f00      	cmp	r7, #0
 800a5f2:	f000 80d2 	beq.w	800a79a <_printf_i+0x1c6>
 800a5f6:	2f58      	cmp	r7, #88	@ 0x58
 800a5f8:	f000 80b9 	beq.w	800a76e <_printf_i+0x19a>
 800a5fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a600:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a604:	e03a      	b.n	800a67c <_printf_i+0xa8>
 800a606:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a60a:	2b15      	cmp	r3, #21
 800a60c:	d8f6      	bhi.n	800a5fc <_printf_i+0x28>
 800a60e:	a101      	add	r1, pc, #4	@ (adr r1, 800a614 <_printf_i+0x40>)
 800a610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a614:	0800a66d 	.word	0x0800a66d
 800a618:	0800a681 	.word	0x0800a681
 800a61c:	0800a5fd 	.word	0x0800a5fd
 800a620:	0800a5fd 	.word	0x0800a5fd
 800a624:	0800a5fd 	.word	0x0800a5fd
 800a628:	0800a5fd 	.word	0x0800a5fd
 800a62c:	0800a681 	.word	0x0800a681
 800a630:	0800a5fd 	.word	0x0800a5fd
 800a634:	0800a5fd 	.word	0x0800a5fd
 800a638:	0800a5fd 	.word	0x0800a5fd
 800a63c:	0800a5fd 	.word	0x0800a5fd
 800a640:	0800a781 	.word	0x0800a781
 800a644:	0800a6ab 	.word	0x0800a6ab
 800a648:	0800a73b 	.word	0x0800a73b
 800a64c:	0800a5fd 	.word	0x0800a5fd
 800a650:	0800a5fd 	.word	0x0800a5fd
 800a654:	0800a7a3 	.word	0x0800a7a3
 800a658:	0800a5fd 	.word	0x0800a5fd
 800a65c:	0800a6ab 	.word	0x0800a6ab
 800a660:	0800a5fd 	.word	0x0800a5fd
 800a664:	0800a5fd 	.word	0x0800a5fd
 800a668:	0800a743 	.word	0x0800a743
 800a66c:	6833      	ldr	r3, [r6, #0]
 800a66e:	1d1a      	adds	r2, r3, #4
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	6032      	str	r2, [r6, #0]
 800a674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a678:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a67c:	2301      	movs	r3, #1
 800a67e:	e09d      	b.n	800a7bc <_printf_i+0x1e8>
 800a680:	6833      	ldr	r3, [r6, #0]
 800a682:	6820      	ldr	r0, [r4, #0]
 800a684:	1d19      	adds	r1, r3, #4
 800a686:	6031      	str	r1, [r6, #0]
 800a688:	0606      	lsls	r6, r0, #24
 800a68a:	d501      	bpl.n	800a690 <_printf_i+0xbc>
 800a68c:	681d      	ldr	r5, [r3, #0]
 800a68e:	e003      	b.n	800a698 <_printf_i+0xc4>
 800a690:	0645      	lsls	r5, r0, #25
 800a692:	d5fb      	bpl.n	800a68c <_printf_i+0xb8>
 800a694:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a698:	2d00      	cmp	r5, #0
 800a69a:	da03      	bge.n	800a6a4 <_printf_i+0xd0>
 800a69c:	232d      	movs	r3, #45	@ 0x2d
 800a69e:	426d      	negs	r5, r5
 800a6a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6a4:	4859      	ldr	r0, [pc, #356]	@ (800a80c <_printf_i+0x238>)
 800a6a6:	230a      	movs	r3, #10
 800a6a8:	e011      	b.n	800a6ce <_printf_i+0xfa>
 800a6aa:	6821      	ldr	r1, [r4, #0]
 800a6ac:	6833      	ldr	r3, [r6, #0]
 800a6ae:	0608      	lsls	r0, r1, #24
 800a6b0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a6b4:	d402      	bmi.n	800a6bc <_printf_i+0xe8>
 800a6b6:	0649      	lsls	r1, r1, #25
 800a6b8:	bf48      	it	mi
 800a6ba:	b2ad      	uxthmi	r5, r5
 800a6bc:	2f6f      	cmp	r7, #111	@ 0x6f
 800a6be:	4853      	ldr	r0, [pc, #332]	@ (800a80c <_printf_i+0x238>)
 800a6c0:	6033      	str	r3, [r6, #0]
 800a6c2:	bf14      	ite	ne
 800a6c4:	230a      	movne	r3, #10
 800a6c6:	2308      	moveq	r3, #8
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6ce:	6866      	ldr	r6, [r4, #4]
 800a6d0:	60a6      	str	r6, [r4, #8]
 800a6d2:	2e00      	cmp	r6, #0
 800a6d4:	bfa2      	ittt	ge
 800a6d6:	6821      	ldrge	r1, [r4, #0]
 800a6d8:	f021 0104 	bicge.w	r1, r1, #4
 800a6dc:	6021      	strge	r1, [r4, #0]
 800a6de:	b90d      	cbnz	r5, 800a6e4 <_printf_i+0x110>
 800a6e0:	2e00      	cmp	r6, #0
 800a6e2:	d04b      	beq.n	800a77c <_printf_i+0x1a8>
 800a6e4:	4616      	mov	r6, r2
 800a6e6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6ea:	fb03 5711 	mls	r7, r3, r1, r5
 800a6ee:	5dc7      	ldrb	r7, [r0, r7]
 800a6f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6f4:	462f      	mov	r7, r5
 800a6f6:	42bb      	cmp	r3, r7
 800a6f8:	460d      	mov	r5, r1
 800a6fa:	d9f4      	bls.n	800a6e6 <_printf_i+0x112>
 800a6fc:	2b08      	cmp	r3, #8
 800a6fe:	d10b      	bne.n	800a718 <_printf_i+0x144>
 800a700:	6823      	ldr	r3, [r4, #0]
 800a702:	07df      	lsls	r7, r3, #31
 800a704:	d508      	bpl.n	800a718 <_printf_i+0x144>
 800a706:	6923      	ldr	r3, [r4, #16]
 800a708:	6861      	ldr	r1, [r4, #4]
 800a70a:	4299      	cmp	r1, r3
 800a70c:	bfde      	ittt	le
 800a70e:	2330      	movle	r3, #48	@ 0x30
 800a710:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a714:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a718:	1b92      	subs	r2, r2, r6
 800a71a:	6122      	str	r2, [r4, #16]
 800a71c:	f8cd a000 	str.w	sl, [sp]
 800a720:	464b      	mov	r3, r9
 800a722:	aa03      	add	r2, sp, #12
 800a724:	4621      	mov	r1, r4
 800a726:	4640      	mov	r0, r8
 800a728:	f7ff fee6 	bl	800a4f8 <_printf_common>
 800a72c:	3001      	adds	r0, #1
 800a72e:	d14a      	bne.n	800a7c6 <_printf_i+0x1f2>
 800a730:	f04f 30ff 	mov.w	r0, #4294967295
 800a734:	b004      	add	sp, #16
 800a736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	f043 0320 	orr.w	r3, r3, #32
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	4833      	ldr	r0, [pc, #204]	@ (800a810 <_printf_i+0x23c>)
 800a744:	2778      	movs	r7, #120	@ 0x78
 800a746:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a74a:	6823      	ldr	r3, [r4, #0]
 800a74c:	6831      	ldr	r1, [r6, #0]
 800a74e:	061f      	lsls	r7, r3, #24
 800a750:	f851 5b04 	ldr.w	r5, [r1], #4
 800a754:	d402      	bmi.n	800a75c <_printf_i+0x188>
 800a756:	065f      	lsls	r7, r3, #25
 800a758:	bf48      	it	mi
 800a75a:	b2ad      	uxthmi	r5, r5
 800a75c:	6031      	str	r1, [r6, #0]
 800a75e:	07d9      	lsls	r1, r3, #31
 800a760:	bf44      	itt	mi
 800a762:	f043 0320 	orrmi.w	r3, r3, #32
 800a766:	6023      	strmi	r3, [r4, #0]
 800a768:	b11d      	cbz	r5, 800a772 <_printf_i+0x19e>
 800a76a:	2310      	movs	r3, #16
 800a76c:	e7ac      	b.n	800a6c8 <_printf_i+0xf4>
 800a76e:	4827      	ldr	r0, [pc, #156]	@ (800a80c <_printf_i+0x238>)
 800a770:	e7e9      	b.n	800a746 <_printf_i+0x172>
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	f023 0320 	bic.w	r3, r3, #32
 800a778:	6023      	str	r3, [r4, #0]
 800a77a:	e7f6      	b.n	800a76a <_printf_i+0x196>
 800a77c:	4616      	mov	r6, r2
 800a77e:	e7bd      	b.n	800a6fc <_printf_i+0x128>
 800a780:	6833      	ldr	r3, [r6, #0]
 800a782:	6825      	ldr	r5, [r4, #0]
 800a784:	6961      	ldr	r1, [r4, #20]
 800a786:	1d18      	adds	r0, r3, #4
 800a788:	6030      	str	r0, [r6, #0]
 800a78a:	062e      	lsls	r6, r5, #24
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	d501      	bpl.n	800a794 <_printf_i+0x1c0>
 800a790:	6019      	str	r1, [r3, #0]
 800a792:	e002      	b.n	800a79a <_printf_i+0x1c6>
 800a794:	0668      	lsls	r0, r5, #25
 800a796:	d5fb      	bpl.n	800a790 <_printf_i+0x1bc>
 800a798:	8019      	strh	r1, [r3, #0]
 800a79a:	2300      	movs	r3, #0
 800a79c:	6123      	str	r3, [r4, #16]
 800a79e:	4616      	mov	r6, r2
 800a7a0:	e7bc      	b.n	800a71c <_printf_i+0x148>
 800a7a2:	6833      	ldr	r3, [r6, #0]
 800a7a4:	1d1a      	adds	r2, r3, #4
 800a7a6:	6032      	str	r2, [r6, #0]
 800a7a8:	681e      	ldr	r6, [r3, #0]
 800a7aa:	6862      	ldr	r2, [r4, #4]
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	f7f5 fd3e 	bl	8000230 <memchr>
 800a7b4:	b108      	cbz	r0, 800a7ba <_printf_i+0x1e6>
 800a7b6:	1b80      	subs	r0, r0, r6
 800a7b8:	6060      	str	r0, [r4, #4]
 800a7ba:	6863      	ldr	r3, [r4, #4]
 800a7bc:	6123      	str	r3, [r4, #16]
 800a7be:	2300      	movs	r3, #0
 800a7c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7c4:	e7aa      	b.n	800a71c <_printf_i+0x148>
 800a7c6:	6923      	ldr	r3, [r4, #16]
 800a7c8:	4632      	mov	r2, r6
 800a7ca:	4649      	mov	r1, r9
 800a7cc:	4640      	mov	r0, r8
 800a7ce:	47d0      	blx	sl
 800a7d0:	3001      	adds	r0, #1
 800a7d2:	d0ad      	beq.n	800a730 <_printf_i+0x15c>
 800a7d4:	6823      	ldr	r3, [r4, #0]
 800a7d6:	079b      	lsls	r3, r3, #30
 800a7d8:	d413      	bmi.n	800a802 <_printf_i+0x22e>
 800a7da:	68e0      	ldr	r0, [r4, #12]
 800a7dc:	9b03      	ldr	r3, [sp, #12]
 800a7de:	4298      	cmp	r0, r3
 800a7e0:	bfb8      	it	lt
 800a7e2:	4618      	movlt	r0, r3
 800a7e4:	e7a6      	b.n	800a734 <_printf_i+0x160>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	4632      	mov	r2, r6
 800a7ea:	4649      	mov	r1, r9
 800a7ec:	4640      	mov	r0, r8
 800a7ee:	47d0      	blx	sl
 800a7f0:	3001      	adds	r0, #1
 800a7f2:	d09d      	beq.n	800a730 <_printf_i+0x15c>
 800a7f4:	3501      	adds	r5, #1
 800a7f6:	68e3      	ldr	r3, [r4, #12]
 800a7f8:	9903      	ldr	r1, [sp, #12]
 800a7fa:	1a5b      	subs	r3, r3, r1
 800a7fc:	42ab      	cmp	r3, r5
 800a7fe:	dcf2      	bgt.n	800a7e6 <_printf_i+0x212>
 800a800:	e7eb      	b.n	800a7da <_printf_i+0x206>
 800a802:	2500      	movs	r5, #0
 800a804:	f104 0619 	add.w	r6, r4, #25
 800a808:	e7f5      	b.n	800a7f6 <_printf_i+0x222>
 800a80a:	bf00      	nop
 800a80c:	0800a961 	.word	0x0800a961
 800a810:	0800a972 	.word	0x0800a972

0800a814 <memmove>:
 800a814:	4288      	cmp	r0, r1
 800a816:	b510      	push	{r4, lr}
 800a818:	eb01 0402 	add.w	r4, r1, r2
 800a81c:	d902      	bls.n	800a824 <memmove+0x10>
 800a81e:	4284      	cmp	r4, r0
 800a820:	4623      	mov	r3, r4
 800a822:	d807      	bhi.n	800a834 <memmove+0x20>
 800a824:	1e43      	subs	r3, r0, #1
 800a826:	42a1      	cmp	r1, r4
 800a828:	d008      	beq.n	800a83c <memmove+0x28>
 800a82a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a82e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a832:	e7f8      	b.n	800a826 <memmove+0x12>
 800a834:	4402      	add	r2, r0
 800a836:	4601      	mov	r1, r0
 800a838:	428a      	cmp	r2, r1
 800a83a:	d100      	bne.n	800a83e <memmove+0x2a>
 800a83c:	bd10      	pop	{r4, pc}
 800a83e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a842:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a846:	e7f7      	b.n	800a838 <memmove+0x24>

0800a848 <_sbrk_r>:
 800a848:	b538      	push	{r3, r4, r5, lr}
 800a84a:	4d06      	ldr	r5, [pc, #24]	@ (800a864 <_sbrk_r+0x1c>)
 800a84c:	2300      	movs	r3, #0
 800a84e:	4604      	mov	r4, r0
 800a850:	4608      	mov	r0, r1
 800a852:	602b      	str	r3, [r5, #0]
 800a854:	f7f7 fe3e 	bl	80024d4 <_sbrk>
 800a858:	1c43      	adds	r3, r0, #1
 800a85a:	d102      	bne.n	800a862 <_sbrk_r+0x1a>
 800a85c:	682b      	ldr	r3, [r5, #0]
 800a85e:	b103      	cbz	r3, 800a862 <_sbrk_r+0x1a>
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	bd38      	pop	{r3, r4, r5, pc}
 800a864:	20000dbc 	.word	0x20000dbc

0800a868 <memcpy>:
 800a868:	440a      	add	r2, r1
 800a86a:	4291      	cmp	r1, r2
 800a86c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a870:	d100      	bne.n	800a874 <memcpy+0xc>
 800a872:	4770      	bx	lr
 800a874:	b510      	push	{r4, lr}
 800a876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a87a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a87e:	4291      	cmp	r1, r2
 800a880:	d1f9      	bne.n	800a876 <memcpy+0xe>
 800a882:	bd10      	pop	{r4, pc}

0800a884 <_realloc_r>:
 800a884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a888:	4680      	mov	r8, r0
 800a88a:	4615      	mov	r5, r2
 800a88c:	460c      	mov	r4, r1
 800a88e:	b921      	cbnz	r1, 800a89a <_realloc_r+0x16>
 800a890:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a894:	4611      	mov	r1, r2
 800a896:	f7ff bc4b 	b.w	800a130 <_malloc_r>
 800a89a:	b92a      	cbnz	r2, 800a8a8 <_realloc_r+0x24>
 800a89c:	f7ff fbdc 	bl	800a058 <_free_r>
 800a8a0:	2400      	movs	r4, #0
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8a8:	f000 f81a 	bl	800a8e0 <_malloc_usable_size_r>
 800a8ac:	4285      	cmp	r5, r0
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	d802      	bhi.n	800a8b8 <_realloc_r+0x34>
 800a8b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a8b6:	d8f4      	bhi.n	800a8a2 <_realloc_r+0x1e>
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	4640      	mov	r0, r8
 800a8bc:	f7ff fc38 	bl	800a130 <_malloc_r>
 800a8c0:	4607      	mov	r7, r0
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	d0ec      	beq.n	800a8a0 <_realloc_r+0x1c>
 800a8c6:	42b5      	cmp	r5, r6
 800a8c8:	462a      	mov	r2, r5
 800a8ca:	4621      	mov	r1, r4
 800a8cc:	bf28      	it	cs
 800a8ce:	4632      	movcs	r2, r6
 800a8d0:	f7ff ffca 	bl	800a868 <memcpy>
 800a8d4:	4621      	mov	r1, r4
 800a8d6:	4640      	mov	r0, r8
 800a8d8:	f7ff fbbe 	bl	800a058 <_free_r>
 800a8dc:	463c      	mov	r4, r7
 800a8de:	e7e0      	b.n	800a8a2 <_realloc_r+0x1e>

0800a8e0 <_malloc_usable_size_r>:
 800a8e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e4:	1f18      	subs	r0, r3, #4
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	bfbc      	itt	lt
 800a8ea:	580b      	ldrlt	r3, [r1, r0]
 800a8ec:	18c0      	addlt	r0, r0, r3
 800a8ee:	4770      	bx	lr

0800a8f0 <_init>:
 800a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f2:	bf00      	nop
 800a8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8f6:	bc08      	pop	{r3}
 800a8f8:	469e      	mov	lr, r3
 800a8fa:	4770      	bx	lr

0800a8fc <_fini>:
 800a8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fe:	bf00      	nop
 800a900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a902:	bc08      	pop	{r3}
 800a904:	469e      	mov	lr, r3
 800a906:	4770      	bx	lr
