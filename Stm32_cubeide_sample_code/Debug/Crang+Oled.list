
Crang+Oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bee0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000086c  0800c0c0  0800c0c0  0000d0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c92c  0800c92c  0000e074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c92c  0800c92c  0000d92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c934  0800c934  0000e074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c934  0800c934  0000d934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c938  0800c938  0000d938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800c93c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001088  20000074  0800c9b0  0000e074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010fc  0800c9b0  0000e0fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022d04  00000000  00000000  0000e0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aba  00000000  00000000  00030da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ce8  00000000  00000000  00035868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000166f  00000000  00000000  00037550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b9e  00000000  00000000  00038bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026e4e  00000000  00000000  0005c75d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e19d3  00000000  00000000  000835ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00164f7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008008  00000000  00000000  00164fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0016cfcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c0a8 	.word	0x0800c0a8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	0800c0a8 	.word	0x0800c0a8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96a 	b.w	8000da8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	460c      	mov	r4, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14e      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000af8:	4694      	mov	ip, r2
 8000afa:	458c      	cmp	ip, r1
 8000afc:	4686      	mov	lr, r0
 8000afe:	fab2 f282 	clz	r2, r2
 8000b02:	d962      	bls.n	8000bca <__udivmoddi4+0xde>
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b14:	4319      	orrs	r1, r3
 8000b16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f f68c 	uxth.w	r6, ip
 8000b22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb04 f106 	mul.w	r1, r4, r6
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b42:	f080 8112 	bcs.w	8000d6a <__udivmoddi4+0x27e>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 810f 	bls.w	8000d6a <__udivmoddi4+0x27e>
 8000b4c:	3c02      	subs	r4, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a59      	subs	r1, r3, r1
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb00 f606 	mul.w	r6, r0, r6
 8000b66:	429e      	cmp	r6, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x94>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b72:	f080 80fc 	bcs.w	8000d6e <__udivmoddi4+0x282>
 8000b76:	429e      	cmp	r6, r3
 8000b78:	f240 80f9 	bls.w	8000d6e <__udivmoddi4+0x282>
 8000b7c:	4463      	add	r3, ip
 8000b7e:	3802      	subs	r0, #2
 8000b80:	1b9b      	subs	r3, r3, r6
 8000b82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b86:	2100      	movs	r1, #0
 8000b88:	b11d      	cbz	r5, 8000b92 <__udivmoddi4+0xa6>
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d905      	bls.n	8000ba6 <__udivmoddi4+0xba>
 8000b9a:	b10d      	cbz	r5, 8000ba0 <__udivmoddi4+0xb4>
 8000b9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e7f5      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000ba6:	fab3 f183 	clz	r1, r3
 8000baa:	2900      	cmp	r1, #0
 8000bac:	d146      	bne.n	8000c3c <__udivmoddi4+0x150>
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xcc>
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	f0c0 80f0 	bcc.w	8000d98 <__udivmoddi4+0x2ac>
 8000bb8:	1a86      	subs	r6, r0, r2
 8000bba:	eb64 0303 	sbc.w	r3, r4, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d0e6      	beq.n	8000b92 <__udivmoddi4+0xa6>
 8000bc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc8:	e7e3      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	f040 8090 	bne.w	8000cf0 <__udivmoddi4+0x204>
 8000bd0:	eba1 040c 	sub.w	r4, r1, ip
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	fa1f f78c 	uxth.w	r7, ip
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bee:	fb07 f006 	mul.w	r0, r7, r6
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x11c>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x11a>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f200 80cd 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000c06:	4626      	mov	r6, r4
 8000c08:	1a1c      	subs	r4, r3, r0
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c12:	fb08 4410 	mls	r4, r8, r0, r4
 8000c16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1a:	fb00 f707 	mul.w	r7, r0, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x148>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x146>
 8000c2c:	429f      	cmp	r7, r3
 8000c2e:	f200 80b0 	bhi.w	8000d92 <__udivmoddi4+0x2a6>
 8000c32:	4620      	mov	r0, r4
 8000c34:	1bdb      	subs	r3, r3, r7
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	e7a5      	b.n	8000b88 <__udivmoddi4+0x9c>
 8000c3c:	f1c1 0620 	rsb	r6, r1, #32
 8000c40:	408b      	lsls	r3, r1
 8000c42:	fa22 f706 	lsr.w	r7, r2, r6
 8000c46:	431f      	orrs	r7, r3
 8000c48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c50:	ea43 030c 	orr.w	r3, r3, ip
 8000c54:	40f4      	lsrs	r4, r6
 8000c56:	fa00 f801 	lsl.w	r8, r0, r1
 8000c5a:	0c38      	lsrs	r0, r7, #16
 8000c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c60:	fbb4 fef0 	udiv	lr, r4, r0
 8000c64:	fa1f fc87 	uxth.w	ip, r7
 8000c68:	fb00 441e 	mls	r4, r0, lr, r4
 8000c6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c70:	fb0e f90c 	mul.w	r9, lr, ip
 8000c74:	45a1      	cmp	r9, r4
 8000c76:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x1a6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c82:	f080 8084 	bcs.w	8000d8e <__udivmoddi4+0x2a2>
 8000c86:	45a1      	cmp	r9, r4
 8000c88:	f240 8081 	bls.w	8000d8e <__udivmoddi4+0x2a2>
 8000c8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	eba4 0409 	sub.w	r4, r4, r9
 8000c96:	fa1f f983 	uxth.w	r9, r3
 8000c9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ca2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x1d2>
 8000cae:	193c      	adds	r4, r7, r4
 8000cb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cb4:	d267      	bcs.n	8000d86 <__udivmoddi4+0x29a>
 8000cb6:	45a4      	cmp	ip, r4
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0x29a>
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cc6:	eba4 040c 	sub.w	r4, r4, ip
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	46ce      	mov	lr, r9
 8000cce:	469c      	mov	ip, r3
 8000cd0:	d351      	bcc.n	8000d76 <__udivmoddi4+0x28a>
 8000cd2:	d04e      	beq.n	8000d72 <__udivmoddi4+0x286>
 8000cd4:	b155      	cbz	r5, 8000cec <__udivmoddi4+0x200>
 8000cd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cda:	eb64 040c 	sbc.w	r4, r4, ip
 8000cde:	fa04 f606 	lsl.w	r6, r4, r6
 8000ce2:	40cb      	lsrs	r3, r1
 8000ce4:	431e      	orrs	r6, r3
 8000ce6:	40cc      	lsrs	r4, r1
 8000ce8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	e750      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000d00:	4094      	lsls	r4, r2
 8000d02:	430c      	orrs	r4, r1
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3110 	mls	r1, r8, r0, r3
 8000d18:	0c23      	lsrs	r3, r4, #16
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f107 	mul.w	r1, r0, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x24c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d2e:	d22c      	bcs.n	8000d8a <__udivmoddi4+0x29e>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d92a      	bls.n	8000d8a <__udivmoddi4+0x29e>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d40:	fb08 3311 	mls	r3, r8, r1, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb01 f307 	mul.w	r3, r1, r7
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x276>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d58:	d213      	bcs.n	8000d82 <__udivmoddi4+0x296>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d911      	bls.n	8000d82 <__udivmoddi4+0x296>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	1ae4      	subs	r4, r4, r3
 8000d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d68:	e739      	b.n	8000bde <__udivmoddi4+0xf2>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	e6f0      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e706      	b.n	8000b80 <__udivmoddi4+0x94>
 8000d72:	45c8      	cmp	r8, r9
 8000d74:	d2ae      	bcs.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7a8      	b.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d82:	4631      	mov	r1, r6
 8000d84:	e7ed      	b.n	8000d62 <__udivmoddi4+0x276>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e799      	b.n	8000cbe <__udivmoddi4+0x1d2>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e7d4      	b.n	8000d38 <__udivmoddi4+0x24c>
 8000d8e:	46d6      	mov	lr, sl
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1a6>
 8000d92:	4463      	add	r3, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e74d      	b.n	8000c34 <__udivmoddi4+0x148>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e70f      	b.n	8000bc0 <__udivmoddi4+0xd4>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	e730      	b.n	8000c08 <__udivmoddi4+0x11c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <setup_param>:
#include <stdbool.h>
#include "ws2812.h"

extern uint16_t wr_buf[WR_BUF_LEN];
struct LedStates LED[NUM_ledStates] = { 0 };
void setup_param(struct LedStates *LED, int Red, int Green, int Blue) {
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	603b      	str	r3, [r7, #0]
	LED->red = Red;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	601a      	str	r2, [r3, #0]
	LED->green = Green;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	605a      	str	r2, [r3, #4]
	LED->blue = Blue;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	683a      	ldr	r2, [r7, #0]
 8000dca:	609a      	str	r2, [r3, #8]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08c      	sub	sp, #48	@ 0x30
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2220      	movs	r2, #32
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f00a fcd9 	bl	800b7a8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000df6:	4b57      	ldr	r3, [pc, #348]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000df8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000dfc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dfe:	4b55      	ldr	r3, [pc, #340]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000e00:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e06:	4b53      	ldr	r3, [pc, #332]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e0c:	4b51      	ldr	r3, [pc, #324]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e12:	4b50      	ldr	r3, [pc, #320]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e18:	4b4e      	ldr	r3, [pc, #312]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e1e:	4b4d      	ldr	r3, [pc, #308]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000e20:	2208      	movs	r2, #8
 8000e22:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e24:	4b4b      	ldr	r3, [pc, #300]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e2a:	4b4a      	ldr	r3, [pc, #296]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 8000e30:	4b48      	ldr	r3, [pc, #288]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000e32:	2206      	movs	r2, #6
 8000e34:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e36:	4b47      	ldr	r3, [pc, #284]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000e3e:	4b45      	ldr	r3, [pc, #276]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000e40:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000e44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e46:	4b43      	ldr	r3, [pc, #268]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000e48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e4e:	4b41      	ldr	r3, [pc, #260]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e56:	4b3f      	ldr	r3, [pc, #252]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e5c:	4b3d      	ldr	r3, [pc, #244]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e64:	483b      	ldr	r0, [pc, #236]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000e66:	f003 fb49 	bl	80044fc <HAL_ADC_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000e70:	f001 fbf5 	bl	800265e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4835      	ldr	r0, [pc, #212]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000e80:	f004 fdfc 	bl	8005a7c <HAL_ADCEx_MultiModeConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000e8a:	f001 fbe8 	bl	800265e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e8e:	4b32      	ldr	r3, [pc, #200]	@ (8000f58 <MX_ADC1_Init+0x180>)
 8000e90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e92:	2306      	movs	r3, #6
 8000e94:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e9a:	237f      	movs	r3, #127	@ 0x7f
 8000e9c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	482a      	ldr	r0, [pc, #168]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000eac:	f003 ff96 	bl	8004ddc <HAL_ADC_ConfigChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000eb6:	f001 fbd2 	bl	800265e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eba:	4b28      	ldr	r3, [pc, #160]	@ (8000f5c <MX_ADC1_Init+0x184>)
 8000ebc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ebe:	230c      	movs	r3, #12
 8000ec0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4823      	ldr	r0, [pc, #140]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000ec8:	f003 ff88 	bl	8004ddc <HAL_ADC_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000ed2:	f001 fbc4 	bl	800265e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ed6:	4b22      	ldr	r3, [pc, #136]	@ (8000f60 <MX_ADC1_Init+0x188>)
 8000ed8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000eda:	2312      	movs	r3, #18
 8000edc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	481c      	ldr	r0, [pc, #112]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000ee4:	f003 ff7a 	bl	8004ddc <HAL_ADC_ConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000eee:	f001 fbb6 	bl	800265e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f64 <MX_ADC1_Init+0x18c>)
 8000ef4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000ef6:	2318      	movs	r3, #24
 8000ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4815      	ldr	r0, [pc, #84]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000f00:	f003 ff6c 	bl	8004ddc <HAL_ADC_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000f0a:	f001 fba8 	bl	800265e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <MX_ADC1_Init+0x190>)
 8000f10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480d      	ldr	r0, [pc, #52]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000f1e:	f003 ff5d 	bl	8004ddc <HAL_ADC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000f28:	f001 fb99 	bl	800265e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <MX_ADC1_Init+0x194>)
 8000f2e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000f30:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000f34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4806      	ldr	r0, [pc, #24]	@ (8000f54 <MX_ADC1_Init+0x17c>)
 8000f3c:	f003 ff4e 	bl	8004ddc <HAL_ADC_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 8000f46:	f001 fb8a 	bl	800265e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	3730      	adds	r7, #48	@ 0x30
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200000d8 	.word	0x200000d8
 8000f58:	08600004 	.word	0x08600004
 8000f5c:	04300002 	.word	0x04300002
 8000f60:	25b00200 	.word	0x25b00200
 8000f64:	21800100 	.word	0x21800100
 8000f68:	1d500080 	.word	0x1d500080
 8000f6c:	19200040 	.word	0x19200040

08000f70 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f76:	463b      	mov	r3, r7
 8000f78:	2220      	movs	r2, #32
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f00a fc13 	bl	800b7a8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f82:	4b56      	ldr	r3, [pc, #344]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8000f84:	4a56      	ldr	r2, [pc, #344]	@ (80010e0 <MX_ADC2_Init+0x170>)
 8000f86:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f88:	4b54      	ldr	r3, [pc, #336]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8000f8a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f8e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f90:	4b52      	ldr	r3, [pc, #328]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f96:	4b51      	ldr	r3, [pc, #324]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000f9c:	4b4f      	ldr	r3, [pc, #316]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fa2:	4b4e      	ldr	r3, [pc, #312]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fa8:	4b4c      	ldr	r3, [pc, #304]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8000faa:	2208      	movs	r2, #8
 8000fac:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fae:	4b4b      	ldr	r3, [pc, #300]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fb4:	4b49      	ldr	r3, [pc, #292]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 6;
 8000fba:	4b48      	ldr	r3, [pc, #288]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8000fbc:	2206      	movs	r2, #6
 8000fbe:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fc0:	4b46      	ldr	r3, [pc, #280]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000fc8:	4b44      	ldr	r3, [pc, #272]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8000fca:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000fce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fd0:	4b42      	ldr	r3, [pc, #264]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8000fd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000fd8:	4b40      	ldr	r3, [pc, #256]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fe0:	4b3e      	ldr	r3, [pc, #248]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8000fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000fee:	4b3b      	ldr	r3, [pc, #236]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8000ff0:	220c      	movs	r2, #12
 8000ff2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000ff4:	4b39      	ldr	r3, [pc, #228]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8000ff6:	2280      	movs	r2, #128	@ 0x80
 8000ff8:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000ffa:	4b38      	ldr	r3, [pc, #224]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001000:	4b36      	ldr	r3, [pc, #216]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8001002:	2201      	movs	r2, #1
 8001004:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001006:	4835      	ldr	r0, [pc, #212]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8001008:	f003 fa78 	bl	80044fc <HAL_ADC_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 8001012:	f001 fb24 	bl	800265e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001016:	4b33      	ldr	r3, [pc, #204]	@ (80010e4 <MX_ADC2_Init+0x174>)
 8001018:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800101a:	2306      	movs	r3, #6
 800101c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001022:	237f      	movs	r3, #127	@ 0x7f
 8001024:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001026:	2304      	movs	r3, #4
 8001028:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800102e:	463b      	mov	r3, r7
 8001030:	4619      	mov	r1, r3
 8001032:	482a      	ldr	r0, [pc, #168]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8001034:	f003 fed2 	bl	8004ddc <HAL_ADC_ConfigChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 800103e:	f001 fb0e 	bl	800265e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001042:	4b29      	ldr	r3, [pc, #164]	@ (80010e8 <MX_ADC2_Init+0x178>)
 8001044:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001046:	230c      	movs	r3, #12
 8001048:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800104a:	463b      	mov	r3, r7
 800104c:	4619      	mov	r1, r3
 800104e:	4823      	ldr	r0, [pc, #140]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8001050:	f003 fec4 	bl	8004ddc <HAL_ADC_ConfigChannel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 800105a:	f001 fb00 	bl	800265e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800105e:	4b23      	ldr	r3, [pc, #140]	@ (80010ec <MX_ADC2_Init+0x17c>)
 8001060:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001062:	2312      	movs	r3, #18
 8001064:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001066:	463b      	mov	r3, r7
 8001068:	4619      	mov	r1, r3
 800106a:	481c      	ldr	r0, [pc, #112]	@ (80010dc <MX_ADC2_Init+0x16c>)
 800106c:	f003 feb6 	bl	8004ddc <HAL_ADC_ConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 8001076:	f001 faf2 	bl	800265e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800107a:	4b1d      	ldr	r3, [pc, #116]	@ (80010f0 <MX_ADC2_Init+0x180>)
 800107c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800107e:	2318      	movs	r3, #24
 8001080:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001082:	463b      	mov	r3, r7
 8001084:	4619      	mov	r1, r3
 8001086:	4815      	ldr	r0, [pc, #84]	@ (80010dc <MX_ADC2_Init+0x16c>)
 8001088:	f003 fea8 	bl	8004ddc <HAL_ADC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC2_Init+0x126>
  {
    Error_Handler();
 8001092:	f001 fae4 	bl	800265e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001096:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <MX_ADC2_Init+0x184>)
 8001098:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800109a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800109e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010a0:	463b      	mov	r3, r7
 80010a2:	4619      	mov	r1, r3
 80010a4:	480d      	ldr	r0, [pc, #52]	@ (80010dc <MX_ADC2_Init+0x16c>)
 80010a6:	f003 fe99 	bl	8004ddc <HAL_ADC_ConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC2_Init+0x144>
  {
    Error_Handler();
 80010b0:	f001 fad5 	bl	800265e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80010b4:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <MX_ADC2_Init+0x188>)
 80010b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80010b8:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80010bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	4806      	ldr	r0, [pc, #24]	@ (80010dc <MX_ADC2_Init+0x16c>)
 80010c4:	f003 fe8a 	bl	8004ddc <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC2_Init+0x162>
  {
    Error_Handler();
 80010ce:	f001 fac6 	bl	800265e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	3720      	adds	r7, #32
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000144 	.word	0x20000144
 80010e0:	50000100 	.word	0x50000100
 80010e4:	2e300800 	.word	0x2e300800
 80010e8:	14f00020 	.word	0x14f00020
 80010ec:	10c00010 	.word	0x10c00010
 80010f0:	0c900008 	.word	0x0c900008
 80010f4:	36902000 	.word	0x36902000
 80010f8:	47520000 	.word	0x47520000

080010fc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b09e      	sub	sp, #120	@ 0x78
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001114:	f107 0320 	add.w	r3, r7, #32
 8001118:	2244      	movs	r2, #68	@ 0x44
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f00a fb43 	bl	800b7a8 <memset>
  if(adcHandle->Instance==ADC1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800112a:	f040 808b 	bne.w	8001244 <HAL_ADC_MspInit+0x148>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800112e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001132:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001134:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001138:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113a:	f107 0320 	add.w	r3, r7, #32
 800113e:	4618      	mov	r0, r3
 8001140:	f006 fd24 	bl	8007b8c <HAL_RCCEx_PeriphCLKConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800114a:	f001 fa88 	bl	800265e <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800114e:	4b87      	ldr	r3, [pc, #540]	@ (800136c <HAL_ADC_MspInit+0x270>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	3301      	adds	r3, #1
 8001154:	4a85      	ldr	r2, [pc, #532]	@ (800136c <HAL_ADC_MspInit+0x270>)
 8001156:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001158:	4b84      	ldr	r3, [pc, #528]	@ (800136c <HAL_ADC_MspInit+0x270>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d10b      	bne.n	8001178 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001160:	4b83      	ldr	r3, [pc, #524]	@ (8001370 <HAL_ADC_MspInit+0x274>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001164:	4a82      	ldr	r2, [pc, #520]	@ (8001370 <HAL_ADC_MspInit+0x274>)
 8001166:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800116a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116c:	4b80      	ldr	r3, [pc, #512]	@ (8001370 <HAL_ADC_MspInit+0x274>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001170:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001178:	4b7d      	ldr	r3, [pc, #500]	@ (8001370 <HAL_ADC_MspInit+0x274>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117c:	4a7c      	ldr	r2, [pc, #496]	@ (8001370 <HAL_ADC_MspInit+0x274>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001184:	4b7a      	ldr	r3, [pc, #488]	@ (8001370 <HAL_ADC_MspInit+0x274>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
 800118e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	4b77      	ldr	r3, [pc, #476]	@ (8001370 <HAL_ADC_MspInit+0x274>)
 8001192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001194:	4a76      	ldr	r2, [pc, #472]	@ (8001370 <HAL_ADC_MspInit+0x274>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119c:	4b74      	ldr	r3, [pc, #464]	@ (8001370 <HAL_ADC_MspInit+0x274>)
 800119e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	697b      	ldr	r3, [r7, #20]
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011a8:	230f      	movs	r3, #15
 80011aa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ac:	2303      	movs	r3, #3
 80011ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011b8:	4619      	mov	r1, r3
 80011ba:	486e      	ldr	r0, [pc, #440]	@ (8001374 <HAL_ADC_MspInit+0x278>)
 80011bc:	f005 f8ec 	bl	8006398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011c0:	2303      	movs	r3, #3
 80011c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c4:	2303      	movs	r3, #3
 80011c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011d0:	4619      	mov	r1, r3
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d6:	f005 f8df 	bl	8006398 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011da:	4b67      	ldr	r3, [pc, #412]	@ (8001378 <HAL_ADC_MspInit+0x27c>)
 80011dc:	4a67      	ldr	r2, [pc, #412]	@ (800137c <HAL_ADC_MspInit+0x280>)
 80011de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011e0:	4b65      	ldr	r3, [pc, #404]	@ (8001378 <HAL_ADC_MspInit+0x27c>)
 80011e2:	2205      	movs	r2, #5
 80011e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011e6:	4b64      	ldr	r3, [pc, #400]	@ (8001378 <HAL_ADC_MspInit+0x27c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ec:	4b62      	ldr	r3, [pc, #392]	@ (8001378 <HAL_ADC_MspInit+0x27c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011f2:	4b61      	ldr	r3, [pc, #388]	@ (8001378 <HAL_ADC_MspInit+0x27c>)
 80011f4:	2280      	movs	r2, #128	@ 0x80
 80011f6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011f8:	4b5f      	ldr	r3, [pc, #380]	@ (8001378 <HAL_ADC_MspInit+0x27c>)
 80011fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011fe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001200:	4b5d      	ldr	r3, [pc, #372]	@ (8001378 <HAL_ADC_MspInit+0x27c>)
 8001202:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001206:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001208:	4b5b      	ldr	r3, [pc, #364]	@ (8001378 <HAL_ADC_MspInit+0x27c>)
 800120a:	2220      	movs	r2, #32
 800120c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800120e:	4b5a      	ldr	r3, [pc, #360]	@ (8001378 <HAL_ADC_MspInit+0x27c>)
 8001210:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001214:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001216:	4858      	ldr	r0, [pc, #352]	@ (8001378 <HAL_ADC_MspInit+0x27c>)
 8001218:	f004 fde4 	bl	8005de4 <HAL_DMA_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 8001222:	f001 fa1c 	bl	800265e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a53      	ldr	r2, [pc, #332]	@ (8001378 <HAL_ADC_MspInit+0x27c>)
 800122a:	655a      	str	r2, [r3, #84]	@ 0x54
 800122c:	4a52      	ldr	r2, [pc, #328]	@ (8001378 <HAL_ADC_MspInit+0x27c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 4, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2104      	movs	r1, #4
 8001236:	2012      	movs	r0, #18
 8001238:	f004 fd9f 	bl	8005d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800123c:	2012      	movs	r0, #18
 800123e:	f004 fdb6 	bl	8005dae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001242:	e08f      	b.n	8001364 <HAL_ADC_MspInit+0x268>
  else if(adcHandle->Instance==ADC2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a4d      	ldr	r2, [pc, #308]	@ (8001380 <HAL_ADC_MspInit+0x284>)
 800124a:	4293      	cmp	r3, r2
 800124c:	f040 808a 	bne.w	8001364 <HAL_ADC_MspInit+0x268>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001250:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001254:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001256:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800125a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125c:	f107 0320 	add.w	r3, r7, #32
 8001260:	4618      	mov	r0, r3
 8001262:	f006 fc93 	bl	8007b8c <HAL_RCCEx_PeriphCLKConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_ADC_MspInit+0x174>
      Error_Handler();
 800126c:	f001 f9f7 	bl	800265e <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001270:	4b3e      	ldr	r3, [pc, #248]	@ (800136c <HAL_ADC_MspInit+0x270>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	4a3d      	ldr	r2, [pc, #244]	@ (800136c <HAL_ADC_MspInit+0x270>)
 8001278:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800127a:	4b3c      	ldr	r3, [pc, #240]	@ (800136c <HAL_ADC_MspInit+0x270>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d10b      	bne.n	800129a <HAL_ADC_MspInit+0x19e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001282:	4b3b      	ldr	r3, [pc, #236]	@ (8001370 <HAL_ADC_MspInit+0x274>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	4a3a      	ldr	r2, [pc, #232]	@ (8001370 <HAL_ADC_MspInit+0x274>)
 8001288:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800128c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128e:	4b38      	ldr	r3, [pc, #224]	@ (8001370 <HAL_ADC_MspInit+0x274>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	4b35      	ldr	r3, [pc, #212]	@ (8001370 <HAL_ADC_MspInit+0x274>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129e:	4a34      	ldr	r2, [pc, #208]	@ (8001370 <HAL_ADC_MspInit+0x274>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a6:	4b32      	ldr	r3, [pc, #200]	@ (8001370 <HAL_ADC_MspInit+0x274>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001370 <HAL_ADC_MspInit+0x274>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b6:	4a2e      	ldr	r2, [pc, #184]	@ (8001370 <HAL_ADC_MspInit+0x274>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012be:	4b2c      	ldr	r3, [pc, #176]	@ (8001370 <HAL_ADC_MspInit+0x274>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012ca:	23f0      	movs	r3, #240	@ 0xf0
 80012cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ce:	2303      	movs	r3, #3
 80012d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012da:	4619      	mov	r1, r3
 80012dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e0:	f005 f85a 	bl	8006398 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012e4:	2330      	movs	r3, #48	@ 0x30
 80012e6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e8:	2303      	movs	r3, #3
 80012ea:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012f4:	4619      	mov	r1, r3
 80012f6:	481f      	ldr	r0, [pc, #124]	@ (8001374 <HAL_ADC_MspInit+0x278>)
 80012f8:	f005 f84e 	bl	8006398 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80012fc:	4b21      	ldr	r3, [pc, #132]	@ (8001384 <HAL_ADC_MspInit+0x288>)
 80012fe:	4a22      	ldr	r2, [pc, #136]	@ (8001388 <HAL_ADC_MspInit+0x28c>)
 8001300:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001302:	4b20      	ldr	r3, [pc, #128]	@ (8001384 <HAL_ADC_MspInit+0x288>)
 8001304:	2224      	movs	r2, #36	@ 0x24
 8001306:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001308:	4b1e      	ldr	r3, [pc, #120]	@ (8001384 <HAL_ADC_MspInit+0x288>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800130e:	4b1d      	ldr	r3, [pc, #116]	@ (8001384 <HAL_ADC_MspInit+0x288>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001314:	4b1b      	ldr	r3, [pc, #108]	@ (8001384 <HAL_ADC_MspInit+0x288>)
 8001316:	2280      	movs	r2, #128	@ 0x80
 8001318:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800131a:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <HAL_ADC_MspInit+0x288>)
 800131c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001320:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001322:	4b18      	ldr	r3, [pc, #96]	@ (8001384 <HAL_ADC_MspInit+0x288>)
 8001324:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001328:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800132a:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <HAL_ADC_MspInit+0x288>)
 800132c:	2220      	movs	r2, #32
 800132e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8001330:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <HAL_ADC_MspInit+0x288>)
 8001332:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001336:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001338:	4812      	ldr	r0, [pc, #72]	@ (8001384 <HAL_ADC_MspInit+0x288>)
 800133a:	f004 fd53 	bl	8005de4 <HAL_DMA_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_ADC_MspInit+0x24c>
      Error_Handler();
 8001344:	f001 f98b 	bl	800265e <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a0e      	ldr	r2, [pc, #56]	@ (8001384 <HAL_ADC_MspInit+0x288>)
 800134c:	655a      	str	r2, [r3, #84]	@ 0x54
 800134e:	4a0d      	ldr	r2, [pc, #52]	@ (8001384 <HAL_ADC_MspInit+0x288>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 4, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	2104      	movs	r1, #4
 8001358:	2012      	movs	r0, #18
 800135a:	f004 fd0e 	bl	8005d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800135e:	2012      	movs	r0, #18
 8001360:	f004 fd25 	bl	8005dae <HAL_NVIC_EnableIRQ>
}
 8001364:	bf00      	nop
 8001366:	3778      	adds	r7, #120	@ 0x78
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000270 	.word	0x20000270
 8001370:	40021000 	.word	0x40021000
 8001374:	48000800 	.word	0x48000800
 8001378:	200001b0 	.word	0x200001b0
 800137c:	40020008 	.word	0x40020008
 8001380:	50000100 	.word	0x50000100
 8001384:	20000210 	.word	0x20000210
 8001388:	4002001c 	.word	0x4002001c

0800138c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001392:	4b1a      	ldr	r3, [pc, #104]	@ (80013fc <MX_DMA_Init+0x70>)
 8001394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001396:	4a19      	ldr	r2, [pc, #100]	@ (80013fc <MX_DMA_Init+0x70>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6493      	str	r3, [r2, #72]	@ 0x48
 800139e:	4b17      	ldr	r3, [pc, #92]	@ (80013fc <MX_DMA_Init+0x70>)
 80013a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013aa:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <MX_DMA_Init+0x70>)
 80013ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ae:	4a13      	ldr	r2, [pc, #76]	@ (80013fc <MX_DMA_Init+0x70>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6493      	str	r3, [r2, #72]	@ 0x48
 80013b6:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <MX_DMA_Init+0x70>)
 80013b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2102      	movs	r1, #2
 80013c6:	200b      	movs	r0, #11
 80013c8:	f004 fcd7 	bl	8005d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013cc:	200b      	movs	r0, #11
 80013ce:	f004 fcee 	bl	8005dae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2102      	movs	r1, #2
 80013d6:	200c      	movs	r0, #12
 80013d8:	f004 fccf 	bl	8005d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80013dc:	200c      	movs	r0, #12
 80013de:	f004 fce6 	bl	8005dae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 3, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2103      	movs	r1, #3
 80013e6:	200d      	movs	r0, #13
 80013e8:	f004 fcc7 	bl	8005d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80013ec:	200d      	movs	r0, #13
 80013ee:	f004 fcde 	bl	8005dae <HAL_NVIC_EnableIRQ>

}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000

08001400 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	@ 0x28
 8001404:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001416:	4b30      	ldr	r3, [pc, #192]	@ (80014d8 <MX_GPIO_Init+0xd8>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	4a2f      	ldr	r2, [pc, #188]	@ (80014d8 <MX_GPIO_Init+0xd8>)
 800141c:	f043 0320 	orr.w	r3, r3, #32
 8001420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001422:	4b2d      	ldr	r3, [pc, #180]	@ (80014d8 <MX_GPIO_Init+0xd8>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	f003 0320 	and.w	r3, r3, #32
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	4b2a      	ldr	r3, [pc, #168]	@ (80014d8 <MX_GPIO_Init+0xd8>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001432:	4a29      	ldr	r2, [pc, #164]	@ (80014d8 <MX_GPIO_Init+0xd8>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143a:	4b27      	ldr	r3, [pc, #156]	@ (80014d8 <MX_GPIO_Init+0xd8>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	4b24      	ldr	r3, [pc, #144]	@ (80014d8 <MX_GPIO_Init+0xd8>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	4a23      	ldr	r2, [pc, #140]	@ (80014d8 <MX_GPIO_Init+0xd8>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001452:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <MX_GPIO_Init+0xd8>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <MX_GPIO_Init+0xd8>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	4a1d      	ldr	r2, [pc, #116]	@ (80014d8 <MX_GPIO_Init+0xd8>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146a:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <MX_GPIO_Init+0xd8>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|CS_Pin_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	f248 0108 	movw	r1, #32776	@ 0x8008
 800147c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001480:	f005 f924 	bl	80066cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, output_Pin|Neopixel_regulator_Pin, GPIO_PIN_RESET);
 8001484:	2200      	movs	r2, #0
 8001486:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800148a:	4814      	ldr	r0, [pc, #80]	@ (80014dc <MX_GPIO_Init+0xdc>)
 800148c:	f005 f91e 	bl	80066cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 CS_Pin_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|CS_Pin_Pin;
 8001490:	f248 0308 	movw	r3, #32776	@ 0x8008
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ac:	f004 ff74 	bl	8006398 <HAL_GPIO_Init>

  /*Configure GPIO pins : output_Pin Neopixel_regulator_Pin */
  GPIO_InitStruct.Pin = output_Pin|Neopixel_regulator_Pin;
 80014b0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80014b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	4804      	ldr	r0, [pc, #16]	@ (80014dc <MX_GPIO_Init+0xdc>)
 80014ca:	f004 ff65 	bl	8006398 <HAL_GPIO_Init>

}
 80014ce:	bf00      	nop
 80014d0:	3728      	adds	r7, #40	@ 0x28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000
 80014dc:	48000800 	.word	0x48000800

080014e0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001554 <MX_I2C2_Init+0x74>)
 80014e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001558 <MX_I2C2_Init+0x78>)
 80014e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40621236;
 80014ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <MX_I2C2_Init+0x74>)
 80014ec:	4a1b      	ldr	r2, [pc, #108]	@ (800155c <MX_I2C2_Init+0x7c>)
 80014ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80014f0:	4b18      	ldr	r3, [pc, #96]	@ (8001554 <MX_I2C2_Init+0x74>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014f6:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <MX_I2C2_Init+0x74>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014fc:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <MX_I2C2_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001502:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <MX_I2C2_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001508:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <MX_I2C2_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <MX_I2C2_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001514:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <MX_I2C2_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800151a:	480e      	ldr	r0, [pc, #56]	@ (8001554 <MX_I2C2_Init+0x74>)
 800151c:	f005 f8ee 	bl	80066fc <HAL_I2C_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001526:	f001 f89a 	bl	800265e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800152a:	2100      	movs	r1, #0
 800152c:	4809      	ldr	r0, [pc, #36]	@ (8001554 <MX_I2C2_Init+0x74>)
 800152e:	f005 fcb3 	bl	8006e98 <HAL_I2CEx_ConfigAnalogFilter>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001538:	f001 f891 	bl	800265e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800153c:	2100      	movs	r1, #0
 800153e:	4805      	ldr	r0, [pc, #20]	@ (8001554 <MX_I2C2_Init+0x74>)
 8001540:	f005 fcf5 	bl	8006f2e <HAL_I2CEx_ConfigDigitalFilter>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800154a:	f001 f888 	bl	800265e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000274 	.word	0x20000274
 8001558:	40005800 	.word	0x40005800
 800155c:	40621236 	.word	0x40621236

08001560 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b09a      	sub	sp, #104	@ 0x68
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	2244      	movs	r2, #68	@ 0x44
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f00a f911 	bl	800b7a8 <memset>
  if(i2cHandle->Instance==I2C2)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a1f      	ldr	r2, [pc, #124]	@ (8001608 <HAL_I2C_MspInit+0xa8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d137      	bne.n	8001600 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001590:	2380      	movs	r3, #128	@ 0x80
 8001592:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	4618      	mov	r0, r3
 800159e:	f006 faf5 	bl	8007b8c <HAL_RCCEx_PeriphCLKConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015a8:	f001 f859 	bl	800265e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ac:	4b17      	ldr	r3, [pc, #92]	@ (800160c <HAL_I2C_MspInit+0xac>)
 80015ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b0:	4a16      	ldr	r2, [pc, #88]	@ (800160c <HAL_I2C_MspInit+0xac>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b8:	4b14      	ldr	r3, [pc, #80]	@ (800160c <HAL_I2C_MspInit+0xac>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015c8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ca:	2312      	movs	r3, #18
 80015cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015d6:	2304      	movs	r3, #4
 80015d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015de:	4619      	mov	r1, r3
 80015e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e4:	f004 fed8 	bl	8006398 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015e8:	4b08      	ldr	r3, [pc, #32]	@ (800160c <HAL_I2C_MspInit+0xac>)
 80015ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ec:	4a07      	ldr	r2, [pc, #28]	@ (800160c <HAL_I2C_MspInit+0xac>)
 80015ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80015f4:	4b05      	ldr	r3, [pc, #20]	@ (800160c <HAL_I2C_MspInit+0xac>)
 80015f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001600:	bf00      	nop
 8001602:	3768      	adds	r7, #104	@ 0x68
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40005800 	.word	0x40005800
 800160c:	40021000 	.word	0x40021000

08001610 <IR_Init>:
volatile uint8_t irState = 0; // 0: idle, 1: after leader low, 2: decoding
volatile uint8_t irBitCount = 0; // Bit counter for decoding
extern volatile uint8_t command; // Extracted command byte
extern volatile uint8_t newIRDataFlag;

void IR_Init(void) {
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8001614:	210c      	movs	r1, #12
 8001616:	4802      	ldr	r0, [pc, #8]	@ (8001620 <IR_Init+0x10>)
 8001618:	f007 fd26 	bl	8009068 <HAL_TIM_IC_Start_IT>
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000b84 	.word	0x20000b84

08001624 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a94      	ldr	r2, [pc, #592]	@ (8001884 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001632:	4293      	cmp	r3, r2
 8001634:	f040 81a9 	bne.w	800198a <HAL_TIM_IC_CaptureCallback+0x366>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	7f1b      	ldrb	r3, [r3, #28]
 800163c:	2b08      	cmp	r3, #8
 800163e:	f040 81a4 	bne.w	800198a <HAL_TIM_IC_CaptureCallback+0x366>
		uint32_t capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001642:	210c      	movs	r1, #12
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f008 fa4b 	bl	8009ae0 <HAL_TIM_ReadCapturedValue>
 800164a:	6178      	str	r0, [r7, #20]
		uint32_t currentTime = capture * 10; // Convert to µs with PSC=1700-1
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	613b      	str	r3, [r7, #16]
//        if (currentTime - lastEdgeTime < 1000) { // Debounce threshold
//            TIM3->SR = ~TIM_SR_CC4IF;
//            return;
//        }

		if (captureState == 0) {
 8001658:	4b8b      	ldr	r3, [pc, #556]	@ (8001888 <HAL_TIM_IC_CaptureCallback+0x264>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d133      	bne.n	80016ca <HAL_TIM_IC_CaptureCallback+0xa6>
			capture1 = capture;
 8001662:	4a8a      	ldr	r2, [pc, #552]	@ (800188c <HAL_TIM_IC_CaptureCallback+0x268>)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6a1a      	ldr	r2, [r3, #32]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8001676:	621a      	str	r2, [r3, #32]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6a12      	ldr	r2, [r2, #32]
 8001682:	621a      	str	r2, [r3, #32]
					TIM_ICPOLARITY_RISING);
			lowEdgeCount++;
 8001684:	4b82      	ldr	r3, [pc, #520]	@ (8001890 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	b29b      	uxth	r3, r3
 800168a:	3301      	adds	r3, #1
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b80      	ldr	r3, [pc, #512]	@ (8001890 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001690:	801a      	strh	r2, [r3, #0]
			captureState = 1;
 8001692:	4b7d      	ldr	r3, [pc, #500]	@ (8001888 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001694:	2201      	movs	r2, #1
 8001696:	701a      	strb	r2, [r3, #0]
			if (!signalActive) {
 8001698:	4b7e      	ldr	r3, [pc, #504]	@ (8001894 <HAL_TIM_IC_CaptureCallback+0x270>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f040 816c 	bne.w	800197c <HAL_TIM_IC_CaptureCallback+0x358>
				signalActive = 1;
 80016a4:	4b7b      	ldr	r3, [pc, #492]	@ (8001894 <HAL_TIM_IC_CaptureCallback+0x270>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
				irState = 0;
 80016aa:	4b7b      	ldr	r3, [pc, #492]	@ (8001898 <HAL_TIM_IC_CaptureCallback+0x274>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
				irBitCount = 0;
 80016b0:	4b7a      	ldr	r3, [pc, #488]	@ (800189c <HAL_TIM_IC_CaptureCallback+0x278>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
				irData = 0;
 80016b6:	4b7a      	ldr	r3, [pc, #488]	@ (80018a0 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
				highEdgeCount = 0;
 80016bc:	4b79      	ldr	r3, [pc, #484]	@ (80018a4 <HAL_TIM_IC_CaptureCallback+0x280>)
 80016be:	2200      	movs	r2, #0
 80016c0:	801a      	strh	r2, [r3, #0]
				lowEdgeCount = 0;
 80016c2:	4b73      	ldr	r3, [pc, #460]	@ (8001890 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	801a      	strh	r2, [r3, #0]
 80016c8:	e158      	b.n	800197c <HAL_TIM_IC_CaptureCallback+0x358>
			}
		} else if (captureState == 1) {
 80016ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001888 <HAL_TIM_IC_CaptureCallback+0x264>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d161      	bne.n	8001798 <HAL_TIM_IC_CaptureCallback+0x174>
			capture2 = capture;
 80016d4:	4a74      	ldr	r2, [pc, #464]	@ (80018a8 <HAL_TIM_IC_CaptureCallback+0x284>)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6a1a      	ldr	r2, [r3, #32]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80016e8:	621a      	str	r2, [r3, #32]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6a1a      	ldr	r2, [r3, #32]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80016f8:	621a      	str	r2, [r3, #32]
					TIM_ICPOLARITY_FALLING);
			highEdgeCount++;
 80016fa:	4b6a      	ldr	r3, [pc, #424]	@ (80018a4 <HAL_TIM_IC_CaptureCallback+0x280>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3301      	adds	r3, #1
 8001702:	b29a      	uxth	r2, r3
 8001704:	4b67      	ldr	r3, [pc, #412]	@ (80018a4 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001706:	801a      	strh	r2, [r3, #0]

			uint32_t pulseWidth;
			if (capture2 >= capture1) {
 8001708:	4b67      	ldr	r3, [pc, #412]	@ (80018a8 <HAL_TIM_IC_CaptureCallback+0x284>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b5f      	ldr	r3, [pc, #380]	@ (800188c <HAL_TIM_IC_CaptureCallback+0x268>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d30a      	bcc.n	800172a <HAL_TIM_IC_CaptureCallback+0x106>
				pulseWidth = (capture2 - capture1) * 10;
 8001714:	4b64      	ldr	r3, [pc, #400]	@ (80018a8 <HAL_TIM_IC_CaptureCallback+0x284>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b5c      	ldr	r3, [pc, #368]	@ (800188c <HAL_TIM_IC_CaptureCallback+0x268>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	1ad2      	subs	r2, r2, r3
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	61fb      	str	r3, [r7, #28]
 8001728:	e00b      	b.n	8001742 <HAL_TIM_IC_CaptureCallback+0x11e>
			} else {
				pulseWidth = (0xFFFF - capture1 + capture2 + 1) * 10;
 800172a:	4b5f      	ldr	r3, [pc, #380]	@ (80018a8 <HAL_TIM_IC_CaptureCallback+0x284>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4b57      	ldr	r3, [pc, #348]	@ (800188c <HAL_TIM_IC_CaptureCallback+0x268>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	1ad2      	subs	r2, r2, r3
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	f503 2320 	add.w	r3, r3, #655360	@ 0xa0000
 8001740:	61fb      	str	r3, [r7, #28]
			}

			if (highEdgeCount - 1 < MAX_PULSES && signalActive) {
 8001742:	4b58      	ldr	r3, [pc, #352]	@ (80018a4 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	2b22      	cmp	r3, #34	@ 0x22
 800174a:	d80c      	bhi.n	8001766 <HAL_TIM_IC_CaptureCallback+0x142>
 800174c:	4b51      	ldr	r3, [pc, #324]	@ (8001894 <HAL_TIM_IC_CaptureCallback+0x270>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d007      	beq.n	8001766 <HAL_TIM_IC_CaptureCallback+0x142>
				highPulseBuffer[highEdgeCount - 1] = pulseWidth; // Store high pulse
 8001756:	4b53      	ldr	r3, [pc, #332]	@ (80018a4 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	b29b      	uxth	r3, r3
 800175c:	3b01      	subs	r3, #1
 800175e:	4953      	ldr	r1, [pc, #332]	@ (80018ac <HAL_TIM_IC_CaptureCallback+0x288>)
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}

			// State transition for leader low and high
			if (irState == 0 && pulseWidth > 8000 && pulseWidth < 10000) {
 8001766:	4b4c      	ldr	r3, [pc, #304]	@ (8001898 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10b      	bne.n	8001788 <HAL_TIM_IC_CaptureCallback+0x164>
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001776:	d907      	bls.n	8001788 <HAL_TIM_IC_CaptureCallback+0x164>
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800177e:	4293      	cmp	r3, r2
 8001780:	d802      	bhi.n	8001788 <HAL_TIM_IC_CaptureCallback+0x164>
				irState = 1;
 8001782:	4b45      	ldr	r3, [pc, #276]	@ (8001898 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001784:	2201      	movs	r2, #1
 8001786:	701a      	strb	r2, [r3, #0]
			}
			capture1 = capture2;
 8001788:	4b47      	ldr	r3, [pc, #284]	@ (80018a8 <HAL_TIM_IC_CaptureCallback+0x284>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a3f      	ldr	r2, [pc, #252]	@ (800188c <HAL_TIM_IC_CaptureCallback+0x268>)
 800178e:	6013      	str	r3, [r2, #0]
			captureState = 2;
 8001790:	4b3d      	ldr	r3, [pc, #244]	@ (8001888 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001792:	2202      	movs	r2, #2
 8001794:	701a      	strb	r2, [r3, #0]
 8001796:	e0f1      	b.n	800197c <HAL_TIM_IC_CaptureCallback+0x358>
		} else { // captureState == 2
			capture2 = capture;
 8001798:	4a43      	ldr	r2, [pc, #268]	@ (80018a8 <HAL_TIM_IC_CaptureCallback+0x284>)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6a1a      	ldr	r2, [r3, #32]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80017ac:	621a      	str	r2, [r3, #32]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6a12      	ldr	r2, [r2, #32]
 80017b8:	621a      	str	r2, [r3, #32]
					TIM_ICPOLARITY_RISING);
			lowEdgeCount++;
 80017ba:	4b35      	ldr	r3, [pc, #212]	@ (8001890 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	3301      	adds	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b32      	ldr	r3, [pc, #200]	@ (8001890 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80017c6:	801a      	strh	r2, [r3, #0]

			uint32_t pulseWidth;
			if (capture2 >= capture1) {
 80017c8:	4b37      	ldr	r3, [pc, #220]	@ (80018a8 <HAL_TIM_IC_CaptureCallback+0x284>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b2f      	ldr	r3, [pc, #188]	@ (800188c <HAL_TIM_IC_CaptureCallback+0x268>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d30a      	bcc.n	80017ea <HAL_TIM_IC_CaptureCallback+0x1c6>
				pulseWidth = (capture2 - capture1) * 10;
 80017d4:	4b34      	ldr	r3, [pc, #208]	@ (80018a8 <HAL_TIM_IC_CaptureCallback+0x284>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b2c      	ldr	r3, [pc, #176]	@ (800188c <HAL_TIM_IC_CaptureCallback+0x268>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	1ad2      	subs	r2, r2, r3
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	61bb      	str	r3, [r7, #24]
 80017e8:	e00b      	b.n	8001802 <HAL_TIM_IC_CaptureCallback+0x1de>
			} else {
				pulseWidth = (0xFFFF - capture1 + capture2 + 1) * 10;
 80017ea:	4b2f      	ldr	r3, [pc, #188]	@ (80018a8 <HAL_TIM_IC_CaptureCallback+0x284>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4b27      	ldr	r3, [pc, #156]	@ (800188c <HAL_TIM_IC_CaptureCallback+0x268>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	1ad2      	subs	r2, r2, r3
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	f503 2320 	add.w	r3, r3, #655360	@ 0xa0000
 8001800:	61bb      	str	r3, [r7, #24]
			}

			if (lowEdgeCount - 1 < MAX_PULSES && signalActive) {
 8001802:	4b23      	ldr	r3, [pc, #140]	@ (8001890 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	b29b      	uxth	r3, r3
 8001808:	2b22      	cmp	r3, #34	@ 0x22
 800180a:	d80c      	bhi.n	8001826 <HAL_TIM_IC_CaptureCallback+0x202>
 800180c:	4b21      	ldr	r3, [pc, #132]	@ (8001894 <HAL_TIM_IC_CaptureCallback+0x270>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d007      	beq.n	8001826 <HAL_TIM_IC_CaptureCallback+0x202>
				lowPulseBuffer[lowEdgeCount - 1] = pulseWidth; // Store low pulse
 8001816:	4b1e      	ldr	r3, [pc, #120]	@ (8001890 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	b29b      	uxth	r3, r3
 800181c:	3b01      	subs	r3, #1
 800181e:	4924      	ldr	r1, [pc, #144]	@ (80018b0 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}

			if (irState == 1 && pulseWidth > 4000 && pulseWidth < 5000) {
 8001826:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b01      	cmp	r3, #1
 800182e:	d10c      	bne.n	800184a <HAL_TIM_IC_CaptureCallback+0x226>
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001836:	d908      	bls.n	800184a <HAL_TIM_IC_CaptureCallback+0x226>
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800183e:	4293      	cmp	r3, r2
 8001840:	d803      	bhi.n	800184a <HAL_TIM_IC_CaptureCallback+0x226>
				irState = 2;
 8001842:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001844:	2202      	movs	r2, #2
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	e091      	b.n	800196e <HAL_TIM_IC_CaptureCallback+0x34a>
			} else if (irState == 2 && irBitCount < 32 && highEdgeCount > 1) {
 800184a:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <HAL_TIM_IC_CaptureCallback+0x274>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d16e      	bne.n	8001932 <HAL_TIM_IC_CaptureCallback+0x30e>
 8001854:	4b11      	ldr	r3, [pc, #68]	@ (800189c <HAL_TIM_IC_CaptureCallback+0x278>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b1f      	cmp	r3, #31
 800185c:	d869      	bhi.n	8001932 <HAL_TIM_IC_CaptureCallback+0x30e>
 800185e:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	b29b      	uxth	r3, r3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d964      	bls.n	8001932 <HAL_TIM_IC_CaptureCallback+0x30e>
				if (pulseWidth > 500 && pulseWidth < 800) { // 560µs high (0 bit)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800186e:	d921      	bls.n	80018b4 <HAL_TIM_IC_CaptureCallback+0x290>
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001876:	d21d      	bcs.n	80018b4 <HAL_TIM_IC_CaptureCallback+0x290>
					irData = (irData << 1) | 0;
 8001878:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4a08      	ldr	r2, [pc, #32]	@ (80018a0 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e027      	b.n	80018d4 <HAL_TIM_IC_CaptureCallback+0x2b0>
 8001884:	40000400 	.word	0x40000400
 8001888:	200002d0 	.word	0x200002d0
 800188c:	200002c8 	.word	0x200002c8
 8001890:	200002d4 	.word	0x200002d4
 8001894:	200002dc 	.word	0x200002dc
 8001898:	200003f4 	.word	0x200003f4
 800189c:	200003f5 	.word	0x200003f5
 80018a0:	200003f0 	.word	0x200003f0
 80018a4:	200002d2 	.word	0x200002d2
 80018a8:	200002cc 	.word	0x200002cc
 80018ac:	20000368 	.word	0x20000368
 80018b0:	200002e0 	.word	0x200002e0
				} else if (pulseWidth > 1500 && pulseWidth < 2000) { // 1690µs high (1 bit)
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d90a      	bls.n	80018d4 <HAL_TIM_IC_CaptureCallback+0x2b0>
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80018c4:	d206      	bcs.n	80018d4 <HAL_TIM_IC_CaptureCallback+0x2b0>
					irData = (irData << 1) | 1;
 80018c6:	4b33      	ldr	r3, [pc, #204]	@ (8001994 <HAL_TIM_IC_CaptureCallback+0x370>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	4a30      	ldr	r2, [pc, #192]	@ (8001994 <HAL_TIM_IC_CaptureCallback+0x370>)
 80018d2:	6013      	str	r3, [r2, #0]
				}
				irBitCount++;
 80018d4:	4b30      	ldr	r3, [pc, #192]	@ (8001998 <HAL_TIM_IC_CaptureCallback+0x374>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	3301      	adds	r3, #1
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b2e      	ldr	r3, [pc, #184]	@ (8001998 <HAL_TIM_IC_CaptureCallback+0x374>)
 80018e0:	701a      	strb	r2, [r3, #0]
				if (irBitCount == 32) {
 80018e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001998 <HAL_TIM_IC_CaptureCallback+0x374>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b20      	cmp	r3, #32
 80018ea:	d13f      	bne.n	800196c <HAL_TIM_IC_CaptureCallback+0x348>
					uint8_t address = (irData >> 24) & 0xFF;
 80018ec:	4b29      	ldr	r3, [pc, #164]	@ (8001994 <HAL_TIM_IC_CaptureCallback+0x370>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	0e1b      	lsrs	r3, r3, #24
 80018f2:	73fb      	strb	r3, [r7, #15]
					uint8_t invAddress = (irData >> 16) & 0xFF;
 80018f4:	4b27      	ldr	r3, [pc, #156]	@ (8001994 <HAL_TIM_IC_CaptureCallback+0x370>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	0c1b      	lsrs	r3, r3, #16
 80018fa:	73bb      	strb	r3, [r7, #14]
					command = (irData >> 8) & 0xFF;
 80018fc:	4b25      	ldr	r3, [pc, #148]	@ (8001994 <HAL_TIM_IC_CaptureCallback+0x370>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b25      	ldr	r3, [pc, #148]	@ (800199c <HAL_TIM_IC_CaptureCallback+0x378>)
 8001906:	701a      	strb	r2, [r3, #0]
					uint8_t invCommand = irData & 0xFF;
 8001908:	4b22      	ldr	r3, [pc, #136]	@ (8001994 <HAL_TIM_IC_CaptureCallback+0x370>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	737b      	strb	r3, [r7, #13]
					if (address == (uint8_t) ~invAddress
 800190e:	7bbb      	ldrb	r3, [r7, #14]
 8001910:	43db      	mvns	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	429a      	cmp	r2, r3
 8001918:	d128      	bne.n	800196c <HAL_TIM_IC_CaptureCallback+0x348>
							&& command == (uint8_t) ~invCommand) {
 800191a:	7b7b      	ldrb	r3, [r7, #13]
 800191c:	43db      	mvns	r3, r3
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b1e      	ldr	r3, [pc, #120]	@ (800199c <HAL_TIM_IC_CaptureCallback+0x378>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	429a      	cmp	r2, r3
 8001928:	d120      	bne.n	800196c <HAL_TIM_IC_CaptureCallback+0x348>
						newIRDataFlag = 1; // Valid data, trigger print
 800192a:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <HAL_TIM_IC_CaptureCallback+0x37c>)
 800192c:	2201      	movs	r2, #1
 800192e:	701a      	strb	r2, [r3, #0]
				if (irBitCount == 32) {
 8001930:	e01c      	b.n	800196c <HAL_TIM_IC_CaptureCallback+0x348>
					}
				}
			} else if (irBitCount == 32 && pulseWidth > 30000) {
 8001932:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <HAL_TIM_IC_CaptureCallback+0x374>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b20      	cmp	r3, #32
 800193a:	d118      	bne.n	800196e <HAL_TIM_IC_CaptureCallback+0x34a>
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001942:	4293      	cmp	r3, r2
 8001944:	d913      	bls.n	800196e <HAL_TIM_IC_CaptureCallback+0x34a>
				newIRDataFlag = 1; // End of frame after 32 bits
 8001946:	4b16      	ldr	r3, [pc, #88]	@ (80019a0 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
				signalActive = 0;
 800194c:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <HAL_TIM_IC_CaptureCallback+0x380>)
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
				irState = 0;
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <HAL_TIM_IC_CaptureCallback+0x384>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
				irBitCount = 0;
 8001958:	4b0f      	ldr	r3, [pc, #60]	@ (8001998 <HAL_TIM_IC_CaptureCallback+0x374>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
				highEdgeCount = 0;
 800195e:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <HAL_TIM_IC_CaptureCallback+0x388>)
 8001960:	2200      	movs	r2, #0
 8001962:	801a      	strh	r2, [r3, #0]
				lowEdgeCount = 0;
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001966:	2200      	movs	r2, #0
 8001968:	801a      	strh	r2, [r3, #0]
 800196a:	e000      	b.n	800196e <HAL_TIM_IC_CaptureCallback+0x34a>
				if (irBitCount == 32) {
 800196c:	bf00      	nop
			}

			capture1 = capture2;
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <HAL_TIM_IC_CaptureCallback+0x390>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a11      	ldr	r2, [pc, #68]	@ (80019b8 <HAL_TIM_IC_CaptureCallback+0x394>)
 8001974:	6013      	str	r3, [r2, #0]
			captureState = 1;
 8001976:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <HAL_TIM_IC_CaptureCallback+0x398>)
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]
		}

		lastEdgeTime = currentTime;
 800197c:	4a10      	ldr	r2, [pc, #64]	@ (80019c0 <HAL_TIM_IC_CaptureCallback+0x39c>)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	6013      	str	r3, [r2, #0]
		TIM3->SR = ~TIM_SR_CC4IF;
 8001982:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <HAL_TIM_IC_CaptureCallback+0x3a0>)
 8001984:	f06f 0210 	mvn.w	r2, #16
 8001988:	611a      	str	r2, [r3, #16]
	}
}
 800198a:	bf00      	nop
 800198c:	3720      	adds	r7, #32
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200003f0 	.word	0x200003f0
 8001998:	200003f5 	.word	0x200003f5
 800199c:	20000008 	.word	0x20000008
 80019a0:	20000410 	.word	0x20000410
 80019a4:	200002dc 	.word	0x200002dc
 80019a8:	200003f4 	.word	0x200003f4
 80019ac:	200002d2 	.word	0x200002d2
 80019b0:	200002d4 	.word	0x200002d4
 80019b4:	200002cc 	.word	0x200002cc
 80019b8:	200002c8 	.word	0x200002c8
 80019bc:	200002d0 	.word	0x200002d0
 80019c0:	200002d8 	.word	0x200002d8
 80019c4:	40000400 	.word	0x40000400

080019c8 <IR_GetCommand>:

uint32_t IR_GetIRData(void) {
	return irData;
}

uint8_t IR_GetCommand(void) {
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
	return command;
 80019cc:	4b03      	ldr	r3, [pc, #12]	@ (80019dc <IR_GetCommand+0x14>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	b2db      	uxtb	r3, r3
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	20000008 	.word	0x20000008

080019e0 <IR_Reset>:

void IR_Reset(void) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	newIRDataFlag = 0;
 80019e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <IR_Reset+0x34>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
	irData = 0; // Adjust based on your variable names
 80019ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <IR_Reset+0x38>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
	irState = 0;
 80019f0:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <IR_Reset+0x3c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
	irBitCount = 0;
 80019f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a20 <IR_Reset+0x40>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
	memset(lowPulseBuffer, 0, sizeof(lowPulseBuffer));
 80019fc:	2288      	movs	r2, #136	@ 0x88
 80019fe:	2100      	movs	r1, #0
 8001a00:	4808      	ldr	r0, [pc, #32]	@ (8001a24 <IR_Reset+0x44>)
 8001a02:	f009 fed1 	bl	800b7a8 <memset>
	memset(highPulseBuffer, 0, sizeof(highPulseBuffer));
 8001a06:	2288      	movs	r2, #136	@ 0x88
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4807      	ldr	r0, [pc, #28]	@ (8001a28 <IR_Reset+0x48>)
 8001a0c:	f009 fecc 	bl	800b7a8 <memset>
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000410 	.word	0x20000410
 8001a18:	200003f0 	.word	0x200003f0
 8001a1c:	200003f4 	.word	0x200003f4
 8001a20:	200003f5 	.word	0x200003f5
 8001a24:	200002e0 	.word	0x200002e0
 8001a28:	20000368 	.word	0x20000368

08001a2c <HAL_ADC_ConvCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
//tasks after each adc read (50us) adjusted by tim1
//the max and min perturbation between all reads (every 50us) are computed
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	if (first_comp == 1) {
 8001a34:	4b3c      	ldr	r3, [pc, #240]	@ (8001b28 <HAL_ADC_ConvCpltCallback+0xfc>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d020      	beq.n	8001a7e <HAL_ADC_ConvCpltCallback+0x52>
		first_comp = 0;
 8001a3c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b28 <HAL_ADC_ConvCpltCallback+0xfc>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < NUM_YARN; i++) {
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	e017      	b.n	8001a78 <HAL_ADC_ConvCpltCallback+0x4c>
			yarn[i].minim = (1 << 12) - 1;
 8001a48:	4938      	ldr	r1, [pc, #224]	@ (8001b2c <HAL_ADC_ConvCpltCallback+0x100>)
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	1a9b      	subs	r3, r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	440b      	add	r3, r1
 8001a56:	331c      	adds	r3, #28
 8001a58:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001a5c:	601a      	str	r2, [r3, #0]
			yarn[i].maxim = 0;
 8001a5e:	4933      	ldr	r1, [pc, #204]	@ (8001b2c <HAL_ADC_ConvCpltCallback+0x100>)
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	4613      	mov	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	1a9b      	subs	r3, r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	440b      	add	r3, r1
 8001a6c:	3318      	adds	r3, #24
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < NUM_YARN; i++) {
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3301      	adds	r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	2b0b      	cmp	r3, #11
 8001a7c:	dde4      	ble.n	8001a48 <HAL_ADC_ConvCpltCallback+0x1c>
		}
	}
	if (hadc->Instance == ADC2) {
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a2b      	ldr	r2, [pc, #172]	@ (8001b30 <HAL_ADC_ConvCpltCallback+0x104>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d122      	bne.n	8001ace <HAL_ADC_ConvCpltCallback+0xa2>
		for (int i = 0; i < NUM_YARN / 2; i++) {
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	e01b      	b.n	8001ac6 <HAL_ADC_ConvCpltCallback+0x9a>
			yarn[i].read_sens = adc2_data[i];
 8001a8e:	4a29      	ldr	r2, [pc, #164]	@ (8001b34 <HAL_ADC_ConvCpltCallback+0x108>)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	4618      	mov	r0, r3
 8001a9a:	4924      	ldr	r1, [pc, #144]	@ (8001b2c <HAL_ADC_ConvCpltCallback+0x100>)
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	1a9b      	subs	r3, r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	440b      	add	r3, r1
 8001aa8:	3320      	adds	r3, #32
 8001aaa:	6018      	str	r0, [r3, #0]
			comp_thresh_perturb(&yarn[i]);
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	1a9b      	subs	r3, r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8001b2c <HAL_ADC_ConvCpltCallback+0x100>)
 8001ab8:	4413      	add	r3, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f002 f909 	bl	8003cd2 <comp_thresh_perturb>
		for (int i = 0; i < NUM_YARN / 2; i++) {
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	2b05      	cmp	r3, #5
 8001aca:	dde0      	ble.n	8001a8e <HAL_ADC_ConvCpltCallback+0x62>
		for (int i = NUM_YARN / 2; i < NUM_YARN; i++) {
			yarn[i].read_sens = adc1_data[i - 6];
			comp_thresh_perturb(&yarn[i]);
		}
	}
}
 8001acc:	e027      	b.n	8001b1e <HAL_ADC_ConvCpltCallback+0xf2>
	} else if (hadc->Instance == ADC1) {
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ad6:	d122      	bne.n	8001b1e <HAL_ADC_ConvCpltCallback+0xf2>
		for (int i = NUM_YARN / 2; i < NUM_YARN; i++) {
 8001ad8:	2306      	movs	r3, #6
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	e01c      	b.n	8001b18 <HAL_ADC_ConvCpltCallback+0xec>
			yarn[i].read_sens = adc1_data[i - 6];
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	3b06      	subs	r3, #6
 8001ae2:	4a15      	ldr	r2, [pc, #84]	@ (8001b38 <HAL_ADC_ConvCpltCallback+0x10c>)
 8001ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	490f      	ldr	r1, [pc, #60]	@ (8001b2c <HAL_ADC_ConvCpltCallback+0x100>)
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	1a9b      	subs	r3, r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	440b      	add	r3, r1
 8001afa:	3320      	adds	r3, #32
 8001afc:	6018      	str	r0, [r3, #0]
			comp_thresh_perturb(&yarn[i]);
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4a08      	ldr	r2, [pc, #32]	@ (8001b2c <HAL_ADC_ConvCpltCallback+0x100>)
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f002 f8e0 	bl	8003cd2 <comp_thresh_perturb>
		for (int i = NUM_YARN / 2; i < NUM_YARN; i++) {
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	3301      	adds	r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2b0b      	cmp	r3, #11
 8001b1c:	dddf      	ble.n	8001ade <HAL_ADC_ConvCpltCallback+0xb2>
}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000013 	.word	0x20000013
 8001b2c:	20000d10 	.word	0x20000d10
 8001b30:	50000100 	.word	0x50000100
 8001b34:	20000404 	.word	0x20000404
 8001b38:	200003f8 	.word	0x200003f8

08001b3c <HAL_TIM_PeriodElapsedCallback>:
//tim2 , neopixels 100ms,check state 600ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b4c:	d111      	bne.n	8001b72 <HAL_TIM_PeriodElapsedCallback+0x36>
		FlagLedState = 1;
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	701a      	strb	r2, [r3, #0]
		counter++;
 8001b54:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b84 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b5c:	6013      	str	r3, [r2, #0]
		if (counter > 5) {  // counts to create 600ms
 8001b5e:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b05      	cmp	r3, #5
 8001b64:	d905      	bls.n	8001b72 <HAL_TIM_PeriodElapsedCallback+0x36>
			counter = 0;
 8001b66:	4b07      	ldr	r3, [pc, #28]	@ (8001b84 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
			FlagCheckState = 1;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000412 	.word	0x20000412
 8001b84:	20000864 	.word	0x20000864
 8001b88:	20000411 	.word	0x20000411

08001b8c <manageLed>:

//manage leds (100ms)
void manageLed(void) {
 8001b8c:	b5b0      	push	{r4, r5, r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0

	if (Oled_statePre != Oled_state) {
 8001b92:	4b8c      	ldr	r3, [pc, #560]	@ (8001dc4 <manageLed+0x238>)
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	4b8c      	ldr	r3, [pc, #560]	@ (8001dc8 <manageLed+0x23c>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d008      	beq.n	8001bb0 <manageLed+0x24>
		blink_oled = 0;
 8001b9e:	4b8b      	ldr	r3, [pc, #556]	@ (8001dcc <manageLed+0x240>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
		blink_oledPre = 100;
 8001ba4:	4b8a      	ldr	r3, [pc, #552]	@ (8001dd0 <manageLed+0x244>)
 8001ba6:	2264      	movs	r2, #100	@ 0x64
 8001ba8:	701a      	strb	r2, [r3, #0]
		elapsed = 1;
 8001baa:	4b8a      	ldr	r3, [pc, #552]	@ (8001dd4 <manageLed+0x248>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
	}
	decide_Oled();
 8001bb0:	f000 fd5c 	bl	800266c <decide_Oled>

	Oled_statePre = Oled_state;
 8001bb4:	4b84      	ldr	r3, [pc, #528]	@ (8001dc8 <manageLed+0x23c>)
 8001bb6:	781a      	ldrb	r2, [r3, #0]
 8001bb8:	4b82      	ldr	r3, [pc, #520]	@ (8001dc4 <manageLed+0x238>)
 8001bba:	701a      	strb	r2, [r3, #0]
	//decide torn_stat
	torn_stat = 0;
 8001bbc:	4b86      	ldr	r3, [pc, #536]	@ (8001dd8 <manageLed+0x24c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_YARN; i++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	e018      	b.n	8001bfa <manageLed+0x6e>
		torn_stat = torn_stat || yarn[i].torn;
 8001bc8:	4b83      	ldr	r3, [pc, #524]	@ (8001dd8 <manageLed+0x24c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d109      	bne.n	8001be4 <manageLed+0x58>
 8001bd0:	4982      	ldr	r1, [pc, #520]	@ (8001ddc <manageLed+0x250>)
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	1a9b      	subs	r3, r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <manageLed+0x5c>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <manageLed+0x5e>
 8001be8:	2300      	movs	r3, #0
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	4b79      	ldr	r3, [pc, #484]	@ (8001dd8 <manageLed+0x24c>)
 8001bf2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_YARN; i++)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	2b0b      	cmp	r3, #11
 8001bfe:	dde3      	ble.n	8001bc8 <manageLed+0x3c>

	// define the output
	if (torn_stat)
 8001c00:	4b75      	ldr	r3, [pc, #468]	@ (8001dd8 <manageLed+0x24c>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <manageLed+0x84>
		outHigh = 1;
 8001c08:	4b75      	ldr	r3, [pc, #468]	@ (8001de0 <manageLed+0x254>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
 8001c0e:	e002      	b.n	8001c16 <manageLed+0x8a>
	else
		outHigh = 0;
 8001c10:	4b73      	ldr	r3, [pc, #460]	@ (8001de0 <manageLed+0x254>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]

	//decide all_off leds
	all_off = 1;
 8001c16:	4b73      	ldr	r3, [pc, #460]	@ (8001de4 <manageLed+0x258>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_YARN; i++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	e019      	b.n	8001c56 <manageLed+0xca>
		all_off = all_off && (yarn[i].ledState == 0);
 8001c22:	4b70      	ldr	r3, [pc, #448]	@ (8001de4 <manageLed+0x258>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00c      	beq.n	8001c44 <manageLed+0xb8>
 8001c2a:	496c      	ldr	r1, [pc, #432]	@ (8001ddc <manageLed+0x250>)
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	440b      	add	r3, r1
 8001c38:	3330      	adds	r3, #48	@ 0x30
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <manageLed+0xb8>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <manageLed+0xba>
 8001c44:	2300      	movs	r3, #0
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	4b65      	ldr	r3, [pc, #404]	@ (8001de4 <manageLed+0x258>)
 8001c4e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_YARN; i++)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	3301      	adds	r3, #1
 8001c54:	61bb      	str	r3, [r7, #24]
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	2b0b      	cmp	r3, #11
 8001c5a:	dde2      	ble.n	8001c22 <manageLed+0x96>

	if (outCircuit == 1) {
 8001c5c:	4b62      	ldr	r3, [pc, #392]	@ (8001de8 <manageLed+0x25c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 809a 	beq.w	8001d9a <manageLed+0x20e>
		torn_stat = 0;
 8001c66:	4b5c      	ldr	r3, [pc, #368]	@ (8001dd8 <manageLed+0x24c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
		if (outCircuitPre == 0) {
 8001c6c:	4b5f      	ldr	r3, [pc, #380]	@ (8001dec <manageLed+0x260>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	f083 0301 	eor.w	r3, r3, #1
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d01b      	beq.n	8001cb2 <manageLed+0x126>
			flush();
 8001c7a:	f001 fe5f 	bl	800393c <flush>
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_SET) //if off
 8001c7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c82:	485b      	ldr	r0, [pc, #364]	@ (8001df0 <manageLed+0x264>)
 8001c84:	f004 fd0a 	bl	800669c <HAL_GPIO_ReadPin>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d105      	bne.n	8001c9a <manageLed+0x10e>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // make on
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c94:	4856      	ldr	r0, [pc, #344]	@ (8001df0 <manageLed+0x264>)
 8001c96:	f004 fd19 	bl	80066cc <HAL_GPIO_WritePin>
			ind = 0;
 8001c9a:	4b56      	ldr	r3, [pc, #344]	@ (8001df4 <manageLed+0x268>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
			direc = 1;
 8001ca0:	4b55      	ldr	r3, [pc, #340]	@ (8001df8 <manageLed+0x26c>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
			ledColor = 5;
 8001ca6:	4b55      	ldr	r3, [pc, #340]	@ (8001dfc <manageLed+0x270>)
 8001ca8:	2205      	movs	r2, #5
 8001caa:	701a      	strb	r2, [r3, #0]
			Oled_state = 5;
 8001cac:	4b46      	ldr	r3, [pc, #280]	@ (8001dc8 <manageLed+0x23c>)
 8001cae:	2205      	movs	r2, #5
 8001cb0:	701a      	strb	r2, [r3, #0]
		}
		if (direc == 1) {
 8001cb2:	4b51      	ldr	r3, [pc, #324]	@ (8001df8 <manageLed+0x26c>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d038      	beq.n	8001d2e <manageLed+0x1a2>
			led_set_RGB(ind, LED[ledColor].red, LED[ledColor].green,
 8001cbc:	4b4d      	ldr	r3, [pc, #308]	@ (8001df4 <manageLed+0x268>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	b2d8      	uxtb	r0, r3
 8001cc2:	4b4e      	ldr	r3, [pc, #312]	@ (8001dfc <manageLed+0x270>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4a4d      	ldr	r2, [pc, #308]	@ (8001e00 <manageLed+0x274>)
 8001ccc:	460b      	mov	r3, r1
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	440b      	add	r3, r1
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	b2d9      	uxtb	r1, r3
 8001cda:	4b48      	ldr	r3, [pc, #288]	@ (8001dfc <manageLed+0x270>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	461c      	mov	r4, r3
 8001ce2:	4a47      	ldr	r2, [pc, #284]	@ (8001e00 <manageLed+0x274>)
 8001ce4:	4623      	mov	r3, r4
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4423      	add	r3, r4
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	3304      	adds	r3, #4
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	b2da      	uxtb	r2, r3
					LED[ledColor].blue);
 8001cf4:	4b41      	ldr	r3, [pc, #260]	@ (8001dfc <manageLed+0x270>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	461d      	mov	r5, r3
 8001cfc:	4c40      	ldr	r4, [pc, #256]	@ (8001e00 <manageLed+0x274>)
 8001cfe:	462b      	mov	r3, r5
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	442b      	add	r3, r5
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4423      	add	r3, r4
 8001d08:	3308      	adds	r3, #8
 8001d0a:	681b      	ldr	r3, [r3, #0]
			led_set_RGB(ind, LED[ledColor].red, LED[ledColor].green,
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f001 fddd 	bl	80038cc <led_set_RGB>
			fillBuffer(ind);
 8001d12:	4b38      	ldr	r3, [pc, #224]	@ (8001df4 <manageLed+0x268>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f001 fe3b 	bl	8003994 <fillBuffer>

			ind++;
 8001d1e:	4b35      	ldr	r3, [pc, #212]	@ (8001df4 <manageLed+0x268>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	3301      	adds	r3, #1
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	4b32      	ldr	r3, [pc, #200]	@ (8001df4 <manageLed+0x268>)
 8001d2a:	701a      	strb	r2, [r3, #0]
 8001d2c:	e014      	b.n	8001d58 <manageLed+0x1cc>

		} else {
			ind--;
 8001d2e:	4b31      	ldr	r3, [pc, #196]	@ (8001df4 <manageLed+0x268>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	4b2e      	ldr	r3, [pc, #184]	@ (8001df4 <manageLed+0x268>)
 8001d3a:	701a      	strb	r2, [r3, #0]
			led_set_RGB(ind, 0, 0, 0);
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001df4 <manageLed+0x268>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	b2d8      	uxtb	r0, r3
 8001d42:	2300      	movs	r3, #0
 8001d44:	2200      	movs	r2, #0
 8001d46:	2100      	movs	r1, #0
 8001d48:	f001 fdc0 	bl	80038cc <led_set_RGB>
			fillBuffer(ind);
 8001d4c:	4b29      	ldr	r3, [pc, #164]	@ (8001df4 <manageLed+0x268>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 fe1e 	bl	8003994 <fillBuffer>

		}
		if (ind == num_led && direc == 1)
 8001d58:	4b26      	ldr	r3, [pc, #152]	@ (8001df4 <manageLed+0x268>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b0c      	cmp	r3, #12
 8001d60:	d108      	bne.n	8001d74 <manageLed+0x1e8>
 8001d62:	4b25      	ldr	r3, [pc, #148]	@ (8001df8 <manageLed+0x26c>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <manageLed+0x1e8>
			direc = 0;
 8001d6c:	4b22      	ldr	r3, [pc, #136]	@ (8001df8 <manageLed+0x26c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	e00f      	b.n	8001d94 <manageLed+0x208>
		else if (ind == 0 && direc == 0) {
 8001d74:	4b1f      	ldr	r3, [pc, #124]	@ (8001df4 <manageLed+0x268>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10a      	bne.n	8001d94 <manageLed+0x208>
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001df8 <manageLed+0x26c>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f083 0301 	eor.w	r3, r3, #1
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <manageLed+0x208>
			direc = 1;
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <manageLed+0x26c>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	701a      	strb	r2, [r3, #0]

		}
		led_render();
 8001d94:	f001 ff12 	bl	8003bbc <led_render>
 8001d98:	e201      	b.n	800219e <manageLed+0x612>
		//---------------
	} else if (torn_stat == 1) {
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <manageLed+0x24c>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 80c2 	beq.w	8001f28 <manageLed+0x39c>
		if (torn_statPre == 0) {
 8001da4:	4b17      	ldr	r3, [pc, #92]	@ (8001e04 <manageLed+0x278>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	f083 0301 	eor.w	r3, r3, #1
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8087 	beq.w	8001ec2 <manageLed+0x336>
			flag = 0;
 8001db4:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <manageLed+0x27c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
			flush();
 8001dba:	f001 fdbf 	bl	800393c <flush>
			for (int i = 0; i < num_led; i++) {
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	e078      	b.n	8001eb6 <manageLed+0x32a>
 8001dc4:	20000868 	.word	0x20000868
 8001dc8:	20000869 	.word	0x20000869
 8001dcc:	2000086c 	.word	0x2000086c
 8001dd0:	20000016 	.word	0x20000016
 8001dd4:	20000015 	.word	0x20000015
 8001dd8:	20000436 	.word	0x20000436
 8001ddc:	20000d10 	.word	0x20000d10
 8001de0:	20000418 	.word	0x20000418
 8001de4:	20000010 	.word	0x20000010
 8001de8:	20000416 	.word	0x20000416
 8001dec:	20000417 	.word	0x20000417
 8001df0:	48000800 	.word	0x48000800
 8001df4:	20000438 	.word	0x20000438
 8001df8:	20000011 	.word	0x20000011
 8001dfc:	20000419 	.word	0x20000419
 8001e00:	20000090 	.word	0x20000090
 8001e04:	20000437 	.word	0x20000437
 8001e08:	20000014 	.word	0x20000014
				ledColor = yarn[i].ledState;
 8001e0c:	499b      	ldr	r1, [pc, #620]	@ (800207c <manageLed+0x4f0>)
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	440b      	add	r3, r1
 8001e1a:	3330      	adds	r3, #48	@ 0x30
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	4b97      	ldr	r3, [pc, #604]	@ (8002080 <manageLed+0x4f4>)
 8001e22:	701a      	strb	r2, [r3, #0]
				if (yarn[i].ledState == 4) {
 8001e24:	4995      	ldr	r1, [pc, #596]	@ (800207c <manageLed+0x4f0>)
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	440b      	add	r3, r1
 8001e32:	3330      	adds	r3, #48	@ 0x30
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d133      	bne.n	8001ea2 <manageLed+0x316>
					led_set_RGB(i, LED[ledColor].red, LED[ledColor].green,
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	b2d8      	uxtb	r0, r3
 8001e3e:	4b90      	ldr	r3, [pc, #576]	@ (8002080 <manageLed+0x4f4>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	4619      	mov	r1, r3
 8001e46:	4a8f      	ldr	r2, [pc, #572]	@ (8002084 <manageLed+0x4f8>)
 8001e48:	460b      	mov	r3, r1
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	440b      	add	r3, r1
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	b2d9      	uxtb	r1, r3
 8001e56:	4b8a      	ldr	r3, [pc, #552]	@ (8002080 <manageLed+0x4f4>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	461c      	mov	r4, r3
 8001e5e:	4a89      	ldr	r2, [pc, #548]	@ (8002084 <manageLed+0x4f8>)
 8001e60:	4623      	mov	r3, r4
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4423      	add	r3, r4
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	b2da      	uxtb	r2, r3
							LED[ledColor].blue);
 8001e70:	4b83      	ldr	r3, [pc, #524]	@ (8002080 <manageLed+0x4f4>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	461d      	mov	r5, r3
 8001e78:	4c82      	ldr	r4, [pc, #520]	@ (8002084 <manageLed+0x4f8>)
 8001e7a:	462b      	mov	r3, r5
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	442b      	add	r3, r5
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4423      	add	r3, r4
 8001e84:	3308      	adds	r3, #8
 8001e86:	681b      	ldr	r3, [r3, #0]
					led_set_RGB(i, LED[ledColor].red, LED[ledColor].green,
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f001 fd1f 	bl	80038cc <led_set_RGB>
					indec = i;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4b7d      	ldr	r3, [pc, #500]	@ (8002088 <manageLed+0x4fc>)
 8001e94:	701a      	strb	r2, [r3, #0]
					fillBuffer(i);
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f001 fd7a 	bl	8003994 <fillBuffer>
 8001ea0:	e006      	b.n	8001eb0 <manageLed+0x324>
				} else
					led_set_RGB(i, 0, 0, 0);
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	b2d8      	uxtb	r0, r3
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2100      	movs	r1, #0
 8001eac:	f001 fd0e 	bl	80038cc <led_set_RGB>
			for (int i = 0; i < num_led; i++) {
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2b0b      	cmp	r3, #11
 8001eba:	dda7      	ble.n	8001e0c <manageLed+0x280>
			}
			Oled_state = 4;
 8001ebc:	4b73      	ldr	r3, [pc, #460]	@ (800208c <manageLed+0x500>)
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	701a      	strb	r2, [r3, #0]
		}

		if (overFlowFlag > 10) {
 8001ec2:	4b73      	ldr	r3, [pc, #460]	@ (8002090 <manageLed+0x504>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b0a      	cmp	r3, #10
 8001eca:	d92a      	bls.n	8001f22 <manageLed+0x396>
			overFlowFlag = 0;
 8001ecc:	4b70      	ldr	r3, [pc, #448]	@ (8002090 <manageLed+0x504>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
			if (Blink == 1) {
 8001ed2:	4b70      	ldr	r3, [pc, #448]	@ (8002094 <manageLed+0x508>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00e      	beq.n	8001ef8 <manageLed+0x36c>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_SET) //if off
 8001eda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ede:	486e      	ldr	r0, [pc, #440]	@ (8002098 <manageLed+0x50c>)
 8001ee0:	f004 fbdc 	bl	800669c <HAL_GPIO_ReadPin>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d10c      	bne.n	8001f04 <manageLed+0x378>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // make on
 8001eea:	2200      	movs	r2, #0
 8001eec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ef0:	4869      	ldr	r0, [pc, #420]	@ (8002098 <manageLed+0x50c>)
 8001ef2:	f004 fbeb 	bl	80066cc <HAL_GPIO_WritePin>
 8001ef6:	e005      	b.n	8001f04 <manageLed+0x378>
			} else
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001efe:	4866      	ldr	r0, [pc, #408]	@ (8002098 <manageLed+0x50c>)
 8001f00:	f004 fbe4 	bl	80066cc <HAL_GPIO_WritePin>

			Blink = !Blink;
 8001f04:	4b63      	ldr	r3, [pc, #396]	@ (8002094 <manageLed+0x508>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bf14      	ite	ne
 8001f0c:	2301      	movne	r3, #1
 8001f0e:	2300      	moveq	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	f083 0301 	eor.w	r3, r3, #1
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4b5d      	ldr	r3, [pc, #372]	@ (8002094 <manageLed+0x508>)
 8001f20:	701a      	strb	r2, [r3, #0]
		}

		led_render();
 8001f22:	f001 fe4b 	bl	8003bbc <led_render>
 8001f26:	e13a      	b.n	800219e <manageLed+0x612>
		//---------------
	} else if (all_off == 1) {
 8001f28:	4b5c      	ldr	r3, [pc, #368]	@ (800209c <manageLed+0x510>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d012      	beq.n	8001f56 <manageLed+0x3ca>
		Oled_state = 0;
 8001f30:	4b56      	ldr	r3, [pc, #344]	@ (800208c <manageLed+0x500>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_RESET) //if on
 8001f36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f3a:	4857      	ldr	r0, [pc, #348]	@ (8002098 <manageLed+0x50c>)
 8001f3c:	f004 fbae 	bl	800669c <HAL_GPIO_ReadPin>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 812b 	bne.w	800219e <manageLed+0x612>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // make off
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f4e:	4852      	ldr	r0, [pc, #328]	@ (8002098 <manageLed+0x50c>)
 8001f50:	f004 fbbc 	bl	80066cc <HAL_GPIO_WritePin>
 8001f54:	e123      	b.n	800219e <manageLed+0x612>
	} else {
		//---------------flaw, dirt1, dirt2
		anyUpdate = 0;
 8001f56:	4b52      	ldr	r3, [pc, #328]	@ (80020a0 <manageLed+0x514>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
		cnt_flaw = 0;
 8001f5c:	4b51      	ldr	r3, [pc, #324]	@ (80020a4 <manageLed+0x518>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
		cnt_dirt = 0;
 8001f62:	4b51      	ldr	r3, [pc, #324]	@ (80020a8 <manageLed+0x51c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
		Oled_state = 123;
 8001f68:	4b48      	ldr	r3, [pc, #288]	@ (800208c <manageLed+0x500>)
 8001f6a:	227b      	movs	r2, #123	@ 0x7b
 8001f6c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < num_led; i++) {
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	e00c      	b.n	8001f8e <manageLed+0x402>
			dirt_ind[i] = 0;
 8001f74:	4a4d      	ldr	r2, [pc, #308]	@ (80020ac <manageLed+0x520>)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4413      	add	r3, r2
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
			flaw_ind[i] = 0;
 8001f7e:	4a4c      	ldr	r2, [pc, #304]	@ (80020b0 <manageLed+0x524>)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4413      	add	r3, r2
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < num_led; i++) {
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	2b0b      	cmp	r3, #11
 8001f92:	ddef      	ble.n	8001f74 <manageLed+0x3e8>
		}
		for (uint8_t i = 0; i < num_led; i++) {
 8001f94:	2300      	movs	r3, #0
 8001f96:	73fb      	strb	r3, [r7, #15]
 8001f98:	e022      	b.n	8001fe0 <manageLed+0x454>
			anyUpdate = anyUpdate || (yarn[i].ledState != yarn[i].ledStatePre);
 8001f9a:	4b41      	ldr	r3, [pc, #260]	@ (80020a0 <manageLed+0x514>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d113      	bne.n	8001fca <manageLed+0x43e>
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	4935      	ldr	r1, [pc, #212]	@ (800207c <manageLed+0x4f0>)
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	1a9b      	subs	r3, r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	440b      	add	r3, r1
 8001fb0:	3330      	adds	r3, #48	@ 0x30
 8001fb2:	6819      	ldr	r1, [r3, #0]
 8001fb4:	7bfa      	ldrb	r2, [r7, #15]
 8001fb6:	4831      	ldr	r0, [pc, #196]	@ (800207c <manageLed+0x4f0>)
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4403      	add	r3, r0
 8001fc2:	3334      	adds	r3, #52	@ 0x34
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4299      	cmp	r1, r3
 8001fc8:	d001      	beq.n	8001fce <manageLed+0x442>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <manageLed+0x444>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4b32      	ldr	r3, [pc, #200]	@ (80020a0 <manageLed+0x514>)
 8001fd8:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < num_led; i++) {
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	2b0b      	cmp	r3, #11
 8001fe4:	d9d9      	bls.n	8001f9a <manageLed+0x40e>
		}
		if (anyUpdate) {
 8001fe6:	4b2e      	ldr	r3, [pc, #184]	@ (80020a0 <manageLed+0x514>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 80a5 	beq.w	800213a <manageLed+0x5ae>
			flush();
 8001ff0:	f001 fca4 	bl	800393c <flush>
			for (int i = 0; i < num_led; i++) {
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	e038      	b.n	800206c <manageLed+0x4e0>
				ledColor = yarn[i].ledState;
 8001ffa:	4920      	ldr	r1, [pc, #128]	@ (800207c <manageLed+0x4f0>)
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	440b      	add	r3, r1
 8002008:	3330      	adds	r3, #48	@ 0x30
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4b1c      	ldr	r3, [pc, #112]	@ (8002080 <manageLed+0x4f4>)
 8002010:	701a      	strb	r2, [r3, #0]
				led_set_RGB(i, LED[ledColor].red, LED[ledColor].green,
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	b2d8      	uxtb	r0, r3
 8002016:	4b1a      	ldr	r3, [pc, #104]	@ (8002080 <manageLed+0x4f4>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	4619      	mov	r1, r3
 800201e:	4a19      	ldr	r2, [pc, #100]	@ (8002084 <manageLed+0x4f8>)
 8002020:	460b      	mov	r3, r1
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	440b      	add	r3, r1
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	b2d9      	uxtb	r1, r3
 800202e:	4b14      	ldr	r3, [pc, #80]	@ (8002080 <manageLed+0x4f4>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	461c      	mov	r4, r3
 8002036:	4a13      	ldr	r2, [pc, #76]	@ (8002084 <manageLed+0x4f8>)
 8002038:	4623      	mov	r3, r4
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4423      	add	r3, r4
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	3304      	adds	r3, #4
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	b2da      	uxtb	r2, r3
						LED[ledColor].blue);
 8002048:	4b0d      	ldr	r3, [pc, #52]	@ (8002080 <manageLed+0x4f4>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	461d      	mov	r5, r3
 8002050:	4c0c      	ldr	r4, [pc, #48]	@ (8002084 <manageLed+0x4f8>)
 8002052:	462b      	mov	r3, r5
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	442b      	add	r3, r5
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4423      	add	r3, r4
 800205c:	3308      	adds	r3, #8
 800205e:	681b      	ldr	r3, [r3, #0]
				led_set_RGB(i, LED[ledColor].red, LED[ledColor].green,
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f001 fc33 	bl	80038cc <led_set_RGB>
			for (int i = 0; i < num_led; i++) {
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	3301      	adds	r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b0b      	cmp	r3, #11
 8002070:	ddc3      	ble.n	8001ffa <manageLed+0x46e>
			}
			fillBufferAll();
 8002072:	f001 fd15 	bl	8003aa0 <fillBufferAll>
			for (int i = 0; i < num_led; i++) {
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	e05b      	b.n	8002134 <manageLed+0x5a8>
 800207c:	20000d10 	.word	0x20000d10
 8002080:	20000419 	.word	0x20000419
 8002084:	20000090 	.word	0x20000090
 8002088:	20000861 	.word	0x20000861
 800208c:	20000869 	.word	0x20000869
 8002090:	20000413 	.word	0x20000413
 8002094:	20000012 	.word	0x20000012
 8002098:	48000800 	.word	0x48000800
 800209c:	20000010 	.word	0x20000010
 80020a0:	20000860 	.word	0x20000860
 80020a4:	20000434 	.word	0x20000434
 80020a8:	20000435 	.word	0x20000435
 80020ac:	20000428 	.word	0x20000428
 80020b0:	2000041c 	.word	0x2000041c
				if (yarn[i].ledState == 1 || yarn[i].ledState == 2) {
 80020b4:	494e      	ldr	r1, [pc, #312]	@ (80021f0 <manageLed+0x664>)
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	1a9b      	subs	r3, r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	440b      	add	r3, r1
 80020c2:	3330      	adds	r3, #48	@ 0x30
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d00a      	beq.n	80020e0 <manageLed+0x554>
 80020ca:	4949      	ldr	r1, [pc, #292]	@ (80021f0 <manageLed+0x664>)
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	440b      	add	r3, r1
 80020d8:	3330      	adds	r3, #48	@ 0x30
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d10d      	bne.n	80020fc <manageLed+0x570>
					dirt_ind[cnt_dirt] = i + 1;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	4a43      	ldr	r2, [pc, #268]	@ (80021f4 <manageLed+0x668>)
 80020e6:	7812      	ldrb	r2, [r2, #0]
 80020e8:	3301      	adds	r3, #1
 80020ea:	b2d9      	uxtb	r1, r3
 80020ec:	4b42      	ldr	r3, [pc, #264]	@ (80021f8 <manageLed+0x66c>)
 80020ee:	5499      	strb	r1, [r3, r2]
					cnt_dirt++;
 80020f0:	4b40      	ldr	r3, [pc, #256]	@ (80021f4 <manageLed+0x668>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	3301      	adds	r3, #1
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	4b3e      	ldr	r3, [pc, #248]	@ (80021f4 <manageLed+0x668>)
 80020fa:	701a      	strb	r2, [r3, #0]
				}
				if (yarn[i].ledState == 3) {
 80020fc:	493c      	ldr	r1, [pc, #240]	@ (80021f0 <manageLed+0x664>)
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	3330      	adds	r3, #48	@ 0x30
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d10d      	bne.n	800212e <manageLed+0x5a2>
					flaw_ind[cnt_flaw] = i + 1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	4a39      	ldr	r2, [pc, #228]	@ (80021fc <manageLed+0x670>)
 8002118:	7812      	ldrb	r2, [r2, #0]
 800211a:	3301      	adds	r3, #1
 800211c:	b2d9      	uxtb	r1, r3
 800211e:	4b38      	ldr	r3, [pc, #224]	@ (8002200 <manageLed+0x674>)
 8002120:	5499      	strb	r1, [r3, r2]
					cnt_flaw++;
 8002122:	4b36      	ldr	r3, [pc, #216]	@ (80021fc <manageLed+0x670>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	3301      	adds	r3, #1
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4b34      	ldr	r3, [pc, #208]	@ (80021fc <manageLed+0x670>)
 800212c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < num_led; i++) {
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3301      	adds	r3, #1
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b0b      	cmp	r3, #11
 8002138:	ddbc      	ble.n	80020b4 <manageLed+0x528>
				}
			}
		}

		if (overFlowFlag > 10) {
 800213a:	4b32      	ldr	r3, [pc, #200]	@ (8002204 <manageLed+0x678>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b0a      	cmp	r3, #10
 8002142:	d92a      	bls.n	800219a <manageLed+0x60e>
			overFlowFlag = 0;
 8002144:	4b2f      	ldr	r3, [pc, #188]	@ (8002204 <manageLed+0x678>)
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
			if (Blink == 1) {
 800214a:	4b2f      	ldr	r3, [pc, #188]	@ (8002208 <manageLed+0x67c>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00e      	beq.n	8002170 <manageLed+0x5e4>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_SET) //if off
 8002152:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002156:	482d      	ldr	r0, [pc, #180]	@ (800220c <manageLed+0x680>)
 8002158:	f004 faa0 	bl	800669c <HAL_GPIO_ReadPin>
 800215c:	4603      	mov	r3, r0
 800215e:	2b01      	cmp	r3, #1
 8002160:	d10c      	bne.n	800217c <manageLed+0x5f0>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // make on
 8002162:	2200      	movs	r2, #0
 8002164:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002168:	4828      	ldr	r0, [pc, #160]	@ (800220c <manageLed+0x680>)
 800216a:	f004 faaf 	bl	80066cc <HAL_GPIO_WritePin>
 800216e:	e005      	b.n	800217c <manageLed+0x5f0>

			} else
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002170:	2201      	movs	r2, #1
 8002172:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002176:	4825      	ldr	r0, [pc, #148]	@ (800220c <manageLed+0x680>)
 8002178:	f004 faa8 	bl	80066cc <HAL_GPIO_WritePin>

			Blink = !Blink;
 800217c:	4b22      	ldr	r3, [pc, #136]	@ (8002208 <manageLed+0x67c>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	bf14      	ite	ne
 8002184:	2301      	movne	r3, #1
 8002186:	2300      	moveq	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	f083 0301 	eor.w	r3, r3, #1
 800218e:	b2db      	uxtb	r3, r3
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4b1c      	ldr	r3, [pc, #112]	@ (8002208 <manageLed+0x67c>)
 8002198:	701a      	strb	r2, [r3, #0]
		}
		led_render();
 800219a:	f001 fd0f 	bl	8003bbc <led_render>
	}
	outCircuitPre = outCircuit;
 800219e:	4b1c      	ldr	r3, [pc, #112]	@ (8002210 <manageLed+0x684>)
 80021a0:	781a      	ldrb	r2, [r3, #0]
 80021a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002214 <manageLed+0x688>)
 80021a4:	701a      	strb	r2, [r3, #0]
	torn_statPre = torn_stat;
 80021a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002218 <manageLed+0x68c>)
 80021a8:	781a      	ldrb	r2, [r3, #0]
 80021aa:	4b1c      	ldr	r3, [pc, #112]	@ (800221c <manageLed+0x690>)
 80021ac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_led; i++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	e014      	b.n	80021de <manageLed+0x652>
		yarn[i].ledStatePre = yarn[i].ledState;
 80021b4:	490e      	ldr	r1, [pc, #56]	@ (80021f0 <manageLed+0x664>)
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	440b      	add	r3, r1
 80021c2:	3330      	adds	r3, #48	@ 0x30
 80021c4:	6819      	ldr	r1, [r3, #0]
 80021c6:	480a      	ldr	r0, [pc, #40]	@ (80021f0 <manageLed+0x664>)
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	4613      	mov	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	1a9b      	subs	r3, r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4403      	add	r3, r0
 80021d4:	3334      	adds	r3, #52	@ 0x34
 80021d6:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < num_led; i++)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b0b      	cmp	r3, #11
 80021e2:	dde7      	ble.n	80021b4 <manageLed+0x628>
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	3720      	adds	r7, #32
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bdb0      	pop	{r4, r5, r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000d10 	.word	0x20000d10
 80021f4:	20000435 	.word	0x20000435
 80021f8:	20000428 	.word	0x20000428
 80021fc:	20000434 	.word	0x20000434
 8002200:	2000041c 	.word	0x2000041c
 8002204:	20000413 	.word	0x20000413
 8002208:	20000012 	.word	0x20000012
 800220c:	48000800 	.word	0x48000800
 8002210:	20000416 	.word	0x20000416
 8002214:	20000417 	.word	0x20000417
 8002218:	20000436 	.word	0x20000436
 800221c:	20000437 	.word	0x20000437

08002220 <CheckState>:

//decision function (600ms)
void CheckState(void) {
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
	if (IRreceive == 0) {
 8002226:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <CheckState+0x44>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	f083 0301 	eor.w	r3, r3, #1
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d012      	beq.n	800225a <CheckState+0x3a>
		for (int i = 0; i < NUM_YARN; i++)
 8002234:	2300      	movs	r3, #0
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	e00c      	b.n	8002254 <CheckState+0x34>
			yarn_state(&yarn[i]);
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4a08      	ldr	r2, [pc, #32]	@ (8002268 <CheckState+0x48>)
 8002246:	4413      	add	r3, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f001 fda1 	bl	8003d90 <yarn_state>
		for (int i = 0; i < NUM_YARN; i++)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3301      	adds	r3, #1
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b0b      	cmp	r3, #11
 8002258:	ddef      	ble.n	800223a <CheckState+0x1a>
	}
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000414 	.word	0x20000414
 8002268:	20000d10 	.word	0x20000d10

0800226c <MCP41010_Write>:

//SPI--> adjust transmitter power
void MCP41010_Write(uint8_t value) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2];
	data[0] = 0x11; // Write command for Pot 0
 8002276:	2311      	movs	r3, #17
 8002278:	733b      	strb	r3, [r7, #12]
	data[1] = value; // Wiper position (0 to 255)
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	737b      	strb	r3, [r7, #13]

	// Pull CS low to start communication
	HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002284:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002288:	f004 fa20 	bl	80066cc <HAL_GPIO_WritePin>

	// Send the 16-bit command (2 bytes)
	HAL_SPI_Transmit(&hspi1, data, 2, HAL_MAX_DELAY);
 800228c:	f107 010c 	add.w	r1, r7, #12
 8002290:	f04f 33ff 	mov.w	r3, #4294967295
 8002294:	2202      	movs	r2, #2
 8002296:	4807      	ldr	r0, [pc, #28]	@ (80022b4 <MCP41010_Write+0x48>)
 8002298:	f005 ff13 	bl	80080c2 <HAL_SPI_Transmit>

	// Pull CS high to end communication
	HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 800229c:	2201      	movs	r2, #1
 800229e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022a6:	f004 fa11 	bl	80066cc <HAL_GPIO_WritePin>
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	2000087c 	.word	0x2000087c

080022b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b0a4      	sub	sp, #144	@ 0x90
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022be:	f001 fe24 	bl	8003f0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022c2:	f000 f983 	bl	80025cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022c6:	f7ff f89b 	bl	8001400 <MX_GPIO_Init>
  MX_DMA_Init();
 80022ca:	f7ff f85f 	bl	800138c <MX_DMA_Init>
  MX_ADC1_Init();
 80022ce:	f7fe fd83 	bl	8000dd8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80022d2:	f7fe fe4d 	bl	8000f70 <MX_ADC2_Init>
  MX_TIM1_Init();
 80022d6:	f000 ff9d 	bl	8003214 <MX_TIM1_Init>
  MX_TIM4_Init();
 80022da:	f001 f8ad 	bl	8003438 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80022de:	f001 fa1f 	bl	8003720 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80022e2:	f001 f837 	bl	8003354 <MX_TIM3_Init>
  MX_TIM2_Init();
 80022e6:	f000 ffe7 	bl	80032b8 <MX_TIM2_Init>
  MX_I2C2_Init();
 80022ea:	f7ff f8f9 	bl	80014e0 <MX_I2C2_Init>
  MX_SPI1_Init();
 80022ee:	f000 fc45 	bl	8002b7c <MX_SPI1_Init>
//	SSD1306_Init();
//	SSD1306_DrawBitmap(0, 0, logo, 128, 32, 1); // x=0, y=0, width=128, height=32, color=white
//	SSD1306_UpdateScreen(); // Update display to show the bitmap

	//start timers
	HAL_TIM_Base_Start_IT(&htim2);
 80022f2:	4898      	ldr	r0, [pc, #608]	@ (8002554 <main+0x29c>)
 80022f4:	f006 fa7a 	bl	80087ec <HAL_TIM_Base_Start_IT>

// Calibrate ADCs
	IR_Init();
 80022f8:	f7ff f98a 	bl	8001610 <IR_Init>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80022fc:	217f      	movs	r1, #127	@ 0x7f
 80022fe:	4896      	ldr	r0, [pc, #600]	@ (8002558 <main+0x2a0>)
 8002300:	f003 fb28 	bl	8005954 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8002304:	217f      	movs	r1, #127	@ 0x7f
 8002306:	4895      	ldr	r0, [pc, #596]	@ (800255c <main+0x2a4>)
 8002308:	f003 fb24 	bl	8005954 <HAL_ADCEx_Calibration_Start>
//
//	Start ADCs in independent mode
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1_data, 6);
 800230c:	2206      	movs	r2, #6
 800230e:	4994      	ldr	r1, [pc, #592]	@ (8002560 <main+0x2a8>)
 8002310:	4891      	ldr	r0, [pc, #580]	@ (8002558 <main+0x2a0>)
 8002312:	f002 fa77 	bl	8004804 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) adc2_data, 6);
 8002316:	2206      	movs	r2, #6
 8002318:	4992      	ldr	r1, [pc, #584]	@ (8002564 <main+0x2ac>)
 800231a:	4890      	ldr	r0, [pc, #576]	@ (800255c <main+0x2a4>)
 800231c:	f002 fa72 	bl	8004804 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim1);
 8002320:	4891      	ldr	r0, [pc, #580]	@ (8002568 <main+0x2b0>)
 8002322:	f006 fa01 	bl	8008728 <HAL_TIM_Base_Start>
//

	setup_param(&LED[0], 0, 0, 0); //led off
 8002326:	2300      	movs	r3, #0
 8002328:	2200      	movs	r2, #0
 800232a:	2100      	movs	r1, #0
 800232c:	488f      	ldr	r0, [pc, #572]	@ (800256c <main+0x2b4>)
 800232e:	f7fe fd3d 	bl	8000dac <setup_param>
	setup_param(&LED[1], 249, 114, 111); //dirt1
 8002332:	236f      	movs	r3, #111	@ 0x6f
 8002334:	2272      	movs	r2, #114	@ 0x72
 8002336:	21f9      	movs	r1, #249	@ 0xf9
 8002338:	488d      	ldr	r0, [pc, #564]	@ (8002570 <main+0x2b8>)
 800233a:	f7fe fd37 	bl	8000dac <setup_param>
	setup_param(&LED[2], 250, 0, 0); //dirt2
 800233e:	2300      	movs	r3, #0
 8002340:	2200      	movs	r2, #0
 8002342:	21fa      	movs	r1, #250	@ 0xfa
 8002344:	488b      	ldr	r0, [pc, #556]	@ (8002574 <main+0x2bc>)
 8002346:	f7fe fd31 	bl	8000dac <setup_param>
	setup_param(&LED[3], 0, 0, 250); //flaw
 800234a:	23fa      	movs	r3, #250	@ 0xfa
 800234c:	2200      	movs	r2, #0
 800234e:	2100      	movs	r1, #0
 8002350:	4889      	ldr	r0, [pc, #548]	@ (8002578 <main+0x2c0>)
 8002352:	f7fe fd2b 	bl	8000dac <setup_param>
	setup_param(&LED[4], 0, 230, 80); //tron
 8002356:	2350      	movs	r3, #80	@ 0x50
 8002358:	22e6      	movs	r2, #230	@ 0xe6
 800235a:	2100      	movs	r1, #0
 800235c:	4887      	ldr	r0, [pc, #540]	@ (800257c <main+0x2c4>)
 800235e:	f7fe fd25 	bl	8000dac <setup_param>
	setup_param(&LED[5], 0, 250, 0); //outcircuit
 8002362:	2300      	movs	r3, #0
 8002364:	22fa      	movs	r2, #250	@ 0xfa
 8002366:	2100      	movs	r1, #0
 8002368:	4885      	ldr	r0, [pc, #532]	@ (8002580 <main+0x2c8>)
 800236a:	f7fe fd1f 	bl	8000dac <setup_param>

// Make sure PB3 is high when sending data to neopixels
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002374:	4883      	ldr	r0, [pc, #524]	@ (8002584 <main+0x2cc>)
 8002376:	f004 f9a9 	bl	80066cc <HAL_GPIO_WritePin>
//Start Alarm
	rainbow(10);
 800237a:	200a      	movs	r0, #10
 800237c:	f001 fc44 	bl	8003c08 <rainbow>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002380:	2201      	movs	r2, #1
 8002382:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002386:	487f      	ldr	r0, [pc, #508]	@ (8002584 <main+0x2cc>)
 8002388:	f004 f9a0 	bl	80066cc <HAL_GPIO_WritePin>

	SSD1306_Fill(0);
 800238c:	2000      	movs	r0, #0
 800238e:	f000 fca5 	bl	8002cdc <SSD1306_Fill>
	SSD1306_GotoXY(0, 0);
 8002392:	2100      	movs	r1, #0
 8002394:	2000      	movs	r0, #0
 8002396:	f000 fd19 	bl	8002dcc <SSD1306_GotoXY>
	SSD1306_Puts("Calibration", &Font_7x10, 1);
 800239a:	2201      	movs	r2, #1
 800239c:	497a      	ldr	r1, [pc, #488]	@ (8002588 <main+0x2d0>)
 800239e:	487b      	ldr	r0, [pc, #492]	@ (800258c <main+0x2d4>)
 80023a0:	f000 fda8 	bl	8002ef4 <SSD1306_Puts>
	SSD1306_GotoXY(0, 15);
 80023a4:	210f      	movs	r1, #15
 80023a6:	2000      	movs	r0, #0
 80023a8:	f000 fd10 	bl	8002dcc <SSD1306_GotoXY>
	SSD1306_Puts("Started!", &Font_7x10, 1);
 80023ac:	2201      	movs	r2, #1
 80023ae:	4976      	ldr	r1, [pc, #472]	@ (8002588 <main+0x2d0>)
 80023b0:	4877      	ldr	r0, [pc, #476]	@ (8002590 <main+0x2d8>)
 80023b2:	f000 fd9f 	bl	8002ef4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80023b6:	f000 fc63 	bl	8002c80 <SSD1306_UpdateScreen>
//	Calibration
	for (int i = 0; i < NUM_YARN; i++) {
 80023ba:	2300      	movs	r3, #0
 80023bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80023c0:	e01b      	b.n	80023fa <main+0x142>
		yarn[i].minim = (1 << 12) - 1;
 80023c2:	4974      	ldr	r1, [pc, #464]	@ (8002594 <main+0x2dc>)
 80023c4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	440b      	add	r3, r1
 80023d2:	331c      	adds	r3, #28
 80023d4:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80023d8:	601a      	str	r2, [r3, #0]
		yarn[i].maxim = 0;
 80023da:	496e      	ldr	r1, [pc, #440]	@ (8002594 <main+0x2dc>)
 80023dc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	3318      	adds	r3, #24
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_YARN; i++) {
 80023f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023f4:	3301      	adds	r3, #1
 80023f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80023fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023fe:	2b0b      	cmp	r3, #11
 8002400:	dddf      	ble.n	80023c2 <main+0x10a>
	}
	uint32_t axtim_calib, calib_end;
	uint32_t tim_now = HAL_GetTick();
 8002402:	f001 fde7 	bl	8003fd4 <HAL_GetTick>
 8002406:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	calib_end = tim_now + calib_tim;
 800240a:	4b63      	ldr	r3, [pc, #396]	@ (8002598 <main+0x2e0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002414:	4413      	add	r3, r2
 8002416:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
//			for (int i = 0; i < NUM_YARN; i++)
//				resetCalibration(&yarn[i]);
//		}
//		tim_now = HAL_GetTick();
//	}
	flush();
 800241a:	f001 fa8f 	bl	800393c <flush>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800241e:	2200      	movs	r2, #0
 8002420:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002424:	4857      	ldr	r0, [pc, #348]	@ (8002584 <main+0x2cc>)
 8002426:	f004 f951 	bl	80066cc <HAL_GPIO_WritePin>
	//End of Calibration

	SSD1306_Fill(0);
 800242a:	2000      	movs	r0, #0
 800242c:	f000 fc56 	bl	8002cdc <SSD1306_Fill>
	SSD1306_GotoXY(0, 0);
 8002430:	2100      	movs	r1, #0
 8002432:	2000      	movs	r0, #0
 8002434:	f000 fcca 	bl	8002dcc <SSD1306_GotoXY>
	SSD1306_Puts("Calibration", &Font_7x10, 1);
 8002438:	2201      	movs	r2, #1
 800243a:	4953      	ldr	r1, [pc, #332]	@ (8002588 <main+0x2d0>)
 800243c:	4853      	ldr	r0, [pc, #332]	@ (800258c <main+0x2d4>)
 800243e:	f000 fd59 	bl	8002ef4 <SSD1306_Puts>
	SSD1306_GotoXY(0, 15);
 8002442:	210f      	movs	r1, #15
 8002444:	2000      	movs	r0, #0
 8002446:	f000 fcc1 	bl	8002dcc <SSD1306_GotoXY>
	SSD1306_Puts("Done!", &Font_7x10, 1);
 800244a:	2201      	movs	r2, #1
 800244c:	494e      	ldr	r1, [pc, #312]	@ (8002588 <main+0x2d0>)
 800244e:	4853      	ldr	r0, [pc, #332]	@ (800259c <main+0x2e4>)
 8002450:	f000 fd50 	bl	8002ef4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002454:	f000 fc14 	bl	8002c80 <SSD1306_UpdateScreen>

//	fadeNeopixels();
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002458:	2201      	movs	r2, #1
 800245a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800245e:	4849      	ldr	r0, [pc, #292]	@ (8002584 <main+0x2cc>)
 8002460:	f004 f934 	bl	80066cc <HAL_GPIO_WritePin>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//Write output
		if (outHigh)
 8002464:	4b4e      	ldr	r3, [pc, #312]	@ (80025a0 <main+0x2e8>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <main+0x1c0>
			HAL_GPIO_WritePin(OUTPUT_GPIO_Port, OUTPUT_Pin, GPIO_PIN_SET);
 800246c:	2201      	movs	r2, #1
 800246e:	2180      	movs	r1, #128	@ 0x80
 8002470:	4844      	ldr	r0, [pc, #272]	@ (8002584 <main+0x2cc>)
 8002472:	f004 f92b 	bl	80066cc <HAL_GPIO_WritePin>
 8002476:	e004      	b.n	8002482 <main+0x1ca>
		else
			HAL_GPIO_WritePin(OUTPUT_GPIO_Port, OUTPUT_Pin, GPIO_PIN_RESET);
 8002478:	2200      	movs	r2, #0
 800247a:	2180      	movs	r1, #128	@ 0x80
 800247c:	4841      	ldr	r0, [pc, #260]	@ (8002584 <main+0x2cc>)
 800247e:	f004 f925 	bl	80066cc <HAL_GPIO_WritePin>

		///define the transmitters' power
		MCP41010_Write(0);
 8002482:	2000      	movs	r0, #0
 8002484:	f7ff fef2 	bl	800226c <MCP41010_Write>
//				yarn[0].read_sens, yarn[1].read_sens, yarn[2].read_sens,
//				yarn[3].read_sens, yarn[4].read_sens, yarn[5].read_sens,
//				yarn[6].read_sens, yarn[7].read_sens, yarn[8].read_sens,
//				yarn[9].read_sens, yarn[10].read_sens, yarn[11].read_sens);

		sprintf(msg, "%4u,%4u \r\n", yarn[0].read_sens,yarn[0].per);
 8002488:	4b42      	ldr	r3, [pc, #264]	@ (8002594 <main+0x2dc>)
 800248a:	6a1a      	ldr	r2, [r3, #32]
 800248c:	4b41      	ldr	r3, [pc, #260]	@ (8002594 <main+0x2dc>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	1d38      	adds	r0, r7, #4
 8002492:	4944      	ldr	r1, [pc, #272]	@ (80025a4 <main+0x2ec>)
 8002494:	f009 f968 	bl	800b768 <siprintf>

		HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), 10);
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	4618      	mov	r0, r3
 800249c:	f7fd fec0 	bl	8000220 <strlen>
 80024a0:	4603      	mov	r3, r0
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	1d39      	adds	r1, r7, #4
 80024a6:	230a      	movs	r3, #10
 80024a8:	483f      	ldr	r0, [pc, #252]	@ (80025a8 <main+0x2f0>)
 80024aa:	f008 fae1 	bl	800aa70 <HAL_UART_Transmit>
//		HAL_Delay(10); // Slow down to avoid UART overrun

		if (FlagCheckState) {
 80024ae:	4b3f      	ldr	r3, [pc, #252]	@ (80025ac <main+0x2f4>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d004      	beq.n	80024c2 <main+0x20a>
			FlagCheckState = 0;    // Clear flag
 80024b8:	4b3c      	ldr	r3, [pc, #240]	@ (80025ac <main+0x2f4>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
			CheckState(); // Execute 600 ms task
 80024be:	f7ff feaf 	bl	8002220 <CheckState>
		}
		if (FlagLedState == true) {
 80024c2:	4b3b      	ldr	r3, [pc, #236]	@ (80025b0 <main+0x2f8>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d10b      	bne.n	80024e4 <main+0x22c>
			FlagLedState = false;
 80024cc:	4b38      	ldr	r3, [pc, #224]	@ (80025b0 <main+0x2f8>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
			manageLed();
 80024d2:	f7ff fb5b 	bl	8001b8c <manageLed>
			overFlowFlag++;
 80024d6:	4b37      	ldr	r3, [pc, #220]	@ (80025b4 <main+0x2fc>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	3301      	adds	r3, #1
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	4b34      	ldr	r3, [pc, #208]	@ (80025b4 <main+0x2fc>)
 80024e2:	701a      	strb	r2, [r3, #0]
		}

		if (newIRDataFlag == 1) {
 80024e4:	4b34      	ldr	r3, [pc, #208]	@ (80025b8 <main+0x300>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d108      	bne.n	8002500 <main+0x248>
			command = (IR_GetCommand() >> 8) & 0xFF; // Update command first
 80024ee:	f7ff fa6b 	bl	80019c8 <IR_GetCommand>
 80024f2:	4603      	mov	r3, r0
 80024f4:	121b      	asrs	r3, r3, #8
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	4b30      	ldr	r3, [pc, #192]	@ (80025bc <main+0x304>)
 80024fa:	701a      	strb	r2, [r3, #0]
			IR_Reset(); // Clear detection flag
 80024fc:	f7ff fa70 	bl	80019e0 <IR_Reset>
		}

		if (command == 0x00) {
 8002500:	4b2e      	ldr	r3, [pc, #184]	@ (80025bc <main+0x304>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d11f      	bne.n	800254a <main+0x292>
			IRreceivePre = IRreceive;
 800250a:	4b2d      	ldr	r3, [pc, #180]	@ (80025c0 <main+0x308>)
 800250c:	781a      	ldrb	r2, [r3, #0]
 800250e:	4b2d      	ldr	r3, [pc, #180]	@ (80025c4 <main+0x30c>)
 8002510:	701a      	strb	r2, [r3, #0]
			IRreceive = 1;
 8002512:	4b2b      	ldr	r3, [pc, #172]	@ (80025c0 <main+0x308>)
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
			if (IRreceive != IRreceivePre) {
 8002518:	4b29      	ldr	r3, [pc, #164]	@ (80025c0 <main+0x308>)
 800251a:	781a      	ldrb	r2, [r3, #0]
 800251c:	4b29      	ldr	r3, [pc, #164]	@ (80025c4 <main+0x30c>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d00e      	beq.n	8002542 <main+0x28a>
				outCircuit = !outCircuit;
 8002524:	4b28      	ldr	r3, [pc, #160]	@ (80025c8 <main+0x310>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf14      	ite	ne
 800252c:	2301      	movne	r3, #1
 800252e:	2300      	moveq	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	f083 0301 	eor.w	r3, r3, #1
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4b22      	ldr	r3, [pc, #136]	@ (80025c8 <main+0x310>)
 8002540:	701a      	strb	r2, [r3, #0]
			}
			command = 100; // Prevent re-triggering
 8002542:	4b1e      	ldr	r3, [pc, #120]	@ (80025bc <main+0x304>)
 8002544:	2264      	movs	r2, #100	@ 0x64
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	e002      	b.n	8002550 <main+0x298>
		} else
			IRreceive = 0;
 800254a:	4b1d      	ldr	r3, [pc, #116]	@ (80025c0 <main+0x308>)
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]

		__WFI();
 8002550:	bf30      	wfi
	while (1) {
 8002552:	e787      	b.n	8002464 <main+0x1ac>
 8002554:	20000b38 	.word	0x20000b38
 8002558:	200000d8 	.word	0x200000d8
 800255c:	20000144 	.word	0x20000144
 8002560:	200003f8 	.word	0x200003f8
 8002564:	20000404 	.word	0x20000404
 8002568:	20000aec 	.word	0x20000aec
 800256c:	20000090 	.word	0x20000090
 8002570:	2000009c 	.word	0x2000009c
 8002574:	200000a8 	.word	0x200000a8
 8002578:	200000b4 	.word	0x200000b4
 800257c:	200000c0 	.word	0x200000c0
 8002580:	200000cc 	.word	0x200000cc
 8002584:	48000800 	.word	0x48000800
 8002588:	20000000 	.word	0x20000000
 800258c:	0800c0c0 	.word	0x0800c0c0
 8002590:	0800c0cc 	.word	0x0800c0cc
 8002594:	20000d10 	.word	0x20000d10
 8002598:	2000000c 	.word	0x2000000c
 800259c:	0800c0d8 	.word	0x0800c0d8
 80025a0:	20000418 	.word	0x20000418
 80025a4:	0800c0e0 	.word	0x0800c0e0
 80025a8:	20000c7c 	.word	0x20000c7c
 80025ac:	20000411 	.word	0x20000411
 80025b0:	20000412 	.word	0x20000412
 80025b4:	20000413 	.word	0x20000413
 80025b8:	20000410 	.word	0x20000410
 80025bc:	20000008 	.word	0x20000008
 80025c0:	20000414 	.word	0x20000414
 80025c4:	20000415 	.word	0x20000415
 80025c8:	20000416 	.word	0x20000416

080025cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b094      	sub	sp, #80	@ 0x50
 80025d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025d2:	f107 0318 	add.w	r3, r7, #24
 80025d6:	2238      	movs	r2, #56	@ 0x38
 80025d8:	2100      	movs	r1, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f009 f8e4 	bl	800b7a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025e0:	1d3b      	adds	r3, r7, #4
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]
 80025ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80025ee:	2000      	movs	r0, #0
 80025f0:	f004 fcea 	bl	8006fc8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025f4:	2301      	movs	r3, #1
 80025f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025fc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025fe:	2302      	movs	r3, #2
 8002600:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002602:	2303      	movs	r3, #3
 8002604:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002606:	2302      	movs	r3, #2
 8002608:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800260a:	2355      	movs	r3, #85	@ 0x55
 800260c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800260e:	2302      	movs	r3, #2
 8002610:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002612:	2302      	movs	r3, #2
 8002614:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002616:	2302      	movs	r3, #2
 8002618:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800261a:	f107 0318 	add.w	r3, r7, #24
 800261e:	4618      	mov	r0, r3
 8002620:	f004 fd86 	bl	8007130 <HAL_RCC_OscConfig>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800262a:	f000 f818 	bl	800265e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800262e:	230f      	movs	r3, #15
 8002630:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002632:	2303      	movs	r3, #3
 8002634:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	2104      	movs	r1, #4
 8002646:	4618      	mov	r0, r3
 8002648:	f005 f884 	bl	8007754 <HAL_RCC_ClockConfig>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002652:	f000 f804 	bl	800265e <Error_Handler>
  }
}
 8002656:	bf00      	nop
 8002658:	3750      	adds	r7, #80	@ 0x50
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002662:	b672      	cpsid	i
}
 8002664:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002666:	bf00      	nop
 8002668:	e7fd      	b.n	8002666 <Error_Handler+0x8>
	...

0800266c <decide_Oled>:
#include "manage_OLED.h"
uint16_t x_offset = 0;
char indec_str[10];
uint16_t row = 0;

void decide_Oled() {
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
	if (Oled_state == 0) {
 8002670:	4b22      	ldr	r3, [pc, #136]	@ (80026fc <decide_Oled+0x90>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d104      	bne.n	8002682 <decide_Oled+0x16>
		SSD1306_Fill(0);
 8002678:	2000      	movs	r0, #0
 800267a:	f000 fb2f 	bl	8002cdc <SSD1306_Fill>
		SSD1306_UpdateScreen();
 800267e:	f000 faff 	bl	8002c80 <SSD1306_UpdateScreen>
	}

	if (Oled_state == 4)
 8002682:	4b1e      	ldr	r3, [pc, #120]	@ (80026fc <decide_Oled+0x90>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b04      	cmp	r3, #4
 8002688:	d106      	bne.n	8002698 <decide_Oled+0x2c>
		Oled_torn(indec + 1);
 800268a:	4b1d      	ldr	r3, [pc, #116]	@ (8002700 <decide_Oled+0x94>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	3301      	adds	r3, #1
 8002690:	b2db      	uxtb	r3, r3
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f85c 	bl	8002750 <Oled_torn>

	if (Oled_state == 5)
 8002698:	4b18      	ldr	r3, [pc, #96]	@ (80026fc <decide_Oled+0x90>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b05      	cmp	r3, #5
 800269e:	d101      	bne.n	80026a4 <decide_Oled+0x38>
		Oled_Outcircuit();
 80026a0:	f000 f840 	bl	8002724 <Oled_Outcircuit>

	if (Oled_state == 123) {  // this state is conncted to dirt1, dirt2 or flaw
 80026a4:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <decide_Oled+0x90>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b7b      	cmp	r3, #123	@ 0x7b
 80026aa:	d124      	bne.n	80026f6 <decide_Oled+0x8a>
		if (blink_oledPre != blink_oled && elapsed == 1) {
 80026ac:	4b15      	ldr	r3, [pc, #84]	@ (8002704 <decide_Oled+0x98>)
 80026ae:	781a      	ldrb	r2, [r3, #0]
 80026b0:	4b15      	ldr	r3, [pc, #84]	@ (8002708 <decide_Oled+0x9c>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d00e      	beq.n	80026d6 <decide_Oled+0x6a>
 80026b8:	4b14      	ldr	r3, [pc, #80]	@ (800270c <decide_Oled+0xa0>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <decide_Oled+0x6a>
			Oled_dirt_flaw(dirt_ind, cnt_dirt, flaw_ind, cnt_flaw);
 80026c0:	4b13      	ldr	r3, [pc, #76]	@ (8002710 <decide_Oled+0xa4>)
 80026c2:	7819      	ldrb	r1, [r3, #0]
 80026c4:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <decide_Oled+0xa8>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	4a13      	ldr	r2, [pc, #76]	@ (8002718 <decide_Oled+0xac>)
 80026ca:	4814      	ldr	r0, [pc, #80]	@ (800271c <decide_Oled+0xb0>)
 80026cc:	f000 f884 	bl	80027d8 <Oled_dirt_flaw>
			elapsed = 0;
 80026d0:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <decide_Oled+0xa0>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]
		}
		counter_oled++;
 80026d6:	4b12      	ldr	r3, [pc, #72]	@ (8002720 <decide_Oled+0xb4>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	3301      	adds	r3, #1
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4b10      	ldr	r3, [pc, #64]	@ (8002720 <decide_Oled+0xb4>)
 80026e0:	701a      	strb	r2, [r3, #0]
		if (counter_oled > 20) {
 80026e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002720 <decide_Oled+0xb4>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b14      	cmp	r3, #20
 80026e8:	d905      	bls.n	80026f6 <decide_Oled+0x8a>
			counter_oled = 0;
 80026ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002720 <decide_Oled+0xb4>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
			elapsed = 1;
 80026f0:	4b06      	ldr	r3, [pc, #24]	@ (800270c <decide_Oled+0xa0>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000869 	.word	0x20000869
 8002700:	20000861 	.word	0x20000861
 8002704:	20000016 	.word	0x20000016
 8002708:	2000086c 	.word	0x2000086c
 800270c:	20000015 	.word	0x20000015
 8002710:	20000435 	.word	0x20000435
 8002714:	20000434 	.word	0x20000434
 8002718:	2000041c 	.word	0x2000041c
 800271c:	20000428 	.word	0x20000428
 8002720:	2000086d 	.word	0x2000086d

08002724 <Oled_Outcircuit>:

void Oled_Outcircuit() {
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 8002728:	2000      	movs	r0, #0
 800272a:	f000 fad7 	bl	8002cdc <SSD1306_Fill>
	SSD1306_GotoXY(0, 15);
 800272e:	210f      	movs	r1, #15
 8002730:	2000      	movs	r0, #0
 8002732:	f000 fb4b 	bl	8002dcc <SSD1306_GotoXY>
	SSD1306_Puts("Out of circuit!", &Font_7x10, 1);
 8002736:	2201      	movs	r2, #1
 8002738:	4903      	ldr	r1, [pc, #12]	@ (8002748 <Oled_Outcircuit+0x24>)
 800273a:	4804      	ldr	r0, [pc, #16]	@ (800274c <Oled_Outcircuit+0x28>)
 800273c:	f000 fbda 	bl	8002ef4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002740:	f000 fa9e 	bl	8002c80 <SSD1306_UpdateScreen>
}
 8002744:	bf00      	nop
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000000 	.word	0x20000000
 800274c:	0800c0ec 	.word	0x0800c0ec

08002750 <Oled_torn>:

void Oled_torn(uint8_t indec) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
	char indec_str[10]; // Buffer for the number (adjust size if needed)
	sprintf(indec_str, "%d", indec); // Convert index to string
 800275a:	79fa      	ldrb	r2, [r7, #7]
 800275c:	f107 0308 	add.w	r3, r7, #8
 8002760:	4918      	ldr	r1, [pc, #96]	@ (80027c4 <Oled_torn+0x74>)
 8002762:	4618      	mov	r0, r3
 8002764:	f009 f800 	bl	800b768 <siprintf>
	x_offset = 0;
 8002768:	4b17      	ldr	r3, [pc, #92]	@ (80027c8 <Oled_torn+0x78>)
 800276a:	2200      	movs	r2, #0
 800276c:	801a      	strh	r2, [r3, #0]
	SSD1306_Fill(0);
 800276e:	2000      	movs	r0, #0
 8002770:	f000 fab4 	bl	8002cdc <SSD1306_Fill>
	SSD1306_GotoXY(0, 0);
 8002774:	2100      	movs	r1, #0
 8002776:	2000      	movs	r0, #0
 8002778:	f000 fb28 	bl	8002dcc <SSD1306_GotoXY>
	SSD1306_Puts("Yarn Num: ", &Font_7x10, 1);
 800277c:	2201      	movs	r2, #1
 800277e:	4913      	ldr	r1, [pc, #76]	@ (80027cc <Oled_torn+0x7c>)
 8002780:	4813      	ldr	r0, [pc, #76]	@ (80027d0 <Oled_torn+0x80>)
 8002782:	f000 fbb7 	bl	8002ef4 <SSD1306_Puts>
	int x_offset = 9 * 7 + 5; // 63 (text width) + 5 (gap)
 8002786:	2344      	movs	r3, #68	@ 0x44
 8002788:	617b      	str	r3, [r7, #20]
	SSD1306_GotoXY(x_offset, 0); // Position next to the first string
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	b29b      	uxth	r3, r3
 800278e:	2100      	movs	r1, #0
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fb1b 	bl	8002dcc <SSD1306_GotoXY>
	SSD1306_Puts(indec_str, &Font_7x10, 1);
 8002796:	f107 0308 	add.w	r3, r7, #8
 800279a:	2201      	movs	r2, #1
 800279c:	490b      	ldr	r1, [pc, #44]	@ (80027cc <Oled_torn+0x7c>)
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 fba8 	bl	8002ef4 <SSD1306_Puts>
	SSD1306_GotoXY(0, 15);
 80027a4:	210f      	movs	r1, #15
 80027a6:	2000      	movs	r0, #0
 80027a8:	f000 fb10 	bl	8002dcc <SSD1306_GotoXY>
	SSD1306_Puts("break!", &Font_7x10, 1);
 80027ac:	2201      	movs	r2, #1
 80027ae:	4907      	ldr	r1, [pc, #28]	@ (80027cc <Oled_torn+0x7c>)
 80027b0:	4808      	ldr	r0, [pc, #32]	@ (80027d4 <Oled_torn+0x84>)
 80027b2:	f000 fb9f 	bl	8002ef4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80027b6:	f000 fa63 	bl	8002c80 <SSD1306_UpdateScreen>
}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	0800c0fc 	.word	0x0800c0fc
 80027c8:	2000086e 	.word	0x2000086e
 80027cc:	20000000 	.word	0x20000000
 80027d0:	0800c100 	.word	0x0800c100
 80027d4:	0800c10c 	.word	0x0800c10c

080027d8 <Oled_dirt_flaw>:

void Oled_dirt_flaw(volatile uint8_t dirt_ind[12], uint8_t cnt_dirt,
		volatile uint8_t dirt_flaw[12], uint8_t cnt_flaw) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	607a      	str	r2, [r7, #4]
 80027e2:	461a      	mov	r2, r3
 80027e4:	460b      	mov	r3, r1
 80027e6:	72fb      	strb	r3, [r7, #11]
 80027e8:	4613      	mov	r3, r2
 80027ea:	72bb      	strb	r3, [r7, #10]

	blink_oledPre = blink_oled;
 80027ec:	4b9e      	ldr	r3, [pc, #632]	@ (8002a68 <Oled_dirt_flaw+0x290>)
 80027ee:	781a      	ldrb	r2, [r3, #0]
 80027f0:	4b9e      	ldr	r3, [pc, #632]	@ (8002a6c <Oled_dirt_flaw+0x294>)
 80027f2:	701a      	strb	r2, [r3, #0]
	x_offset = 0;
 80027f4:	4b9e      	ldr	r3, [pc, #632]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	801a      	strh	r2, [r3, #0]
	SSD1306_Fill(0);
 80027fa:	2000      	movs	r0, #0
 80027fc:	f000 fa6e 	bl	8002cdc <SSD1306_Fill>
	SSD1306_GotoXY(0, 0);
 8002800:	2100      	movs	r1, #0
 8002802:	2000      	movs	r0, #0
 8002804:	f000 fae2 	bl	8002dcc <SSD1306_GotoXY>
	//////////////////////// Display "clean channels:"
	if (cnt_dirt > 0) {
 8002808:	7afb      	ldrb	r3, [r7, #11]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80af 	beq.w	800296e <Oled_dirt_flaw+0x196>
		SSD1306_Puts("Clean channel(s):", &Font_7x10, 1);
 8002810:	2201      	movs	r2, #1
 8002812:	4998      	ldr	r1, [pc, #608]	@ (8002a74 <Oled_dirt_flaw+0x29c>)
 8002814:	4898      	ldr	r0, [pc, #608]	@ (8002a78 <Oled_dirt_flaw+0x2a0>)
 8002816:	f000 fb6d 	bl	8002ef4 <SSD1306_Puts>
		if (blink_oled == 0) {
 800281a:	4b93      	ldr	r3, [pc, #588]	@ (8002a68 <Oled_dirt_flaw+0x290>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d154      	bne.n	80028cc <Oled_dirt_flaw+0xf4>
			for (uint8_t i = 0; i < cnt_dirt; i++) {
 8002822:	2300      	movs	r3, #0
 8002824:	75fb      	strb	r3, [r7, #23]
 8002826:	e04c      	b.n	80028c2 <Oled_dirt_flaw+0xea>
				SSD1306_GotoXY(x_offset, 15);
 8002828:	4b91      	ldr	r3, [pc, #580]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	210f      	movs	r1, #15
 800282e:	4618      	mov	r0, r3
 8002830:	f000 facc 	bl	8002dcc <SSD1306_GotoXY>
				sprintf(indec_str, "%d", dirt_ind[i]);
 8002834:	7dfb      	ldrb	r3, [r7, #23]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4413      	add	r3, r2
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	498e      	ldr	r1, [pc, #568]	@ (8002a7c <Oled_dirt_flaw+0x2a4>)
 8002842:	488f      	ldr	r0, [pc, #572]	@ (8002a80 <Oled_dirt_flaw+0x2a8>)
 8002844:	f008 ff90 	bl	800b768 <siprintf>
				SSD1306_Puts(indec_str, &Font_7x10, 1);
 8002848:	2201      	movs	r2, #1
 800284a:	498a      	ldr	r1, [pc, #552]	@ (8002a74 <Oled_dirt_flaw+0x29c>)
 800284c:	488c      	ldr	r0, [pc, #560]	@ (8002a80 <Oled_dirt_flaw+0x2a8>)
 800284e:	f000 fb51 	bl	8002ef4 <SSD1306_Puts>
				x_offset = (dirt_ind[i] > 9) ? x_offset + 2 * 7 : x_offset + 7;
 8002852:	7dfb      	ldrb	r3, [r7, #23]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4413      	add	r3, r2
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b09      	cmp	r3, #9
 800285e:	d904      	bls.n	800286a <Oled_dirt_flaw+0x92>
 8002860:	4b83      	ldr	r3, [pc, #524]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	330e      	adds	r3, #14
 8002866:	b29b      	uxth	r3, r3
 8002868:	e003      	b.n	8002872 <Oled_dirt_flaw+0x9a>
 800286a:	4b81      	ldr	r3, [pc, #516]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	3307      	adds	r3, #7
 8002870:	b29b      	uxth	r3, r3
 8002872:	4a7f      	ldr	r2, [pc, #508]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 8002874:	8013      	strh	r3, [r2, #0]
				SSD1306_GotoXY(x_offset, 15);
 8002876:	4b7e      	ldr	r3, [pc, #504]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	210f      	movs	r1, #15
 800287c:	4618      	mov	r0, r3
 800287e:	f000 faa5 	bl	8002dcc <SSD1306_GotoXY>
				if (i < cnt_dirt - 1) {
 8002882:	7dfa      	ldrb	r2, [r7, #23]
 8002884:	7afb      	ldrb	r3, [r7, #11]
 8002886:	3b01      	subs	r3, #1
 8002888:	429a      	cmp	r2, r3
 800288a:	da0a      	bge.n	80028a2 <Oled_dirt_flaw+0xca>
					SSD1306_Puts(",", &Font_7x10, 1);
 800288c:	2201      	movs	r2, #1
 800288e:	4979      	ldr	r1, [pc, #484]	@ (8002a74 <Oled_dirt_flaw+0x29c>)
 8002890:	487c      	ldr	r0, [pc, #496]	@ (8002a84 <Oled_dirt_flaw+0x2ac>)
 8002892:	f000 fb2f 	bl	8002ef4 <SSD1306_Puts>
					x_offset += 7;
 8002896:	4b76      	ldr	r3, [pc, #472]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	3307      	adds	r3, #7
 800289c:	b29a      	uxth	r2, r3
 800289e:	4b74      	ldr	r3, [pc, #464]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 80028a0:	801a      	strh	r2, [r3, #0]
				}
				if (x_offset >= 17 * 7) {
 80028a2:	4b73      	ldr	r3, [pc, #460]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	2b76      	cmp	r3, #118	@ 0x76
 80028a8:	d908      	bls.n	80028bc <Oled_dirt_flaw+0xe4>
					blink_oled = 1;
 80028aa:	4b6f      	ldr	r3, [pc, #444]	@ (8002a68 <Oled_dirt_flaw+0x290>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]
					i_cnt_dirt = i + 1;
 80028b0:	7dfb      	ldrb	r3, [r7, #23]
 80028b2:	3301      	adds	r3, #1
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4b74      	ldr	r3, [pc, #464]	@ (8002a88 <Oled_dirt_flaw+0x2b0>)
 80028b8:	701a      	strb	r2, [r3, #0]
					break;
 80028ba:	e147      	b.n	8002b4c <Oled_dirt_flaw+0x374>
			for (uint8_t i = 0; i < cnt_dirt; i++) {
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
 80028be:	3301      	adds	r3, #1
 80028c0:	75fb      	strb	r3, [r7, #23]
 80028c2:	7dfa      	ldrb	r2, [r7, #23]
 80028c4:	7afb      	ldrb	r3, [r7, #11]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d3ae      	bcc.n	8002828 <Oled_dirt_flaw+0x50>
 80028ca:	e13f      	b.n	8002b4c <Oled_dirt_flaw+0x374>
				}
			}
		} else if (blink_oled == 1) {
 80028cc:	4b66      	ldr	r3, [pc, #408]	@ (8002a68 <Oled_dirt_flaw+0x290>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	f040 813b 	bne.w	8002b4c <Oled_dirt_flaw+0x374>
			for (uint8_t i = i_cnt_dirt; i < cnt_dirt; i++) {
 80028d6:	4b6c      	ldr	r3, [pc, #432]	@ (8002a88 <Oled_dirt_flaw+0x2b0>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	75bb      	strb	r3, [r7, #22]
 80028dc:	e03f      	b.n	800295e <Oled_dirt_flaw+0x186>
				SSD1306_GotoXY(x_offset, 15);
 80028de:	4b64      	ldr	r3, [pc, #400]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	210f      	movs	r1, #15
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fa71 	bl	8002dcc <SSD1306_GotoXY>
				sprintf(indec_str, "%d", dirt_ind[i]);
 80028ea:	7dbb      	ldrb	r3, [r7, #22]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4413      	add	r3, r2
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	461a      	mov	r2, r3
 80028f6:	4961      	ldr	r1, [pc, #388]	@ (8002a7c <Oled_dirt_flaw+0x2a4>)
 80028f8:	4861      	ldr	r0, [pc, #388]	@ (8002a80 <Oled_dirt_flaw+0x2a8>)
 80028fa:	f008 ff35 	bl	800b768 <siprintf>
				SSD1306_Puts(indec_str, &Font_7x10, 1);
 80028fe:	2201      	movs	r2, #1
 8002900:	495c      	ldr	r1, [pc, #368]	@ (8002a74 <Oled_dirt_flaw+0x29c>)
 8002902:	485f      	ldr	r0, [pc, #380]	@ (8002a80 <Oled_dirt_flaw+0x2a8>)
 8002904:	f000 faf6 	bl	8002ef4 <SSD1306_Puts>
				x_offset = (dirt_ind[i] > 9) ? x_offset + 2 * 7 : x_offset + 7;
 8002908:	7dbb      	ldrb	r3, [r7, #22]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4413      	add	r3, r2
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b09      	cmp	r3, #9
 8002914:	d904      	bls.n	8002920 <Oled_dirt_flaw+0x148>
 8002916:	4b56      	ldr	r3, [pc, #344]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	330e      	adds	r3, #14
 800291c:	b29b      	uxth	r3, r3
 800291e:	e003      	b.n	8002928 <Oled_dirt_flaw+0x150>
 8002920:	4b53      	ldr	r3, [pc, #332]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	3307      	adds	r3, #7
 8002926:	b29b      	uxth	r3, r3
 8002928:	4a51      	ldr	r2, [pc, #324]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 800292a:	8013      	strh	r3, [r2, #0]
				SSD1306_GotoXY(x_offset, 15);
 800292c:	4b50      	ldr	r3, [pc, #320]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	210f      	movs	r1, #15
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fa4a 	bl	8002dcc <SSD1306_GotoXY>
				if (i < cnt_dirt - 1) {
 8002938:	7dba      	ldrb	r2, [r7, #22]
 800293a:	7afb      	ldrb	r3, [r7, #11]
 800293c:	3b01      	subs	r3, #1
 800293e:	429a      	cmp	r2, r3
 8002940:	da0a      	bge.n	8002958 <Oled_dirt_flaw+0x180>
					SSD1306_Puts(",", &Font_7x10, 1);
 8002942:	2201      	movs	r2, #1
 8002944:	494b      	ldr	r1, [pc, #300]	@ (8002a74 <Oled_dirt_flaw+0x29c>)
 8002946:	484f      	ldr	r0, [pc, #316]	@ (8002a84 <Oled_dirt_flaw+0x2ac>)
 8002948:	f000 fad4 	bl	8002ef4 <SSD1306_Puts>
					x_offset += 7;
 800294c:	4b48      	ldr	r3, [pc, #288]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	3307      	adds	r3, #7
 8002952:	b29a      	uxth	r2, r3
 8002954:	4b46      	ldr	r3, [pc, #280]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 8002956:	801a      	strh	r2, [r3, #0]
			for (uint8_t i = i_cnt_dirt; i < cnt_dirt; i++) {
 8002958:	7dbb      	ldrb	r3, [r7, #22]
 800295a:	3301      	adds	r3, #1
 800295c:	75bb      	strb	r3, [r7, #22]
 800295e:	7dba      	ldrb	r2, [r7, #22]
 8002960:	7afb      	ldrb	r3, [r7, #11]
 8002962:	429a      	cmp	r2, r3
 8002964:	d3bb      	bcc.n	80028de <Oled_dirt_flaw+0x106>
				}
			}
			blink_oled = 0;
 8002966:	4b40      	ldr	r3, [pc, #256]	@ (8002a68 <Oled_dirt_flaw+0x290>)
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	e0ee      	b.n	8002b4c <Oled_dirt_flaw+0x374>
		}

		//////////////////////// Display Technical flaw
	} else if (cnt_flaw > 0) {
 800296e:	7abb      	ldrb	r3, [r7, #10]
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80eb 	beq.w	8002b4c <Oled_dirt_flaw+0x374>
		if (blink_oled == 0) {
 8002976:	4b3c      	ldr	r3, [pc, #240]	@ (8002a68 <Oled_dirt_flaw+0x290>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10e      	bne.n	800299c <Oled_dirt_flaw+0x1c4>
			SSD1306_GotoXY(x_offset, 0);
 800297e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fa21 	bl	8002dcc <SSD1306_GotoXY>
			SSD1306_Puts("Technical flaw!", &Font_7x10, 1);
 800298a:	2201      	movs	r2, #1
 800298c:	4939      	ldr	r1, [pc, #228]	@ (8002a74 <Oled_dirt_flaw+0x29c>)
 800298e:	483f      	ldr	r0, [pc, #252]	@ (8002a8c <Oled_dirt_flaw+0x2b4>)
 8002990:	f000 fab0 	bl	8002ef4 <SSD1306_Puts>
			blink_oled = 1;
 8002994:	4b34      	ldr	r3, [pc, #208]	@ (8002a68 <Oled_dirt_flaw+0x290>)
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	e0d7      	b.n	8002b4c <Oled_dirt_flaw+0x374>
		} else if (blink_oled == 1) {
 800299c:	4b32      	ldr	r3, [pc, #200]	@ (8002a68 <Oled_dirt_flaw+0x290>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d17b      	bne.n	8002a9c <Oled_dirt_flaw+0x2c4>
			SSD1306_GotoXY(x_offset, 0);
 80029a4:	4b32      	ldr	r3, [pc, #200]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 fa0e 	bl	8002dcc <SSD1306_GotoXY>
			SSD1306_Puts("Channel(s) Out:", &Font_7x10, 1);
 80029b0:	2201      	movs	r2, #1
 80029b2:	4930      	ldr	r1, [pc, #192]	@ (8002a74 <Oled_dirt_flaw+0x29c>)
 80029b4:	4836      	ldr	r0, [pc, #216]	@ (8002a90 <Oled_dirt_flaw+0x2b8>)
 80029b6:	f000 fa9d 	bl	8002ef4 <SSD1306_Puts>

			for (uint8_t i = 0; i < cnt_flaw; i++) {
 80029ba:	2300      	movs	r3, #0
 80029bc:	757b      	strb	r3, [r7, #21]
 80029be:	e04d      	b.n	8002a5c <Oled_dirt_flaw+0x284>
				SSD1306_GotoXY(x_offset, 15);
 80029c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	210f      	movs	r1, #15
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fa00 	bl	8002dcc <SSD1306_GotoXY>
				sprintf(indec_str, "%d", flaw_ind[i]);
 80029cc:	7d7b      	ldrb	r3, [r7, #21]
 80029ce:	4a31      	ldr	r2, [pc, #196]	@ (8002a94 <Oled_dirt_flaw+0x2bc>)
 80029d0:	5cd3      	ldrb	r3, [r2, r3]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	4929      	ldr	r1, [pc, #164]	@ (8002a7c <Oled_dirt_flaw+0x2a4>)
 80029d8:	4829      	ldr	r0, [pc, #164]	@ (8002a80 <Oled_dirt_flaw+0x2a8>)
 80029da:	f008 fec5 	bl	800b768 <siprintf>
				SSD1306_Puts(indec_str, &Font_7x10, 1);
 80029de:	2201      	movs	r2, #1
 80029e0:	4924      	ldr	r1, [pc, #144]	@ (8002a74 <Oled_dirt_flaw+0x29c>)
 80029e2:	4827      	ldr	r0, [pc, #156]	@ (8002a80 <Oled_dirt_flaw+0x2a8>)
 80029e4:	f000 fa86 	bl	8002ef4 <SSD1306_Puts>
				x_offset = (flaw_ind[i] > 9) ? x_offset + 2 * 7 : x_offset + 7;
 80029e8:	7d7b      	ldrb	r3, [r7, #21]
 80029ea:	4a2a      	ldr	r2, [pc, #168]	@ (8002a94 <Oled_dirt_flaw+0x2bc>)
 80029ec:	5cd3      	ldrb	r3, [r2, r3]
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b09      	cmp	r3, #9
 80029f2:	d904      	bls.n	80029fe <Oled_dirt_flaw+0x226>
 80029f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	330e      	adds	r3, #14
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	e003      	b.n	8002a06 <Oled_dirt_flaw+0x22e>
 80029fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	3307      	adds	r3, #7
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	4a1a      	ldr	r2, [pc, #104]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 8002a08:	8013      	strh	r3, [r2, #0]
				SSD1306_GotoXY(x_offset, 15);
 8002a0a:	4b19      	ldr	r3, [pc, #100]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	210f      	movs	r1, #15
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 f9db 	bl	8002dcc <SSD1306_GotoXY>
				if (i < cnt_flaw - 1) {
 8002a16:	7d7a      	ldrb	r2, [r7, #21]
 8002a18:	7abb      	ldrb	r3, [r7, #10]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	da0a      	bge.n	8002a36 <Oled_dirt_flaw+0x25e>
					SSD1306_Puts(",", &Font_7x10, 1);
 8002a20:	2201      	movs	r2, #1
 8002a22:	4914      	ldr	r1, [pc, #80]	@ (8002a74 <Oled_dirt_flaw+0x29c>)
 8002a24:	4817      	ldr	r0, [pc, #92]	@ (8002a84 <Oled_dirt_flaw+0x2ac>)
 8002a26:	f000 fa65 	bl	8002ef4 <SSD1306_Puts>
					x_offset += 7;
 8002a2a:	4b11      	ldr	r3, [pc, #68]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	3307      	adds	r3, #7
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	4b0f      	ldr	r3, [pc, #60]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 8002a34:	801a      	strh	r2, [r3, #0]
				}
				if (x_offset >= 17 * 7) {
 8002a36:	4b0e      	ldr	r3, [pc, #56]	@ (8002a70 <Oled_dirt_flaw+0x298>)
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	2b76      	cmp	r3, #118	@ 0x76
 8002a3c:	d908      	bls.n	8002a50 <Oled_dirt_flaw+0x278>
					blink_oled = 2;
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a68 <Oled_dirt_flaw+0x290>)
 8002a40:	2202      	movs	r2, #2
 8002a42:	701a      	strb	r2, [r3, #0]
					i_cnt_flaw = i + 1;
 8002a44:	7d7b      	ldrb	r3, [r7, #21]
 8002a46:	3301      	adds	r3, #1
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	4b13      	ldr	r3, [pc, #76]	@ (8002a98 <Oled_dirt_flaw+0x2c0>)
 8002a4c:	701a      	strb	r2, [r3, #0]
					break;
 8002a4e:	e07d      	b.n	8002b4c <Oled_dirt_flaw+0x374>
				} else
					blink_oled = 0;
 8002a50:	4b05      	ldr	r3, [pc, #20]	@ (8002a68 <Oled_dirt_flaw+0x290>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < cnt_flaw; i++) {
 8002a56:	7d7b      	ldrb	r3, [r7, #21]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	757b      	strb	r3, [r7, #21]
 8002a5c:	7d7a      	ldrb	r2, [r7, #21]
 8002a5e:	7abb      	ldrb	r3, [r7, #10]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d3ad      	bcc.n	80029c0 <Oled_dirt_flaw+0x1e8>
 8002a64:	e072      	b.n	8002b4c <Oled_dirt_flaw+0x374>
 8002a66:	bf00      	nop
 8002a68:	2000086c 	.word	0x2000086c
 8002a6c:	20000016 	.word	0x20000016
 8002a70:	2000086e 	.word	0x2000086e
 8002a74:	20000000 	.word	0x20000000
 8002a78:	0800c114 	.word	0x0800c114
 8002a7c:	0800c0fc 	.word	0x0800c0fc
 8002a80:	20000870 	.word	0x20000870
 8002a84:	0800c128 	.word	0x0800c128
 8002a88:	2000086a 	.word	0x2000086a
 8002a8c:	0800c12c 	.word	0x0800c12c
 8002a90:	0800c13c 	.word	0x0800c13c
 8002a94:	2000041c 	.word	0x2000041c
 8002a98:	2000086b 	.word	0x2000086b
			}
		} else if (blink_oled == 2) {
 8002a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002b58 <Oled_dirt_flaw+0x380>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d153      	bne.n	8002b4c <Oled_dirt_flaw+0x374>
			SSD1306_GotoXY(x_offset, 0);
 8002aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8002b5c <Oled_dirt_flaw+0x384>)
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f98e 	bl	8002dcc <SSD1306_GotoXY>
			SSD1306_Puts("Channel(s) Out:", &Font_7x10, 1);
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	492b      	ldr	r1, [pc, #172]	@ (8002b60 <Oled_dirt_flaw+0x388>)
 8002ab4:	482b      	ldr	r0, [pc, #172]	@ (8002b64 <Oled_dirt_flaw+0x38c>)
 8002ab6:	f000 fa1d 	bl	8002ef4 <SSD1306_Puts>
			for (uint8_t i = i_cnt_flaw; i < cnt_flaw; i++) {
 8002aba:	4b2b      	ldr	r3, [pc, #172]	@ (8002b68 <Oled_dirt_flaw+0x390>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	753b      	strb	r3, [r7, #20]
 8002ac0:	e03d      	b.n	8002b3e <Oled_dirt_flaw+0x366>
				SSD1306_GotoXY(x_offset, 15);
 8002ac2:	4b26      	ldr	r3, [pc, #152]	@ (8002b5c <Oled_dirt_flaw+0x384>)
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	210f      	movs	r1, #15
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 f97f 	bl	8002dcc <SSD1306_GotoXY>
				sprintf(indec_str, "%d", flaw_ind[i]);
 8002ace:	7d3b      	ldrb	r3, [r7, #20]
 8002ad0:	4a26      	ldr	r2, [pc, #152]	@ (8002b6c <Oled_dirt_flaw+0x394>)
 8002ad2:	5cd3      	ldrb	r3, [r2, r3]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4925      	ldr	r1, [pc, #148]	@ (8002b70 <Oled_dirt_flaw+0x398>)
 8002ada:	4826      	ldr	r0, [pc, #152]	@ (8002b74 <Oled_dirt_flaw+0x39c>)
 8002adc:	f008 fe44 	bl	800b768 <siprintf>
				SSD1306_Puts(indec_str, &Font_7x10, 1);
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	491f      	ldr	r1, [pc, #124]	@ (8002b60 <Oled_dirt_flaw+0x388>)
 8002ae4:	4823      	ldr	r0, [pc, #140]	@ (8002b74 <Oled_dirt_flaw+0x39c>)
 8002ae6:	f000 fa05 	bl	8002ef4 <SSD1306_Puts>
				x_offset = (flaw_ind[i] > 9) ? x_offset + 2 * 7 : x_offset + 7;
 8002aea:	7d3b      	ldrb	r3, [r7, #20]
 8002aec:	4a1f      	ldr	r2, [pc, #124]	@ (8002b6c <Oled_dirt_flaw+0x394>)
 8002aee:	5cd3      	ldrb	r3, [r2, r3]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b09      	cmp	r3, #9
 8002af4:	d904      	bls.n	8002b00 <Oled_dirt_flaw+0x328>
 8002af6:	4b19      	ldr	r3, [pc, #100]	@ (8002b5c <Oled_dirt_flaw+0x384>)
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	330e      	adds	r3, #14
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	e003      	b.n	8002b08 <Oled_dirt_flaw+0x330>
 8002b00:	4b16      	ldr	r3, [pc, #88]	@ (8002b5c <Oled_dirt_flaw+0x384>)
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	3307      	adds	r3, #7
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	4a14      	ldr	r2, [pc, #80]	@ (8002b5c <Oled_dirt_flaw+0x384>)
 8002b0a:	8013      	strh	r3, [r2, #0]
				SSD1306_GotoXY(x_offset, 15);
 8002b0c:	4b13      	ldr	r3, [pc, #76]	@ (8002b5c <Oled_dirt_flaw+0x384>)
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	210f      	movs	r1, #15
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f95a 	bl	8002dcc <SSD1306_GotoXY>
				if (i < cnt_flaw - 1) {
 8002b18:	7d3a      	ldrb	r2, [r7, #20]
 8002b1a:	7abb      	ldrb	r3, [r7, #10]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	da0a      	bge.n	8002b38 <Oled_dirt_flaw+0x360>
					SSD1306_Puts(",", &Font_7x10, 1);
 8002b22:	2201      	movs	r2, #1
 8002b24:	490e      	ldr	r1, [pc, #56]	@ (8002b60 <Oled_dirt_flaw+0x388>)
 8002b26:	4814      	ldr	r0, [pc, #80]	@ (8002b78 <Oled_dirt_flaw+0x3a0>)
 8002b28:	f000 f9e4 	bl	8002ef4 <SSD1306_Puts>
					x_offset += 7;
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <Oled_dirt_flaw+0x384>)
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	3307      	adds	r3, #7
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	4b09      	ldr	r3, [pc, #36]	@ (8002b5c <Oled_dirt_flaw+0x384>)
 8002b36:	801a      	strh	r2, [r3, #0]
			for (uint8_t i = i_cnt_flaw; i < cnt_flaw; i++) {
 8002b38:	7d3b      	ldrb	r3, [r7, #20]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	753b      	strb	r3, [r7, #20]
 8002b3e:	7d3a      	ldrb	r2, [r7, #20]
 8002b40:	7abb      	ldrb	r3, [r7, #10]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d3bd      	bcc.n	8002ac2 <Oled_dirt_flaw+0x2ea>
				}
			}
			blink_oled = 0;
 8002b46:	4b04      	ldr	r3, [pc, #16]	@ (8002b58 <Oled_dirt_flaw+0x380>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
		}
	}
	SSD1306_UpdateScreen();
 8002b4c:	f000 f898 	bl	8002c80 <SSD1306_UpdateScreen>
}
 8002b50:	bf00      	nop
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	2000086c 	.word	0x2000086c
 8002b5c:	2000086e 	.word	0x2000086e
 8002b60:	20000000 	.word	0x20000000
 8002b64:	0800c13c 	.word	0x0800c13c
 8002b68:	2000086b 	.word	0x2000086b
 8002b6c:	2000041c 	.word	0x2000041c
 8002b70:	0800c0fc 	.word	0x0800c0fc
 8002b74:	20000870 	.word	0x20000870
 8002b78:	0800c128 	.word	0x0800c128

08002b7c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002b80:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf0 <MX_SPI1_Init+0x74>)
 8002b82:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf4 <MX_SPI1_Init+0x78>)
 8002b84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b86:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf0 <MX_SPI1_Init+0x74>)
 8002b88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b8e:	4b18      	ldr	r3, [pc, #96]	@ (8002bf0 <MX_SPI1_Init+0x74>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002b94:	4b16      	ldr	r3, [pc, #88]	@ (8002bf0 <MX_SPI1_Init+0x74>)
 8002b96:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002b9a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b9c:	4b14      	ldr	r3, [pc, #80]	@ (8002bf0 <MX_SPI1_Init+0x74>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ba2:	4b13      	ldr	r3, [pc, #76]	@ (8002bf0 <MX_SPI1_Init+0x74>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ba8:	4b11      	ldr	r3, [pc, #68]	@ (8002bf0 <MX_SPI1_Init+0x74>)
 8002baa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf0 <MX_SPI1_Init+0x74>)
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf0 <MX_SPI1_Init+0x74>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf0 <MX_SPI1_Init+0x74>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf0 <MX_SPI1_Init+0x74>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002bc8:	4b09      	ldr	r3, [pc, #36]	@ (8002bf0 <MX_SPI1_Init+0x74>)
 8002bca:	2207      	movs	r2, #7
 8002bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002bce:	4b08      	ldr	r3, [pc, #32]	@ (8002bf0 <MX_SPI1_Init+0x74>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <MX_SPI1_Init+0x74>)
 8002bd6:	2208      	movs	r2, #8
 8002bd8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bda:	4805      	ldr	r0, [pc, #20]	@ (8002bf0 <MX_SPI1_Init+0x74>)
 8002bdc:	f005 f9c6 	bl	8007f6c <HAL_SPI_Init>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002be6:	f7ff fd3a 	bl	800265e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	2000087c 	.word	0x2000087c
 8002bf4:	40013000 	.word	0x40013000

08002bf8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	@ 0x28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 0314 	add.w	r3, r7, #20
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a17      	ldr	r2, [pc, #92]	@ (8002c74 <HAL_SPI_MspInit+0x7c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d127      	bne.n	8002c6a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c1a:	4b17      	ldr	r3, [pc, #92]	@ (8002c78 <HAL_SPI_MspInit+0x80>)
 8002c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c1e:	4a16      	ldr	r2, [pc, #88]	@ (8002c78 <HAL_SPI_MspInit+0x80>)
 8002c20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c24:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c26:	4b14      	ldr	r3, [pc, #80]	@ (8002c78 <HAL_SPI_MspInit+0x80>)
 8002c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c32:	4b11      	ldr	r3, [pc, #68]	@ (8002c78 <HAL_SPI_MspInit+0x80>)
 8002c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c36:	4a10      	ldr	r2, [pc, #64]	@ (8002c78 <HAL_SPI_MspInit+0x80>)
 8002c38:	f043 0302 	orr.w	r3, r3, #2
 8002c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c78 <HAL_SPI_MspInit+0x80>)
 8002c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002c4a:	2338      	movs	r3, #56	@ 0x38
 8002c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c56:	2300      	movs	r3, #0
 8002c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c5a:	2305      	movs	r3, #5
 8002c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c5e:	f107 0314 	add.w	r3, r7, #20
 8002c62:	4619      	mov	r1, r3
 8002c64:	4805      	ldr	r0, [pc, #20]	@ (8002c7c <HAL_SPI_MspInit+0x84>)
 8002c66:	f003 fb97 	bl	8006398 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	3728      	adds	r7, #40	@ 0x28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40013000 	.word	0x40013000
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	48000400 	.word	0x48000400

08002c80 <SSD1306_UpdateScreen>:

	/* Return OK */
	return 1;
}

void SSD1306_UpdateScreen(void) {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002c86:	2300      	movs	r3, #0
 8002c88:	71fb      	strb	r3, [r7, #7]
 8002c8a:	e01d      	b.n	8002cc8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	3b50      	subs	r3, #80	@ 0x50
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	461a      	mov	r2, r3
 8002c94:	2100      	movs	r1, #0
 8002c96:	2078      	movs	r0, #120	@ 0x78
 8002c98:	f000 f9b8 	bl	800300c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	2078      	movs	r0, #120	@ 0x78
 8002ca2:	f000 f9b3 	bl	800300c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002ca6:	2210      	movs	r2, #16
 8002ca8:	2100      	movs	r1, #0
 8002caa:	2078      	movs	r0, #120	@ 0x78
 8002cac:	f000 f9ae 	bl	800300c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	01db      	lsls	r3, r3, #7
 8002cb4:	4a08      	ldr	r2, [pc, #32]	@ (8002cd8 <SSD1306_UpdateScreen+0x58>)
 8002cb6:	441a      	add	r2, r3
 8002cb8:	2380      	movs	r3, #128	@ 0x80
 8002cba:	2140      	movs	r1, #64	@ 0x40
 8002cbc:	2078      	movs	r0, #120	@ 0x78
 8002cbe:	f000 f93f 	bl	8002f40 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	71fb      	strb	r3, [r7, #7]
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	2b07      	cmp	r3, #7
 8002ccc:	d9de      	bls.n	8002c8c <SSD1306_UpdateScreen+0xc>
	}
}
 8002cce:	bf00      	nop
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	200008e0 	.word	0x200008e0

08002cdc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <SSD1306_Fill+0x14>
 8002cec:	2300      	movs	r3, #0
 8002cee:	e000      	b.n	8002cf2 <SSD1306_Fill+0x16>
 8002cf0:	23ff      	movs	r3, #255	@ 0xff
 8002cf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4803      	ldr	r0, [pc, #12]	@ (8002d08 <SSD1306_Fill+0x2c>)
 8002cfa:	f008 fd55 	bl	800b7a8 <memset>
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	200008e0 	.word	0x200008e0

08002d0c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	80fb      	strh	r3, [r7, #6]
 8002d16:	460b      	mov	r3, r1
 8002d18:	80bb      	strh	r3, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	70fb      	strb	r3, [r7, #3]
	if (
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d22:	d848      	bhi.n	8002db6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002d24:	88bb      	ldrh	r3, [r7, #4]
 8002d26:	2b1f      	cmp	r3, #31
 8002d28:	d845      	bhi.n	8002db6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002d2a:	4b26      	ldr	r3, [pc, #152]	@ (8002dc4 <SSD1306_DrawPixel+0xb8>)
 8002d2c:	791b      	ldrb	r3, [r3, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d006      	beq.n	8002d40 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002d32:	78fb      	ldrb	r3, [r7, #3]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	bf0c      	ite	eq
 8002d38:	2301      	moveq	r3, #1
 8002d3a:	2300      	movne	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d11a      	bne.n	8002d7c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002d46:	88fa      	ldrh	r2, [r7, #6]
 8002d48:	88bb      	ldrh	r3, [r7, #4]
 8002d4a:	08db      	lsrs	r3, r3, #3
 8002d4c:	b298      	uxth	r0, r3
 8002d4e:	4603      	mov	r3, r0
 8002d50:	01db      	lsls	r3, r3, #7
 8002d52:	4413      	add	r3, r2
 8002d54:	4a1c      	ldr	r2, [pc, #112]	@ (8002dc8 <SSD1306_DrawPixel+0xbc>)
 8002d56:	5cd3      	ldrb	r3, [r2, r3]
 8002d58:	b25a      	sxtb	r2, r3
 8002d5a:	88bb      	ldrh	r3, [r7, #4]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	2101      	movs	r1, #1
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	b25b      	sxtb	r3, r3
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	b259      	sxtb	r1, r3
 8002d6c:	88fa      	ldrh	r2, [r7, #6]
 8002d6e:	4603      	mov	r3, r0
 8002d70:	01db      	lsls	r3, r3, #7
 8002d72:	4413      	add	r3, r2
 8002d74:	b2c9      	uxtb	r1, r1
 8002d76:	4a14      	ldr	r2, [pc, #80]	@ (8002dc8 <SSD1306_DrawPixel+0xbc>)
 8002d78:	54d1      	strb	r1, [r2, r3]
 8002d7a:	e01d      	b.n	8002db8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002d7c:	88fa      	ldrh	r2, [r7, #6]
 8002d7e:	88bb      	ldrh	r3, [r7, #4]
 8002d80:	08db      	lsrs	r3, r3, #3
 8002d82:	b298      	uxth	r0, r3
 8002d84:	4603      	mov	r3, r0
 8002d86:	01db      	lsls	r3, r3, #7
 8002d88:	4413      	add	r3, r2
 8002d8a:	4a0f      	ldr	r2, [pc, #60]	@ (8002dc8 <SSD1306_DrawPixel+0xbc>)
 8002d8c:	5cd3      	ldrb	r3, [r2, r3]
 8002d8e:	b25a      	sxtb	r2, r3
 8002d90:	88bb      	ldrh	r3, [r7, #4]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	2101      	movs	r1, #1
 8002d98:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9c:	b25b      	sxtb	r3, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	b25b      	sxtb	r3, r3
 8002da2:	4013      	ands	r3, r2
 8002da4:	b259      	sxtb	r1, r3
 8002da6:	88fa      	ldrh	r2, [r7, #6]
 8002da8:	4603      	mov	r3, r0
 8002daa:	01db      	lsls	r3, r3, #7
 8002dac:	4413      	add	r3, r2
 8002dae:	b2c9      	uxtb	r1, r1
 8002db0:	4a05      	ldr	r2, [pc, #20]	@ (8002dc8 <SSD1306_DrawPixel+0xbc>)
 8002db2:	54d1      	strb	r1, [r2, r3]
 8002db4:	e000      	b.n	8002db8 <SSD1306_DrawPixel+0xac>
		return;
 8002db6:	bf00      	nop
	}
}
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20000ae0 	.word	0x20000ae0
 8002dc8:	200008e0 	.word	0x200008e0

08002dcc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	460a      	mov	r2, r1
 8002dd6:	80fb      	strh	r3, [r7, #6]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002ddc:	4a05      	ldr	r2, [pc, #20]	@ (8002df4 <SSD1306_GotoXY+0x28>)
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002de2:	4a04      	ldr	r2, [pc, #16]	@ (8002df4 <SSD1306_GotoXY+0x28>)
 8002de4:	88bb      	ldrh	r3, [r7, #4]
 8002de6:	8053      	strh	r3, [r2, #2]
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	20000ae0 	.word	0x20000ae0

08002df8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	6039      	str	r1, [r7, #0]
 8002e02:	71fb      	strb	r3, [r7, #7]
 8002e04:	4613      	mov	r3, r2
 8002e06:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002e08:	4b39      	ldr	r3, [pc, #228]	@ (8002ef0 <SSD1306_Putc+0xf8>)
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	4413      	add	r3, r2
	if (
 8002e14:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e16:	dc07      	bgt.n	8002e28 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002e18:	4b35      	ldr	r3, [pc, #212]	@ (8002ef0 <SSD1306_Putc+0xf8>)
 8002e1a:	885b      	ldrh	r3, [r3, #2]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	785b      	ldrb	r3, [r3, #1]
 8002e22:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002e24:	2b1f      	cmp	r3, #31
 8002e26:	dd01      	ble.n	8002e2c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e05d      	b.n	8002ee8 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	e04b      	b.n	8002eca <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	3b20      	subs	r3, #32
 8002e3a:	6839      	ldr	r1, [r7, #0]
 8002e3c:	7849      	ldrb	r1, [r1, #1]
 8002e3e:	fb01 f303 	mul.w	r3, r1, r3
 8002e42:	4619      	mov	r1, r3
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	440b      	add	r3, r1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4413      	add	r3, r2
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002e50:	2300      	movs	r3, #0
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	e030      	b.n	8002eb8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d010      	beq.n	8002e88 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002e66:	4b22      	ldr	r3, [pc, #136]	@ (8002ef0 <SSD1306_Putc+0xf8>)
 8002e68:	881a      	ldrh	r2, [r3, #0]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	b298      	uxth	r0, r3
 8002e72:	4b1f      	ldr	r3, [pc, #124]	@ (8002ef0 <SSD1306_Putc+0xf8>)
 8002e74:	885a      	ldrh	r2, [r3, #2]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	79ba      	ldrb	r2, [r7, #6]
 8002e80:	4619      	mov	r1, r3
 8002e82:	f7ff ff43 	bl	8002d0c <SSD1306_DrawPixel>
 8002e86:	e014      	b.n	8002eb2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002e88:	4b19      	ldr	r3, [pc, #100]	@ (8002ef0 <SSD1306_Putc+0xf8>)
 8002e8a:	881a      	ldrh	r2, [r3, #0]
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	b298      	uxth	r0, r3
 8002e94:	4b16      	ldr	r3, [pc, #88]	@ (8002ef0 <SSD1306_Putc+0xf8>)
 8002e96:	885a      	ldrh	r2, [r3, #2]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	b299      	uxth	r1, r3
 8002ea0:	79bb      	ldrb	r3, [r7, #6]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	bf0c      	ite	eq
 8002ea6:	2301      	moveq	r3, #1
 8002ea8:	2300      	movne	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	f7ff ff2d 	bl	8002d0c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d3c8      	bcc.n	8002e56 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	785b      	ldrb	r3, [r3, #1]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d3ad      	bcc.n	8002e32 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002ed6:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <SSD1306_Putc+0xf8>)
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	7812      	ldrb	r2, [r2, #0]
 8002ede:	4413      	add	r3, r2
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	4b03      	ldr	r3, [pc, #12]	@ (8002ef0 <SSD1306_Putc+0xf8>)
 8002ee4:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000ae0 	.word	0x20000ae0

08002ef4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	4613      	mov	r3, r2
 8002f00:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002f02:	e012      	b.n	8002f2a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	79fa      	ldrb	r2, [r7, #7]
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff ff73 	bl	8002df8 <SSD1306_Putc>
 8002f12:	4603      	mov	r3, r0
 8002f14:	461a      	mov	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d002      	beq.n	8002f24 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	e008      	b.n	8002f36 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	3301      	adds	r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1e8      	bne.n	8002f04 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	781b      	ldrb	r3, [r3, #0]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b0c7      	sub	sp, #284	@ 0x11c
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	4604      	mov	r4, r0
 8002f48:	4608      	mov	r0, r1
 8002f4a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8002f4e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8002f52:	600a      	str	r2, [r1, #0]
 8002f54:	4619      	mov	r1, r3
 8002f56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002f5a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002f5e:	4622      	mov	r2, r4
 8002f60:	701a      	strb	r2, [r3, #0]
 8002f62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002f66:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002f72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f76:	460a      	mov	r2, r1
 8002f78:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002f7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002f7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f82:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002f86:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8002f8a:	7812      	ldrb	r2, [r2, #0]
 8002f8c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002f94:	e015      	b.n	8002fc2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002f96:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002f9a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002f9e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	441a      	add	r2, r3
 8002fa6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002faa:	3301      	adds	r3, #1
 8002fac:	7811      	ldrb	r1, [r2, #0]
 8002fae:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002fb2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002fb6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002fb8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002fc2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002fcc:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002fd0:	8812      	ldrh	r2, [r2, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d8df      	bhi.n	8002f96 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8002fd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002fda:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	b299      	uxth	r1, r3
 8002fe2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002fe6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	3301      	adds	r3, #1
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	f107 020c 	add.w	r2, r7, #12
 8002ff4:	200a      	movs	r0, #10
 8002ff6:	9000      	str	r0, [sp, #0]
 8002ff8:	4803      	ldr	r0, [pc, #12]	@ (8003008 <ssd1306_I2C_WriteMulti+0xc8>)
 8002ffa:	f003 fc1b 	bl	8006834 <HAL_I2C_Master_Transmit>
}
 8002ffe:	bf00      	nop
 8003000:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8003004:	46bd      	mov	sp, r7
 8003006:	bd90      	pop	{r4, r7, pc}
 8003008:	20000274 	.word	0x20000274

0800300c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af02      	add	r7, sp, #8
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
 8003016:	460b      	mov	r3, r1
 8003018:	71bb      	strb	r3, [r7, #6]
 800301a:	4613      	mov	r3, r2
 800301c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800301e:	79bb      	ldrb	r3, [r7, #6]
 8003020:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8003022:	797b      	ldrb	r3, [r7, #5]
 8003024:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	b299      	uxth	r1, r3
 800302a:	f107 020c 	add.w	r2, r7, #12
 800302e:	230a      	movs	r3, #10
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	2302      	movs	r3, #2
 8003034:	4803      	ldr	r0, [pc, #12]	@ (8003044 <ssd1306_I2C_Write+0x38>)
 8003036:	f003 fbfd 	bl	8006834 <HAL_I2C_Master_Transmit>
}
 800303a:	bf00      	nop
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000274 	.word	0x20000274

08003048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304e:	4b0f      	ldr	r3, [pc, #60]	@ (800308c <HAL_MspInit+0x44>)
 8003050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003052:	4a0e      	ldr	r2, [pc, #56]	@ (800308c <HAL_MspInit+0x44>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	6613      	str	r3, [r2, #96]	@ 0x60
 800305a:	4b0c      	ldr	r3, [pc, #48]	@ (800308c <HAL_MspInit+0x44>)
 800305c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	607b      	str	r3, [r7, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003066:	4b09      	ldr	r3, [pc, #36]	@ (800308c <HAL_MspInit+0x44>)
 8003068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800306a:	4a08      	ldr	r2, [pc, #32]	@ (800308c <HAL_MspInit+0x44>)
 800306c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003070:	6593      	str	r3, [r2, #88]	@ 0x58
 8003072:	4b06      	ldr	r3, [pc, #24]	@ (800308c <HAL_MspInit+0x44>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800307e:	f004 f847 	bl	8007110 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40021000 	.word	0x40021000

08003090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003094:	bf00      	nop
 8003096:	e7fd      	b.n	8003094 <NMI_Handler+0x4>

08003098 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <HardFault_Handler+0x4>

080030a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030a4:	bf00      	nop
 80030a6:	e7fd      	b.n	80030a4 <MemManage_Handler+0x4>

080030a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ac:	bf00      	nop
 80030ae:	e7fd      	b.n	80030ac <BusFault_Handler+0x4>

080030b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030b4:	bf00      	nop
 80030b6:	e7fd      	b.n	80030b4 <UsageFault_Handler+0x4>

080030b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030e6:	f000 ff63 	bl	8003fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030f4:	4802      	ldr	r0, [pc, #8]	@ (8003100 <DMA1_Channel1_IRQHandler+0x10>)
 80030f6:	f002 ffff 	bl	80060f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	200001b0 	.word	0x200001b0

08003104 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003108:	4802      	ldr	r0, [pc, #8]	@ (8003114 <DMA1_Channel2_IRQHandler+0x10>)
 800310a:	f002 fff5 	bl	80060f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000210 	.word	0x20000210

08003118 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch4);
 800311c:	4802      	ldr	r0, [pc, #8]	@ (8003128 <DMA1_Channel3_IRQHandler+0x10>)
 800311e:	f002 ffeb 	bl	80060f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000c1c 	.word	0x20000c1c

0800312c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003130:	4803      	ldr	r0, [pc, #12]	@ (8003140 <ADC1_2_IRQHandler+0x14>)
 8003132:	f001 fc1b 	bl	800496c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003136:	4803      	ldr	r0, [pc, #12]	@ (8003144 <ADC1_2_IRQHandler+0x18>)
 8003138:	f001 fc18 	bl	800496c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800313c:	bf00      	nop
 800313e:	bd80      	pop	{r7, pc}
 8003140:	200000d8 	.word	0x200000d8
 8003144:	20000144 	.word	0x20000144

08003148 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800314c:	4802      	ldr	r0, [pc, #8]	@ (8003158 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800314e:	f006 f8cd 	bl	80092ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000aec 	.word	0x20000aec

0800315c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003160:	4802      	ldr	r0, [pc, #8]	@ (800316c <TIM2_IRQHandler+0x10>)
 8003162:	f006 f8c3 	bl	80092ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000b38 	.word	0x20000b38

08003170 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003174:	4802      	ldr	r0, [pc, #8]	@ (8003180 <TIM3_IRQHandler+0x10>)
 8003176:	f006 f8b9 	bl	80092ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000b84 	.word	0x20000b84

08003184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800318c:	4a14      	ldr	r2, [pc, #80]	@ (80031e0 <_sbrk+0x5c>)
 800318e:	4b15      	ldr	r3, [pc, #84]	@ (80031e4 <_sbrk+0x60>)
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003198:	4b13      	ldr	r3, [pc, #76]	@ (80031e8 <_sbrk+0x64>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031a0:	4b11      	ldr	r3, [pc, #68]	@ (80031e8 <_sbrk+0x64>)
 80031a2:	4a12      	ldr	r2, [pc, #72]	@ (80031ec <_sbrk+0x68>)
 80031a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031a6:	4b10      	ldr	r3, [pc, #64]	@ (80031e8 <_sbrk+0x64>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4413      	add	r3, r2
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d207      	bcs.n	80031c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031b4:	f008 fb00 	bl	800b7b8 <__errno>
 80031b8:	4603      	mov	r3, r0
 80031ba:	220c      	movs	r2, #12
 80031bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031be:	f04f 33ff 	mov.w	r3, #4294967295
 80031c2:	e009      	b.n	80031d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031c4:	4b08      	ldr	r3, [pc, #32]	@ (80031e8 <_sbrk+0x64>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031ca:	4b07      	ldr	r3, [pc, #28]	@ (80031e8 <_sbrk+0x64>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4413      	add	r3, r2
 80031d2:	4a05      	ldr	r2, [pc, #20]	@ (80031e8 <_sbrk+0x64>)
 80031d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031d6:	68fb      	ldr	r3, [r7, #12]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20008000 	.word	0x20008000
 80031e4:	00000400 	.word	0x00000400
 80031e8:	20000ae8 	.word	0x20000ae8
 80031ec:	20001100 	.word	0x20001100

080031f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80031f4:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <SystemInit+0x20>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fa:	4a05      	ldr	r2, [pc, #20]	@ (8003210 <SystemInit+0x20>)
 80031fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003200:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	e000ed00 	.word	0xe000ed00

08003214 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800321a:	f107 0310 	add.w	r3, r7, #16
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	605a      	str	r2, [r3, #4]
 8003224:	609a      	str	r2, [r3, #8]
 8003226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003228:	1d3b      	adds	r3, r7, #4
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	605a      	str	r2, [r3, #4]
 8003230:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003232:	4b1f      	ldr	r3, [pc, #124]	@ (80032b0 <MX_TIM1_Init+0x9c>)
 8003234:	4a1f      	ldr	r2, [pc, #124]	@ (80032b4 <MX_TIM1_Init+0xa0>)
 8003236:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8003238:	4b1d      	ldr	r3, [pc, #116]	@ (80032b0 <MX_TIM1_Init+0x9c>)
 800323a:	22a9      	movs	r2, #169	@ 0xa9
 800323c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800323e:	4b1c      	ldr	r3, [pc, #112]	@ (80032b0 <MX_TIM1_Init+0x9c>)
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8003244:	4b1a      	ldr	r3, [pc, #104]	@ (80032b0 <MX_TIM1_Init+0x9c>)
 8003246:	2264      	movs	r2, #100	@ 0x64
 8003248:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800324a:	4b19      	ldr	r3, [pc, #100]	@ (80032b0 <MX_TIM1_Init+0x9c>)
 800324c:	2200      	movs	r2, #0
 800324e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003250:	4b17      	ldr	r3, [pc, #92]	@ (80032b0 <MX_TIM1_Init+0x9c>)
 8003252:	2200      	movs	r2, #0
 8003254:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003256:	4b16      	ldr	r3, [pc, #88]	@ (80032b0 <MX_TIM1_Init+0x9c>)
 8003258:	2200      	movs	r2, #0
 800325a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800325c:	4814      	ldr	r0, [pc, #80]	@ (80032b0 <MX_TIM1_Init+0x9c>)
 800325e:	f005 fa0b 	bl	8008678 <HAL_TIM_Base_Init>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003268:	f7ff f9f9 	bl	800265e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800326c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003270:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003272:	f107 0310 	add.w	r3, r7, #16
 8003276:	4619      	mov	r1, r3
 8003278:	480d      	ldr	r0, [pc, #52]	@ (80032b0 <MX_TIM1_Init+0x9c>)
 800327a:	f006 fb37 	bl	80098ec <HAL_TIM_ConfigClockSource>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003284:	f7ff f9eb 	bl	800265e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003288:	2320      	movs	r3, #32
 800328a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800328c:	2300      	movs	r3, #0
 800328e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003294:	1d3b      	adds	r3, r7, #4
 8003296:	4619      	mov	r1, r3
 8003298:	4805      	ldr	r0, [pc, #20]	@ (80032b0 <MX_TIM1_Init+0x9c>)
 800329a:	f007 fad1 	bl	800a840 <HAL_TIMEx_MasterConfigSynchronization>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80032a4:	f7ff f9db 	bl	800265e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80032a8:	bf00      	nop
 80032aa:	3720      	adds	r7, #32
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20000aec 	.word	0x20000aec
 80032b4:	40012c00 	.word	0x40012c00

080032b8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032be:	f107 0310 	add.w	r3, r7, #16
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	605a      	str	r2, [r3, #4]
 80032c8:	609a      	str	r2, [r3, #8]
 80032ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032cc:	1d3b      	adds	r3, r7, #4
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	605a      	str	r2, [r3, #4]
 80032d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003350 <MX_TIM2_Init+0x98>)
 80032d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80032dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1700-1;
 80032de:	4b1c      	ldr	r3, [pc, #112]	@ (8003350 <MX_TIM2_Init+0x98>)
 80032e0:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80032e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003350 <MX_TIM2_Init+0x98>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80032ec:	4b18      	ldr	r3, [pc, #96]	@ (8003350 <MX_TIM2_Init+0x98>)
 80032ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80032f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032f4:	4b16      	ldr	r3, [pc, #88]	@ (8003350 <MX_TIM2_Init+0x98>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032fa:	4b15      	ldr	r3, [pc, #84]	@ (8003350 <MX_TIM2_Init+0x98>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003300:	4813      	ldr	r0, [pc, #76]	@ (8003350 <MX_TIM2_Init+0x98>)
 8003302:	f005 f9b9 	bl	8008678 <HAL_TIM_Base_Init>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800330c:	f7ff f9a7 	bl	800265e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003310:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003314:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003316:	f107 0310 	add.w	r3, r7, #16
 800331a:	4619      	mov	r1, r3
 800331c:	480c      	ldr	r0, [pc, #48]	@ (8003350 <MX_TIM2_Init+0x98>)
 800331e:	f006 fae5 	bl	80098ec <HAL_TIM_ConfigClockSource>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003328:	f7ff f999 	bl	800265e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800332c:	2300      	movs	r3, #0
 800332e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003334:	1d3b      	adds	r3, r7, #4
 8003336:	4619      	mov	r1, r3
 8003338:	4805      	ldr	r0, [pc, #20]	@ (8003350 <MX_TIM2_Init+0x98>)
 800333a:	f007 fa81 	bl	800a840 <HAL_TIMEx_MasterConfigSynchronization>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003344:	f7ff f98b 	bl	800265e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003348:	bf00      	nop
 800334a:	3720      	adds	r7, #32
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000b38 	.word	0x20000b38

08003354 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08c      	sub	sp, #48	@ 0x30
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800335a:	f107 0320 	add.w	r3, r7, #32
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003368:	f107 0314 	add.w	r3, r7, #20
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003374:	1d3b      	adds	r3, r7, #4
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	605a      	str	r2, [r3, #4]
 800337c:	609a      	str	r2, [r3, #8]
 800337e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003380:	4b2b      	ldr	r3, [pc, #172]	@ (8003430 <MX_TIM3_Init+0xdc>)
 8003382:	4a2c      	ldr	r2, [pc, #176]	@ (8003434 <MX_TIM3_Init+0xe0>)
 8003384:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1700-1;
 8003386:	4b2a      	ldr	r3, [pc, #168]	@ (8003430 <MX_TIM3_Init+0xdc>)
 8003388:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800338c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800338e:	4b28      	ldr	r3, [pc, #160]	@ (8003430 <MX_TIM3_Init+0xdc>)
 8003390:	2200      	movs	r2, #0
 8003392:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003394:	4b26      	ldr	r3, [pc, #152]	@ (8003430 <MX_TIM3_Init+0xdc>)
 8003396:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800339a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800339c:	4b24      	ldr	r3, [pc, #144]	@ (8003430 <MX_TIM3_Init+0xdc>)
 800339e:	2200      	movs	r2, #0
 80033a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033a2:	4b23      	ldr	r3, [pc, #140]	@ (8003430 <MX_TIM3_Init+0xdc>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80033a8:	4821      	ldr	r0, [pc, #132]	@ (8003430 <MX_TIM3_Init+0xdc>)
 80033aa:	f005 f965 	bl	8008678 <HAL_TIM_Base_Init>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80033b4:	f7ff f953 	bl	800265e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80033be:	f107 0320 	add.w	r3, r7, #32
 80033c2:	4619      	mov	r1, r3
 80033c4:	481a      	ldr	r0, [pc, #104]	@ (8003430 <MX_TIM3_Init+0xdc>)
 80033c6:	f006 fa91 	bl	80098ec <HAL_TIM_ConfigClockSource>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80033d0:	f7ff f945 	bl	800265e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80033d4:	4816      	ldr	r0, [pc, #88]	@ (8003430 <MX_TIM3_Init+0xdc>)
 80033d6:	f005 fde5 	bl	8008fa4 <HAL_TIM_IC_Init>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80033e0:	f7ff f93d 	bl	800265e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033ec:	f107 0314 	add.w	r3, r7, #20
 80033f0:	4619      	mov	r1, r3
 80033f2:	480f      	ldr	r0, [pc, #60]	@ (8003430 <MX_TIM3_Init+0xdc>)
 80033f4:	f007 fa24 	bl	800a840 <HAL_TIMEx_MasterConfigSynchronization>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80033fe:	f7ff f92e 	bl	800265e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003402:	230a      	movs	r3, #10
 8003404:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003406:	2301      	movs	r3, #1
 8003408:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003412:	1d3b      	adds	r3, r7, #4
 8003414:	220c      	movs	r2, #12
 8003416:	4619      	mov	r1, r3
 8003418:	4805      	ldr	r0, [pc, #20]	@ (8003430 <MX_TIM3_Init+0xdc>)
 800341a:	f006 f8b6 	bl	800958a <HAL_TIM_IC_ConfigChannel>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003424:	f7ff f91b 	bl	800265e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003428:	bf00      	nop
 800342a:	3730      	adds	r7, #48	@ 0x30
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20000b84 	.word	0x20000b84
 8003434:	40000400 	.word	0x40000400

08003438 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08e      	sub	sp, #56	@ 0x38
 800343c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800343e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	609a      	str	r2, [r3, #8]
 800344a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800344c:	f107 031c 	add.w	r3, r7, #28
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003458:	463b      	mov	r3, r7
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	605a      	str	r2, [r3, #4]
 8003460:	609a      	str	r2, [r3, #8]
 8003462:	60da      	str	r2, [r3, #12]
 8003464:	611a      	str	r2, [r3, #16]
 8003466:	615a      	str	r2, [r3, #20]
 8003468:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800346a:	4b2c      	ldr	r3, [pc, #176]	@ (800351c <MX_TIM4_Init+0xe4>)
 800346c:	4a2c      	ldr	r2, [pc, #176]	@ (8003520 <MX_TIM4_Init+0xe8>)
 800346e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 70-1;
 8003470:	4b2a      	ldr	r3, [pc, #168]	@ (800351c <MX_TIM4_Init+0xe4>)
 8003472:	2245      	movs	r2, #69	@ 0x45
 8003474:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003476:	4b29      	ldr	r3, [pc, #164]	@ (800351c <MX_TIM4_Init+0xe4>)
 8003478:	2200      	movs	r2, #0
 800347a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2;
 800347c:	4b27      	ldr	r3, [pc, #156]	@ (800351c <MX_TIM4_Init+0xe4>)
 800347e:	2202      	movs	r2, #2
 8003480:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003482:	4b26      	ldr	r3, [pc, #152]	@ (800351c <MX_TIM4_Init+0xe4>)
 8003484:	2200      	movs	r2, #0
 8003486:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003488:	4b24      	ldr	r3, [pc, #144]	@ (800351c <MX_TIM4_Init+0xe4>)
 800348a:	2200      	movs	r2, #0
 800348c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800348e:	4823      	ldr	r0, [pc, #140]	@ (800351c <MX_TIM4_Init+0xe4>)
 8003490:	f005 f8f2 	bl	8008678 <HAL_TIM_Base_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800349a:	f7ff f8e0 	bl	800265e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800349e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80034a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80034a8:	4619      	mov	r1, r3
 80034aa:	481c      	ldr	r0, [pc, #112]	@ (800351c <MX_TIM4_Init+0xe4>)
 80034ac:	f006 fa1e 	bl	80098ec <HAL_TIM_ConfigClockSource>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80034b6:	f7ff f8d2 	bl	800265e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80034ba:	4818      	ldr	r0, [pc, #96]	@ (800351c <MX_TIM4_Init+0xe4>)
 80034bc:	f005 fa00 	bl	80088c0 <HAL_TIM_PWM_Init>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80034c6:	f7ff f8ca 	bl	800265e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80034d2:	f107 031c 	add.w	r3, r7, #28
 80034d6:	4619      	mov	r1, r3
 80034d8:	4810      	ldr	r0, [pc, #64]	@ (800351c <MX_TIM4_Init+0xe4>)
 80034da:	f007 f9b1 	bl	800a840 <HAL_TIMEx_MasterConfigSynchronization>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80034e4:	f7ff f8bb 	bl	800265e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034e8:	2360      	movs	r3, #96	@ 0x60
 80034ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034f4:	2300      	movs	r3, #0
 80034f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80034f8:	463b      	mov	r3, r7
 80034fa:	220c      	movs	r2, #12
 80034fc:	4619      	mov	r1, r3
 80034fe:	4807      	ldr	r0, [pc, #28]	@ (800351c <MX_TIM4_Init+0xe4>)
 8003500:	f006 f8e0 	bl	80096c4 <HAL_TIM_PWM_ConfigChannel>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800350a:	f7ff f8a8 	bl	800265e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800350e:	4803      	ldr	r0, [pc, #12]	@ (800351c <MX_TIM4_Init+0xe4>)
 8003510:	f000 f8ce 	bl	80036b0 <HAL_TIM_MspPostInit>

}
 8003514:	bf00      	nop
 8003516:	3738      	adds	r7, #56	@ 0x38
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	20000bd0 	.word	0x20000bd0
 8003520:	40000800 	.word	0x40000800

08003524 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08c      	sub	sp, #48	@ 0x30
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800352c:	f107 031c 	add.w	r3, r7, #28
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	60da      	str	r2, [r3, #12]
 800353a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a54      	ldr	r2, [pc, #336]	@ (8003694 <HAL_TIM_Base_MspInit+0x170>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d114      	bne.n	8003570 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003546:	4b54      	ldr	r3, [pc, #336]	@ (8003698 <HAL_TIM_Base_MspInit+0x174>)
 8003548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354a:	4a53      	ldr	r2, [pc, #332]	@ (8003698 <HAL_TIM_Base_MspInit+0x174>)
 800354c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003550:	6613      	str	r3, [r2, #96]	@ 0x60
 8003552:	4b51      	ldr	r3, [pc, #324]	@ (8003698 <HAL_TIM_Base_MspInit+0x174>)
 8003554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003556:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800355a:	61bb      	str	r3, [r7, #24]
 800355c:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800355e:	2200      	movs	r2, #0
 8003560:	2100      	movs	r1, #0
 8003562:	201a      	movs	r0, #26
 8003564:	f002 fc09 	bl	8005d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003568:	201a      	movs	r0, #26
 800356a:	f002 fc20 	bl	8005dae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800356e:	e08c      	b.n	800368a <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003578:	d114      	bne.n	80035a4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800357a:	4b47      	ldr	r3, [pc, #284]	@ (8003698 <HAL_TIM_Base_MspInit+0x174>)
 800357c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357e:	4a46      	ldr	r2, [pc, #280]	@ (8003698 <HAL_TIM_Base_MspInit+0x174>)
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	6593      	str	r3, [r2, #88]	@ 0x58
 8003586:	4b44      	ldr	r3, [pc, #272]	@ (8003698 <HAL_TIM_Base_MspInit+0x174>)
 8003588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 8003592:	2200      	movs	r2, #0
 8003594:	210a      	movs	r1, #10
 8003596:	201c      	movs	r0, #28
 8003598:	f002 fbef 	bl	8005d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800359c:	201c      	movs	r0, #28
 800359e:	f002 fc06 	bl	8005dae <HAL_NVIC_EnableIRQ>
}
 80035a2:	e072      	b.n	800368a <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM3)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a3c      	ldr	r2, [pc, #240]	@ (800369c <HAL_TIM_Base_MspInit+0x178>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d130      	bne.n	8003610 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003698 <HAL_TIM_Base_MspInit+0x174>)
 80035b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b2:	4a39      	ldr	r2, [pc, #228]	@ (8003698 <HAL_TIM_Base_MspInit+0x174>)
 80035b4:	f043 0302 	orr.w	r3, r3, #2
 80035b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80035ba:	4b37      	ldr	r3, [pc, #220]	@ (8003698 <HAL_TIM_Base_MspInit+0x174>)
 80035bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c6:	4b34      	ldr	r3, [pc, #208]	@ (8003698 <HAL_TIM_Base_MspInit+0x174>)
 80035c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ca:	4a33      	ldr	r2, [pc, #204]	@ (8003698 <HAL_TIM_Base_MspInit+0x174>)
 80035cc:	f043 0302 	orr.w	r3, r3, #2
 80035d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035d2:	4b31      	ldr	r3, [pc, #196]	@ (8003698 <HAL_TIM_Base_MspInit+0x174>)
 80035d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = tim3_ch4_IR_Pin;
 80035de:	2380      	movs	r3, #128	@ 0x80
 80035e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e2:	2302      	movs	r3, #2
 80035e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ea:	2300      	movs	r3, #0
 80035ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 80035ee:	230a      	movs	r3, #10
 80035f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(tim3_ch4_IR_GPIO_Port, &GPIO_InitStruct);
 80035f2:	f107 031c 	add.w	r3, r7, #28
 80035f6:	4619      	mov	r1, r3
 80035f8:	4829      	ldr	r0, [pc, #164]	@ (80036a0 <HAL_TIM_Base_MspInit+0x17c>)
 80035fa:	f002 fecd 	bl	8006398 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80035fe:	2200      	movs	r2, #0
 8003600:	2105      	movs	r1, #5
 8003602:	201d      	movs	r0, #29
 8003604:	f002 fbb9 	bl	8005d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003608:	201d      	movs	r0, #29
 800360a:	f002 fbd0 	bl	8005dae <HAL_NVIC_EnableIRQ>
}
 800360e:	e03c      	b.n	800368a <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM4)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a23      	ldr	r2, [pc, #140]	@ (80036a4 <HAL_TIM_Base_MspInit+0x180>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d137      	bne.n	800368a <HAL_TIM_Base_MspInit+0x166>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800361a:	4b1f      	ldr	r3, [pc, #124]	@ (8003698 <HAL_TIM_Base_MspInit+0x174>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361e:	4a1e      	ldr	r2, [pc, #120]	@ (8003698 <HAL_TIM_Base_MspInit+0x174>)
 8003620:	f043 0304 	orr.w	r3, r3, #4
 8003624:	6593      	str	r3, [r2, #88]	@ 0x58
 8003626:	4b1c      	ldr	r3, [pc, #112]	@ (8003698 <HAL_TIM_Base_MspInit+0x174>)
 8003628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch4.Instance = DMA1_Channel3;
 8003632:	4b1d      	ldr	r3, [pc, #116]	@ (80036a8 <HAL_TIM_Base_MspInit+0x184>)
 8003634:	4a1d      	ldr	r2, [pc, #116]	@ (80036ac <HAL_TIM_Base_MspInit+0x188>)
 8003636:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch4.Init.Request = DMA_REQUEST_TIM4_CH4;
 8003638:	4b1b      	ldr	r3, [pc, #108]	@ (80036a8 <HAL_TIM_Base_MspInit+0x184>)
 800363a:	2246      	movs	r2, #70	@ 0x46
 800363c:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800363e:	4b1a      	ldr	r3, [pc, #104]	@ (80036a8 <HAL_TIM_Base_MspInit+0x184>)
 8003640:	2210      	movs	r2, #16
 8003642:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003644:	4b18      	ldr	r3, [pc, #96]	@ (80036a8 <HAL_TIM_Base_MspInit+0x184>)
 8003646:	2200      	movs	r2, #0
 8003648:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800364a:	4b17      	ldr	r3, [pc, #92]	@ (80036a8 <HAL_TIM_Base_MspInit+0x184>)
 800364c:	2280      	movs	r2, #128	@ 0x80
 800364e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003650:	4b15      	ldr	r3, [pc, #84]	@ (80036a8 <HAL_TIM_Base_MspInit+0x184>)
 8003652:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003656:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003658:	4b13      	ldr	r3, [pc, #76]	@ (80036a8 <HAL_TIM_Base_MspInit+0x184>)
 800365a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800365e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch4.Init.Mode = DMA_NORMAL;
 8003660:	4b11      	ldr	r3, [pc, #68]	@ (80036a8 <HAL_TIM_Base_MspInit+0x184>)
 8003662:	2200      	movs	r2, #0
 8003664:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8003666:	4b10      	ldr	r3, [pc, #64]	@ (80036a8 <HAL_TIM_Base_MspInit+0x184>)
 8003668:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800366c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_ch4) != HAL_OK)
 800366e:	480e      	ldr	r0, [pc, #56]	@ (80036a8 <HAL_TIM_Base_MspInit+0x184>)
 8003670:	f002 fbb8 	bl	8005de4 <HAL_DMA_Init>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_TIM_Base_MspInit+0x15a>
      Error_Handler();
 800367a:	f7fe fff0 	bl	800265e <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim4_ch4);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a09      	ldr	r2, [pc, #36]	@ (80036a8 <HAL_TIM_Base_MspInit+0x184>)
 8003682:	631a      	str	r2, [r3, #48]	@ 0x30
 8003684:	4a08      	ldr	r2, [pc, #32]	@ (80036a8 <HAL_TIM_Base_MspInit+0x184>)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800368a:	bf00      	nop
 800368c:	3730      	adds	r7, #48	@ 0x30
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40012c00 	.word	0x40012c00
 8003698:	40021000 	.word	0x40021000
 800369c:	40000400 	.word	0x40000400
 80036a0:	48000400 	.word	0x48000400
 80036a4:	40000800 	.word	0x40000800
 80036a8:	20000c1c 	.word	0x20000c1c
 80036ac:	40020030 	.word	0x40020030

080036b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b8:	f107 030c 	add.w	r3, r7, #12
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	60da      	str	r2, [r3, #12]
 80036c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a11      	ldr	r2, [pc, #68]	@ (8003714 <HAL_TIM_MspPostInit+0x64>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d11c      	bne.n	800370c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036d2:	4b11      	ldr	r3, [pc, #68]	@ (8003718 <HAL_TIM_MspPostInit+0x68>)
 80036d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d6:	4a10      	ldr	r2, [pc, #64]	@ (8003718 <HAL_TIM_MspPostInit+0x68>)
 80036d8:	f043 0302 	orr.w	r3, r3, #2
 80036dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036de:	4b0e      	ldr	r3, [pc, #56]	@ (8003718 <HAL_TIM_MspPostInit+0x68>)
 80036e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	60bb      	str	r3, [r7, #8]
 80036e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = tim4_ch4_neopixels_Pin;
 80036ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f0:	2302      	movs	r3, #2
 80036f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80036fc:	2302      	movs	r3, #2
 80036fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(tim4_ch4_neopixels_GPIO_Port, &GPIO_InitStruct);
 8003700:	f107 030c 	add.w	r3, r7, #12
 8003704:	4619      	mov	r1, r3
 8003706:	4805      	ldr	r0, [pc, #20]	@ (800371c <HAL_TIM_MspPostInit+0x6c>)
 8003708:	f002 fe46 	bl	8006398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800370c:	bf00      	nop
 800370e:	3720      	adds	r7, #32
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40000800 	.word	0x40000800
 8003718:	40021000 	.word	0x40021000
 800371c:	48000400 	.word	0x48000400

08003720 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003724:	4b22      	ldr	r3, [pc, #136]	@ (80037b0 <MX_USART1_UART_Init+0x90>)
 8003726:	4a23      	ldr	r2, [pc, #140]	@ (80037b4 <MX_USART1_UART_Init+0x94>)
 8003728:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800372a:	4b21      	ldr	r3, [pc, #132]	@ (80037b0 <MX_USART1_UART_Init+0x90>)
 800372c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003730:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003732:	4b1f      	ldr	r3, [pc, #124]	@ (80037b0 <MX_USART1_UART_Init+0x90>)
 8003734:	2200      	movs	r2, #0
 8003736:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003738:	4b1d      	ldr	r3, [pc, #116]	@ (80037b0 <MX_USART1_UART_Init+0x90>)
 800373a:	2200      	movs	r2, #0
 800373c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800373e:	4b1c      	ldr	r3, [pc, #112]	@ (80037b0 <MX_USART1_UART_Init+0x90>)
 8003740:	2200      	movs	r2, #0
 8003742:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8003744:	4b1a      	ldr	r3, [pc, #104]	@ (80037b0 <MX_USART1_UART_Init+0x90>)
 8003746:	2208      	movs	r2, #8
 8003748:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800374a:	4b19      	ldr	r3, [pc, #100]	@ (80037b0 <MX_USART1_UART_Init+0x90>)
 800374c:	2200      	movs	r2, #0
 800374e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003750:	4b17      	ldr	r3, [pc, #92]	@ (80037b0 <MX_USART1_UART_Init+0x90>)
 8003752:	2200      	movs	r2, #0
 8003754:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003756:	4b16      	ldr	r3, [pc, #88]	@ (80037b0 <MX_USART1_UART_Init+0x90>)
 8003758:	2200      	movs	r2, #0
 800375a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800375c:	4b14      	ldr	r3, [pc, #80]	@ (80037b0 <MX_USART1_UART_Init+0x90>)
 800375e:	2200      	movs	r2, #0
 8003760:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003762:	4b13      	ldr	r3, [pc, #76]	@ (80037b0 <MX_USART1_UART_Init+0x90>)
 8003764:	2200      	movs	r2, #0
 8003766:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003768:	4811      	ldr	r0, [pc, #68]	@ (80037b0 <MX_USART1_UART_Init+0x90>)
 800376a:	f007 f931 	bl	800a9d0 <HAL_UART_Init>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003774:	f7fe ff73 	bl	800265e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003778:	2100      	movs	r1, #0
 800377a:	480d      	ldr	r0, [pc, #52]	@ (80037b0 <MX_USART1_UART_Init+0x90>)
 800377c:	f007 ff2a 	bl	800b5d4 <HAL_UARTEx_SetTxFifoThreshold>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003786:	f7fe ff6a 	bl	800265e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800378a:	2100      	movs	r1, #0
 800378c:	4808      	ldr	r0, [pc, #32]	@ (80037b0 <MX_USART1_UART_Init+0x90>)
 800378e:	f007 ff5f 	bl	800b650 <HAL_UARTEx_SetRxFifoThreshold>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003798:	f7fe ff61 	bl	800265e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800379c:	4804      	ldr	r0, [pc, #16]	@ (80037b0 <MX_USART1_UART_Init+0x90>)
 800379e:	f007 fee0 	bl	800b562 <HAL_UARTEx_DisableFifoMode>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80037a8:	f7fe ff59 	bl	800265e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80037ac:	bf00      	nop
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	20000c7c 	.word	0x20000c7c
 80037b4:	40013800 	.word	0x40013800

080037b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b09c      	sub	sp, #112	@ 0x70
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037d0:	f107 0318 	add.w	r3, r7, #24
 80037d4:	2244      	movs	r2, #68	@ 0x44
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f007 ffe5 	bl	800b7a8 <memset>
  if(uartHandle->Instance==USART1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003898 <HAL_UART_MspInit+0xe0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d153      	bne.n	8003890 <HAL_UART_MspInit+0xd8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80037e8:	2301      	movs	r3, #1
 80037ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037f0:	f107 0318 	add.w	r3, r7, #24
 80037f4:	4618      	mov	r0, r3
 80037f6:	f004 f9c9 	bl	8007b8c <HAL_RCCEx_PeriphCLKConfig>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003800:	f7fe ff2d 	bl	800265e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003804:	4b25      	ldr	r3, [pc, #148]	@ (800389c <HAL_UART_MspInit+0xe4>)
 8003806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003808:	4a24      	ldr	r2, [pc, #144]	@ (800389c <HAL_UART_MspInit+0xe4>)
 800380a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800380e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003810:	4b22      	ldr	r3, [pc, #136]	@ (800389c <HAL_UART_MspInit+0xe4>)
 8003812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003814:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800381c:	4b1f      	ldr	r3, [pc, #124]	@ (800389c <HAL_UART_MspInit+0xe4>)
 800381e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003820:	4a1e      	ldr	r2, [pc, #120]	@ (800389c <HAL_UART_MspInit+0xe4>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003828:	4b1c      	ldr	r3, [pc, #112]	@ (800389c <HAL_UART_MspInit+0xe4>)
 800382a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003834:	4b19      	ldr	r3, [pc, #100]	@ (800389c <HAL_UART_MspInit+0xe4>)
 8003836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003838:	4a18      	ldr	r2, [pc, #96]	@ (800389c <HAL_UART_MspInit+0xe4>)
 800383a:	f043 0302 	orr.w	r3, r3, #2
 800383e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003840:	4b16      	ldr	r3, [pc, #88]	@ (800389c <HAL_UART_MspInit+0xe4>)
 8003842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800384c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003850:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003852:	2302      	movs	r3, #2
 8003854:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003856:	2300      	movs	r3, #0
 8003858:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385a:	2300      	movs	r3, #0
 800385c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800385e:	2307      	movs	r3, #7
 8003860:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003862:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003866:	4619      	mov	r1, r3
 8003868:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800386c:	f002 fd94 	bl	8006398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003870:	2340      	movs	r3, #64	@ 0x40
 8003872:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003874:	2302      	movs	r3, #2
 8003876:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003878:	2300      	movs	r3, #0
 800387a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387c:	2300      	movs	r3, #0
 800387e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003880:	2307      	movs	r3, #7
 8003882:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003884:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003888:	4619      	mov	r1, r3
 800388a:	4805      	ldr	r0, [pc, #20]	@ (80038a0 <HAL_UART_MspInit+0xe8>)
 800388c:	f002 fd84 	bl	8006398 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003890:	bf00      	nop
 8003892:	3770      	adds	r7, #112	@ 0x70
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40013800 	.word	0x40013800
 800389c:	40021000 	.word	0x40021000
 80038a0:	48000400 	.word	0x48000400

080038a4 <scale8>:
extern uint8_t rgb_arr[3 * num_led];

// Define the buffers timers
extern uint16_t wr_buf[WR_BUF_LEN];

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	460a      	mov	r2, r1
 80038ae:	71fb      	strb	r3, [r7, #7]
 80038b0:	4613      	mov	r3, r2
 80038b2:	71bb      	strb	r3, [r7, #6]
	return ((uint16_t) x * scale) >> 8;
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	79ba      	ldrb	r2, [r7, #6]
 80038b8:	fb02 f303 	mul.w	r3, r2, r3
 80038bc:	121b      	asrs	r3, r3, #8
 80038be:	b2db      	uxtb	r3, r3
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 80038cc:	b590      	push	{r4, r7, lr}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4604      	mov	r4, r0
 80038d4:	4608      	mov	r0, r1
 80038d6:	4611      	mov	r1, r2
 80038d8:	461a      	mov	r2, r3
 80038da:	4623      	mov	r3, r4
 80038dc:	71fb      	strb	r3, [r7, #7]
 80038de:	4603      	mov	r3, r0
 80038e0:	71bb      	strb	r3, [r7, #6]
 80038e2:	460b      	mov	r3, r1
 80038e4:	717b      	strb	r3, [r7, #5]
 80038e6:	4613      	mov	r3, r2
 80038e8:	713b      	strb	r3, [r7, #4]
	rgb_arr[3 * index] = scale8(g, 0xB0);	// g;
 80038ea:	79fa      	ldrb	r2, [r7, #7]
 80038ec:	4613      	mov	r3, r2
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	189c      	adds	r4, r3, r2
 80038f2:	797b      	ldrb	r3, [r7, #5]
 80038f4:	21b0      	movs	r1, #176	@ 0xb0
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff ffd4 	bl	80038a4 <scale8>
 80038fc:	4603      	mov	r3, r0
 80038fe:	461a      	mov	r2, r3
 8003900:	4b0d      	ldr	r3, [pc, #52]	@ (8003938 <led_set_RGB+0x6c>)
 8003902:	551a      	strb	r2, [r3, r4]
	rgb_arr[3 * index + 1] = r;
 8003904:	79fa      	ldrb	r2, [r7, #7]
 8003906:	4613      	mov	r3, r2
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	4413      	add	r3, r2
 800390c:	3301      	adds	r3, #1
 800390e:	490a      	ldr	r1, [pc, #40]	@ (8003938 <led_set_RGB+0x6c>)
 8003910:	79ba      	ldrb	r2, [r7, #6]
 8003912:	54ca      	strb	r2, [r1, r3]
	rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8003914:	79fa      	ldrb	r2, [r7, #7]
 8003916:	4613      	mov	r3, r2
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	4413      	add	r3, r2
 800391c:	1c9c      	adds	r4, r3, #2
 800391e:	793b      	ldrb	r3, [r7, #4]
 8003920:	21f0      	movs	r1, #240	@ 0xf0
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff ffbe 	bl	80038a4 <scale8>
 8003928:	4603      	mov	r3, r0
 800392a:	461a      	mov	r2, r3
 800392c:	4b02      	ldr	r3, [pc, #8]	@ (8003938 <led_set_RGB+0x6c>)
 800392e:	551a      	strb	r2, [r3, r4]
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	bd90      	pop	{r4, r7, pc}
 8003938:	2000083c 	.word	0x2000083c

0800393c <flush>:
void flush() {
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3 * num_led; i++)
 8003942:	2300      	movs	r3, #0
 8003944:	607b      	str	r3, [r7, #4]
 8003946:	e007      	b.n	8003958 <flush+0x1c>
		rgb_arr[i] = 0;
 8003948:	4a10      	ldr	r2, [pc, #64]	@ (800398c <flush+0x50>)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	2200      	movs	r2, #0
 8003950:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3 * num_led; i++)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3301      	adds	r3, #1
 8003956:	607b      	str	r3, [r7, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b23      	cmp	r3, #35	@ 0x23
 800395c:	ddf4      	ble.n	8003948 <flush+0xc>
	for (int i = 0; i < WR_BUF_LEN; i++)
 800395e:	2300      	movs	r3, #0
 8003960:	603b      	str	r3, [r7, #0]
 8003962:	e007      	b.n	8003974 <flush+0x38>
		wr_buf[i] = 0;
 8003964:	4a0a      	ldr	r2, [pc, #40]	@ (8003990 <flush+0x54>)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2100      	movs	r1, #0
 800396a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < WR_BUF_LEN; i++)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	3301      	adds	r3, #1
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800397a:	dbf3      	blt.n	8003964 <flush+0x28>
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	2000083c 	.word	0x2000083c
 8003990:	2000043c 	.word	0x2000043c

08003994 <fillBuffer>:
// Set all colors to RGB
void led_set_all_RGB(uint8_t r, uint8_t g, uint8_t b) {
	for (uint_fast8_t i = 0; i < num_led; ++i)
		led_set_RGB(i, r, g, b);
}
void fillBuffer(uint8_t index) {
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	71fb      	strb	r3, [r7, #7]
	uint8_t g = rgb_arr[index * 3];
 800399e:	79fa      	ldrb	r2, [r7, #7]
 80039a0:	4613      	mov	r3, r2
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	4413      	add	r3, r2
 80039a6:	4a3c      	ldr	r2, [pc, #240]	@ (8003a98 <fillBuffer+0x104>)
 80039a8:	5cd3      	ldrb	r3, [r2, r3]
 80039aa:	733b      	strb	r3, [r7, #12]
	uint8_t r = rgb_arr[index * 3 + 1];
 80039ac:	79fa      	ldrb	r2, [r7, #7]
 80039ae:	4613      	mov	r3, r2
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	4413      	add	r3, r2
 80039b4:	3301      	adds	r3, #1
 80039b6:	4a38      	ldr	r2, [pc, #224]	@ (8003a98 <fillBuffer+0x104>)
 80039b8:	5cd3      	ldrb	r3, [r2, r3]
 80039ba:	72fb      	strb	r3, [r7, #11]
	uint8_t b = rgb_arr[index * 3 + 2];
 80039bc:	79fa      	ldrb	r2, [r7, #7]
 80039be:	4613      	mov	r3, r2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4413      	add	r3, r2
 80039c4:	3302      	adds	r3, #2
 80039c6:	4a34      	ldr	r2, [pc, #208]	@ (8003a98 <fillBuffer+0x104>)
 80039c8:	5cd3      	ldrb	r3, [r2, r3]
 80039ca:	72bb      	strb	r3, [r7, #10]

	// Green (bits 0-23: 8 bits G, 8 R, 8 B)

	for (uint8_t i = 0; i < 8; i++) {
 80039cc:	2300      	movs	r3, #0
 80039ce:	73fb      	strb	r3, [r7, #15]
 80039d0:	e018      	b.n	8003a04 <fillBuffer+0x70>
		wr_buf[index * 24 + i] = ((g << i) & 0x80) ? PWM_HI : PWM_LO;
 80039d2:	7b3a      	ldrb	r2, [r7, #12]
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <fillBuffer+0x52>
 80039e2:	2102      	movs	r1, #2
 80039e4:	e000      	b.n	80039e8 <fillBuffer+0x54>
 80039e6:	2101      	movs	r1, #1
 80039e8:	79fa      	ldrb	r2, [r7, #7]
 80039ea:	4613      	mov	r3, r2
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4413      	add	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	461a      	mov	r2, r3
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	4413      	add	r3, r2
 80039f8:	4a28      	ldr	r2, [pc, #160]	@ (8003a9c <fillBuffer+0x108>)
 80039fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < 8; i++) {
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	3301      	adds	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b07      	cmp	r3, #7
 8003a08:	d9e3      	bls.n	80039d2 <fillBuffer+0x3e>
	}
	// Red
	for (uint8_t i = 0; i < 8; i++) {
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73bb      	strb	r3, [r7, #14]
 8003a0e:	e019      	b.n	8003a44 <fillBuffer+0xb0>
		wr_buf[index * 24 + 8 + i] = ((r << i) & 0x80) ? PWM_HI : PWM_LO;
 8003a10:	7afa      	ldrb	r2, [r7, #11]
 8003a12:	7bbb      	ldrb	r3, [r7, #14]
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <fillBuffer+0x90>
 8003a20:	2102      	movs	r1, #2
 8003a22:	e000      	b.n	8003a26 <fillBuffer+0x92>
 8003a24:	2101      	movs	r1, #1
 8003a26:	79fa      	ldrb	r2, [r7, #7]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	4413      	add	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	f103 0208 	add.w	r2, r3, #8
 8003a34:	7bbb      	ldrb	r3, [r7, #14]
 8003a36:	4413      	add	r3, r2
 8003a38:	4a18      	ldr	r2, [pc, #96]	@ (8003a9c <fillBuffer+0x108>)
 8003a3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < 8; i++) {
 8003a3e:	7bbb      	ldrb	r3, [r7, #14]
 8003a40:	3301      	adds	r3, #1
 8003a42:	73bb      	strb	r3, [r7, #14]
 8003a44:	7bbb      	ldrb	r3, [r7, #14]
 8003a46:	2b07      	cmp	r3, #7
 8003a48:	d9e2      	bls.n	8003a10 <fillBuffer+0x7c>
	}
	// Blue
	for (uint8_t i = 0; i < 8; i++) {
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	737b      	strb	r3, [r7, #13]
 8003a4e:	e019      	b.n	8003a84 <fillBuffer+0xf0>
		wr_buf[index * 24 + 16 + i] = ((b << i) & 0x80) ? PWM_HI : PWM_LO;
 8003a50:	7aba      	ldrb	r2, [r7, #10]
 8003a52:	7b7b      	ldrb	r3, [r7, #13]
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <fillBuffer+0xd0>
 8003a60:	2102      	movs	r1, #2
 8003a62:	e000      	b.n	8003a66 <fillBuffer+0xd2>
 8003a64:	2101      	movs	r1, #1
 8003a66:	79fa      	ldrb	r2, [r7, #7]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	4413      	add	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	f103 0210 	add.w	r2, r3, #16
 8003a74:	7b7b      	ldrb	r3, [r7, #13]
 8003a76:	4413      	add	r3, r2
 8003a78:	4a08      	ldr	r2, [pc, #32]	@ (8003a9c <fillBuffer+0x108>)
 8003a7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < 8; i++) {
 8003a7e:	7b7b      	ldrb	r3, [r7, #13]
 8003a80:	3301      	adds	r3, #1
 8003a82:	737b      	strb	r3, [r7, #13]
 8003a84:	7b7b      	ldrb	r3, [r7, #13]
 8003a86:	2b07      	cmp	r3, #7
 8003a88:	d9e2      	bls.n	8003a50 <fillBuffer+0xbc>
	}
}
 8003a8a:	bf00      	nop
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	2000083c 	.word	0x2000083c
 8003a9c:	2000043c 	.word	0x2000043c

08003aa0 <fillBufferAll>:

void fillBufferAll() {
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0

	for (uint8_t index = 0; index < num_led; index ++) {
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	71fb      	strb	r3, [r7, #7]
 8003aaa:	e078      	b.n	8003b9e <fillBufferAll+0xfe>
		uint8_t g = rgb_arr[index * 3];
 8003aac:	79fa      	ldrb	r2, [r7, #7]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	4413      	add	r3, r2
 8003ab4:	4a3f      	ldr	r2, [pc, #252]	@ (8003bb4 <fillBufferAll+0x114>)
 8003ab6:	5cd3      	ldrb	r3, [r2, r3]
 8003ab8:	70fb      	strb	r3, [r7, #3]
		uint8_t r = rgb_arr[index * 3 + 1];
 8003aba:	79fa      	ldrb	r2, [r7, #7]
 8003abc:	4613      	mov	r3, r2
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	4a3b      	ldr	r2, [pc, #236]	@ (8003bb4 <fillBufferAll+0x114>)
 8003ac6:	5cd3      	ldrb	r3, [r2, r3]
 8003ac8:	70bb      	strb	r3, [r7, #2]
		uint8_t b = rgb_arr[index * 3 + 2];
 8003aca:	79fa      	ldrb	r2, [r7, #7]
 8003acc:	4613      	mov	r3, r2
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3302      	adds	r3, #2
 8003ad4:	4a37      	ldr	r2, [pc, #220]	@ (8003bb4 <fillBufferAll+0x114>)
 8003ad6:	5cd3      	ldrb	r3, [r2, r3]
 8003ad8:	707b      	strb	r3, [r7, #1]

		// Green (bits 0-23: 8 bits G, 8 R, 8 B)

		for (uint8_t i = 0; i < 8; i++) {
 8003ada:	2300      	movs	r3, #0
 8003adc:	71bb      	strb	r3, [r7, #6]
 8003ade:	e018      	b.n	8003b12 <fillBufferAll+0x72>
			wr_buf[index * 24 + i] = ((g << i) & 0x80) ? PWM_HI : PWM_LO;
 8003ae0:	78fa      	ldrb	r2, [r7, #3]
 8003ae2:	79bb      	ldrb	r3, [r7, #6]
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <fillBufferAll+0x54>
 8003af0:	2102      	movs	r1, #2
 8003af2:	e000      	b.n	8003af6 <fillBufferAll+0x56>
 8003af4:	2101      	movs	r1, #1
 8003af6:	79fa      	ldrb	r2, [r7, #7]
 8003af8:	4613      	mov	r3, r2
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	4413      	add	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	461a      	mov	r2, r3
 8003b02:	79bb      	ldrb	r3, [r7, #6]
 8003b04:	4413      	add	r3, r2
 8003b06:	4a2c      	ldr	r2, [pc, #176]	@ (8003bb8 <fillBufferAll+0x118>)
 8003b08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < 8; i++) {
 8003b0c:	79bb      	ldrb	r3, [r7, #6]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	71bb      	strb	r3, [r7, #6]
 8003b12:	79bb      	ldrb	r3, [r7, #6]
 8003b14:	2b07      	cmp	r3, #7
 8003b16:	d9e3      	bls.n	8003ae0 <fillBufferAll+0x40>
		}
		// Red
		for (uint8_t i = 0; i < 8; i++) {
 8003b18:	2300      	movs	r3, #0
 8003b1a:	717b      	strb	r3, [r7, #5]
 8003b1c:	e019      	b.n	8003b52 <fillBufferAll+0xb2>
			wr_buf[index * 24 + 8 + i] = ((r << i) & 0x80) ? PWM_HI : PWM_LO;
 8003b1e:	78ba      	ldrb	r2, [r7, #2]
 8003b20:	797b      	ldrb	r3, [r7, #5]
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <fillBufferAll+0x92>
 8003b2e:	2102      	movs	r1, #2
 8003b30:	e000      	b.n	8003b34 <fillBufferAll+0x94>
 8003b32:	2101      	movs	r1, #1
 8003b34:	79fa      	ldrb	r2, [r7, #7]
 8003b36:	4613      	mov	r3, r2
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	4413      	add	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	f103 0208 	add.w	r2, r3, #8
 8003b42:	797b      	ldrb	r3, [r7, #5]
 8003b44:	4413      	add	r3, r2
 8003b46:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb8 <fillBufferAll+0x118>)
 8003b48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < 8; i++) {
 8003b4c:	797b      	ldrb	r3, [r7, #5]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	717b      	strb	r3, [r7, #5]
 8003b52:	797b      	ldrb	r3, [r7, #5]
 8003b54:	2b07      	cmp	r3, #7
 8003b56:	d9e2      	bls.n	8003b1e <fillBufferAll+0x7e>
		}
		// Blue
		for (uint8_t i = 0; i < 8; i++) {
 8003b58:	2300      	movs	r3, #0
 8003b5a:	713b      	strb	r3, [r7, #4]
 8003b5c:	e019      	b.n	8003b92 <fillBufferAll+0xf2>
			wr_buf[index * 24 + 16 + i] = ((b << i) & 0x80) ? PWM_HI : PWM_LO;
 8003b5e:	787a      	ldrb	r2, [r7, #1]
 8003b60:	793b      	ldrb	r3, [r7, #4]
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <fillBufferAll+0xd2>
 8003b6e:	2102      	movs	r1, #2
 8003b70:	e000      	b.n	8003b74 <fillBufferAll+0xd4>
 8003b72:	2101      	movs	r1, #1
 8003b74:	79fa      	ldrb	r2, [r7, #7]
 8003b76:	4613      	mov	r3, r2
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	4413      	add	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	f103 0210 	add.w	r2, r3, #16
 8003b82:	793b      	ldrb	r3, [r7, #4]
 8003b84:	4413      	add	r3, r2
 8003b86:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb8 <fillBufferAll+0x118>)
 8003b88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < 8; i++) {
 8003b8c:	793b      	ldrb	r3, [r7, #4]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	713b      	strb	r3, [r7, #4]
 8003b92:	793b      	ldrb	r3, [r7, #4]
 8003b94:	2b07      	cmp	r3, #7
 8003b96:	d9e2      	bls.n	8003b5e <fillBufferAll+0xbe>
	for (uint8_t index = 0; index < num_led; index ++) {
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	71fb      	strb	r3, [r7, #7]
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	2b0b      	cmp	r3, #11
 8003ba2:	d983      	bls.n	8003aac <fillBufferAll+0xc>
		}
	}

}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	2000083c 	.word	0x2000083c
 8003bb8:	2000043c 	.word	0x2000043c

08003bbc <led_render>:

void led_render() {
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0

	if (hdma_tim4_ch4.State != HAL_DMA_STATE_READY)
 8003bc0:	4b07      	ldr	r3, [pc, #28]	@ (8003be0 <led_render+0x24>)
 8003bc2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d107      	bne.n	8003bdc <led_render+0x20>
		return;

	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_4, (uint32_t*) wr_buf,
 8003bcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bd0:	4a04      	ldr	r2, [pc, #16]	@ (8003be4 <led_render+0x28>)
 8003bd2:	210c      	movs	r1, #12
 8003bd4:	4804      	ldr	r0, [pc, #16]	@ (8003be8 <led_render+0x2c>)
 8003bd6:	f004 fed5 	bl	8008984 <HAL_TIM_PWM_Start_DMA>
 8003bda:	e000      	b.n	8003bde <led_render+0x22>
		return;
 8003bdc:	bf00      	nop
	WR_BUF_LEN);
}
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	20000c1c 	.word	0x20000c1c
 8003be4:	2000043c 	.word	0x2000043c
 8003be8:	20000bd0 	.word	0x20000bd0

08003bec <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_4);
 8003bf4:	210c      	movs	r1, #12
 8003bf6:	4803      	ldr	r0, [pc, #12]	@ (8003c04 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 8003bf8:	f005 f8dc 	bl	8008db4 <HAL_TIM_PWM_Stop_DMA>
}
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000bd0 	.word	0x20000bd0

08003c08 <rainbow>:

// Function to create the rainbow effect
void rainbow(uint8_t wait) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
	uint8_t r;
	uint8_t g;
	uint8_t b;
	uint8_t WheelPos;

	for (j = 0; j < 256; j++) { // Cycle through all colors
 8003c12:	2300      	movs	r3, #0
 8003c14:	82fb      	strh	r3, [r7, #22]
 8003c16:	e054      	b.n	8003cc2 <rainbow+0xba>
		// Remove 'i' from the phase shift
		WheelPos = j & 255;
 8003c18:	8afb      	ldrh	r3, [r7, #22]
 8003c1a:	73fb      	strb	r3, [r7, #15]
		if (WheelPos < 85) {
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	2b54      	cmp	r3, #84	@ 0x54
 8003c20:	d80e      	bhi.n	8003c40 <rainbow+0x38>
			r = WheelPos * 3;
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
 8003c24:	461a      	mov	r2, r3
 8003c26:	0052      	lsls	r2, r2, #1
 8003c28:	4413      	add	r3, r2
 8003c2a:	757b      	strb	r3, [r7, #21]
			g = 255 - WheelPos * 3;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	753b      	strb	r3, [r7, #20]
			b = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	74fb      	strb	r3, [r7, #19]
 8003c3e:	e025      	b.n	8003c8c <rainbow+0x84>
		} else if (WheelPos < 170) {
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	2ba9      	cmp	r3, #169	@ 0xa9
 8003c44:	d811      	bhi.n	8003c6a <rainbow+0x62>
			WheelPos -= 85;
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	3b55      	subs	r3, #85	@ 0x55
 8003c4a:	73fb      	strb	r3, [r7, #15]
			r = 255 - WheelPos * 3;
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	757b      	strb	r3, [r7, #21]
			g = 0;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	753b      	strb	r3, [r7, #20]
			b = WheelPos * 3;
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	461a      	mov	r2, r3
 8003c62:	0052      	lsls	r2, r2, #1
 8003c64:	4413      	add	r3, r2
 8003c66:	74fb      	strb	r3, [r7, #19]
 8003c68:	e010      	b.n	8003c8c <rainbow+0x84>
		} else {
			WheelPos -= 170;
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
 8003c6c:	3356      	adds	r3, #86	@ 0x56
 8003c6e:	73fb      	strb	r3, [r7, #15]
			r = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	757b      	strb	r3, [r7, #21]
			g = WheelPos * 3;
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	461a      	mov	r2, r3
 8003c78:	0052      	lsls	r2, r2, #1
 8003c7a:	4413      	add	r3, r2
 8003c7c:	753b      	strb	r3, [r7, #20]
			b = 255 - WheelPos * 3;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	461a      	mov	r2, r3
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	74fb      	strb	r3, [r7, #19]
		}
		for (uint16_t i = 0; i < num_led; i++) {
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	823b      	strh	r3, [r7, #16]
 8003c90:	e009      	b.n	8003ca6 <rainbow+0x9e>
			// Update LEDs
			led_set_RGB(i, r, g, b);
 8003c92:	8a3b      	ldrh	r3, [r7, #16]
 8003c94:	b2d8      	uxtb	r0, r3
 8003c96:	7cfb      	ldrb	r3, [r7, #19]
 8003c98:	7d3a      	ldrb	r2, [r7, #20]
 8003c9a:	7d79      	ldrb	r1, [r7, #21]
 8003c9c:	f7ff fe16 	bl	80038cc <led_set_RGB>
		for (uint16_t i = 0; i < num_led; i++) {
 8003ca0:	8a3b      	ldrh	r3, [r7, #16]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	823b      	strh	r3, [r7, #16]
 8003ca6:	8a3b      	ldrh	r3, [r7, #16]
 8003ca8:	2b0b      	cmp	r3, #11
 8003caa:	d9f2      	bls.n	8003c92 <rainbow+0x8a>
		}
		fillBufferAll();
 8003cac:	f7ff fef8 	bl	8003aa0 <fillBufferAll>
		led_render();
 8003cb0:	f7ff ff84 	bl	8003bbc <led_render>
		HAL_Delay(wait);
 8003cb4:	79fb      	ldrb	r3, [r7, #7]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 f998 	bl	8003fec <HAL_Delay>
	for (j = 0; j < 256; j++) { // Cycle through all colors
 8003cbc:	8afb      	ldrh	r3, [r7, #22]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	82fb      	strh	r3, [r7, #22]
 8003cc2:	8afb      	ldrh	r3, [r7, #22]
 8003cc4:	2bff      	cmp	r3, #255	@ 0xff
 8003cc6:	d9a7      	bls.n	8003c18 <rainbow+0x10>
	}
}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <comp_thresh_perturb>:
	yarn->thresh = (yarn->thresh > yarn->maxper) ? yarn->thresh : yarn->maxper;
	yarn->maxper = 0;
}

// Read Threshold Perturb function
void comp_thresh_perturb(struct YarnStates *yarn) {
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
	if (yarn->read_sens <= 900)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8003ce2:	dc05      	bgt.n	8003cf0 <comp_thresh_perturb+0x1e>
		yarn->threshold = yarn->thresh + 5;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce8:	1d5a      	adds	r2, r3, #5
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cee:	e012      	b.n	8003d16 <comp_thresh_perturb+0x44>
	else if (yarn->read_sens <= 1500)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	dc06      	bgt.n	8003d0a <comp_thresh_perturb+0x38>
		yarn->threshold = yarn->thresh + 8;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d00:	f103 0208 	add.w	r2, r3, #8
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d08:	e005      	b.n	8003d16 <comp_thresh_perturb+0x44>
	else
		yarn->threshold = yarn->thresh + 10;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0e:	f103 020a 	add.w	r2, r3, #10
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	629a      	str	r2, [r3, #40]	@ 0x28

	yarn->maxim =
			(yarn->read_sens > yarn->maxim) ? yarn->read_sens : yarn->maxim;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	bfb8      	it	lt
 8003d22:	461a      	movlt	r2, r3
	yarn->maxim =
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	619a      	str	r2, [r3, #24]
	yarn->minim =
			(yarn->read_sens < yarn->minim) ? yarn->read_sens : yarn->minim;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69da      	ldr	r2, [r3, #28]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	bfa8      	it	ge
 8003d34:	461a      	movge	r2, r3
	yarn->minim =
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	61da      	str	r2, [r3, #28]
	yarn->per = yarn->maxim - yarn->minim;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	1ad2      	subs	r2, r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	605a      	str	r2, [r3, #4]
	yarn->maxper = (yarn->per > yarn->maxper) ? yarn->per : yarn->maxper;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	bfb8      	it	lt
 8003d54:	461a      	movlt	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	611a      	str	r2, [r3, #16]
	yarn->count_total++;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	609a      	str	r2, [r3, #8]
	if (yarn->per > yarn->threshold)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	dd04      	ble.n	8003d7a <comp_thresh_perturb+0xa8>
		yarn->count_yarn++; // Count perturbations above threshold
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	60da      	str	r2, [r3, #12]
	yarn->read_sensPre = yarn->read_sens;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1a      	ldr	r2, [r3, #32]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
	...

08003d90 <yarn_state>:

// Yarn State function
void yarn_state(struct YarnStates *yarn) {
 8003d90:	b5b0      	push	{r4, r5, r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	yarn->yarn_chance = (yarn->count_yarn * 100.0) / yarn->count_total;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fc fbe9 	bl	8000574 <__aeabi_i2d>
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	4b42      	ldr	r3, [pc, #264]	@ (8003eb0 <yarn_state+0x120>)
 8003da8:	f7fc fc4e 	bl	8000648 <__aeabi_dmul>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4614      	mov	r4, r2
 8003db2:	461d      	mov	r5, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fc fbdb 	bl	8000574 <__aeabi_i2d>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	4629      	mov	r1, r5
 8003dc6:	f7fc fd69 	bl	800089c <__aeabi_ddiv>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4610      	mov	r0, r2
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	f7fc fe4b 	bl	8000a6c <__aeabi_d2iz>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	615a      	str	r2, [r3, #20]
	yarn->torn = 0;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]
	yarn->dirt1 = 0;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	705a      	strb	r2, [r3, #1]
	yarn->dirt2 = 0;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	709a      	strb	r2, [r3, #2]
	yarn->flaw = 0;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	70da      	strb	r2, [r3, #3]
	yarn->ledState = 0;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	631a      	str	r2, [r3, #48]	@ 0x30
	yarn->ledStatePre = 0;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	635a      	str	r2, [r3, #52]	@ 0x34

	if (yarn->read_sens <= 100 || yarn->read_sens == 4095) {
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	2b64      	cmp	r3, #100	@ 0x64
 8003e06:	dd05      	ble.n	8003e14 <yarn_state+0x84>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d106      	bne.n	8003e22 <yarn_state+0x92>
		yarn->flaw = 1;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	70da      	strb	r2, [r3, #3]
		yarn->ledState = 3;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e20:	e02b      	b.n	8003e7a <yarn_state+0xea>
	} else if (yarn->read_sens <= 500 && yarn->read_sens > 100) {
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003e2a:	dc0a      	bgt.n	8003e42 <yarn_state+0xb2>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	2b64      	cmp	r3, #100	@ 0x64
 8003e32:	dd06      	ble.n	8003e42 <yarn_state+0xb2>
		yarn->dirt2 = 1;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	709a      	strb	r2, [r3, #2]
		yarn->ledState = 2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e40:	e01b      	b.n	8003e7a <yarn_state+0xea>
	} else if (yarn->yarn_chance < 10) {
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	2b09      	cmp	r3, #9
 8003e48:	dc06      	bgt.n	8003e58 <yarn_state+0xc8>
		yarn->torn = 1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	701a      	strb	r2, [r3, #0]
		yarn->ledState = 4;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2204      	movs	r2, #4
 8003e54:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e56:	e010      	b.n	8003e7a <yarn_state+0xea>
	} else if (yarn->read_sens <= 1300 && yarn->read_sens > 500) {
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	f240 5214 	movw	r2, #1300	@ 0x514
 8003e60:	4293      	cmp	r3, r2
 8003e62:	dc0a      	bgt.n	8003e7a <yarn_state+0xea>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003e6c:	dd05      	ble.n	8003e7a <yarn_state+0xea>
		yarn->dirt1 = 1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	705a      	strb	r2, [r3, #1]
		yarn->ledState = 1;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	631a      	str	r2, [r3, #48]	@ 0x30
	}
	if (outCircuit == 1) {
 8003e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb4 <yarn_state+0x124>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <yarn_state+0xf8>
		yarn->ledState = 5;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2205      	movs	r2, #5
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30
	}
	yarn->maxim = 0;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	619a      	str	r2, [r3, #24]
	yarn->minim = (1 << res) - 1;
 8003e8e:	230c      	movs	r3, #12
 8003e90:	2201      	movs	r2, #1
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	1e5a      	subs	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	61da      	str	r2, [r3, #28]
	yarn->count_yarn = 0;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	60da      	str	r2, [r3, #12]
	yarn->count_total = 0;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	609a      	str	r2, [r3, #8]
//	yarn->ledStatePre = yarn->ledState;
}
 8003ea8:	bf00      	nop
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bdb0      	pop	{r4, r5, r7, pc}
 8003eb0:	40590000 	.word	0x40590000
 8003eb4:	20000416 	.word	0x20000416

08003eb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003eb8:	480d      	ldr	r0, [pc, #52]	@ (8003ef0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003eba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ebc:	f7ff f998 	bl	80031f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ec0:	480c      	ldr	r0, [pc, #48]	@ (8003ef4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ec2:	490d      	ldr	r1, [pc, #52]	@ (8003ef8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8003efc <LoopForever+0xe>)
  movs r3, #0
 8003ec6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003ec8:	e002      	b.n	8003ed0 <LoopCopyDataInit>

08003eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ece:	3304      	adds	r3, #4

08003ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ed4:	d3f9      	bcc.n	8003eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8003f00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ed8:	4c0a      	ldr	r4, [pc, #40]	@ (8003f04 <LoopForever+0x16>)
  movs r3, #0
 8003eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003edc:	e001      	b.n	8003ee2 <LoopFillZerobss>

08003ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ee0:	3204      	adds	r2, #4

08003ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ee4:	d3fb      	bcc.n	8003ede <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003ee6:	f007 fc6d 	bl	800b7c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003eea:	f7fe f9e5 	bl	80022b8 <main>

08003eee <LoopForever>:

LoopForever:
    b LoopForever
 8003eee:	e7fe      	b.n	8003eee <LoopForever>
  ldr   r0, =_estack
 8003ef0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ef8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003efc:	0800c93c 	.word	0x0800c93c
  ldr r2, =_sbss
 8003f00:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003f04:	200010fc 	.word	0x200010fc

08003f08 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f08:	e7fe      	b.n	8003f08 <COMP1_2_3_IRQHandler>

08003f0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f14:	2003      	movs	r0, #3
 8003f16:	f001 ff25 	bl	8005d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f1a:	200f      	movs	r0, #15
 8003f1c:	f000 f80e 	bl	8003f3c <HAL_InitTick>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	71fb      	strb	r3, [r7, #7]
 8003f2a:	e001      	b.n	8003f30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f2c:	f7ff f88c 	bl	8003048 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f30:	79fb      	ldrb	r3, [r7, #7]

}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003f48:	4b16      	ldr	r3, [pc, #88]	@ (8003fa4 <HAL_InitTick+0x68>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d022      	beq.n	8003f96 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003f50:	4b15      	ldr	r3, [pc, #84]	@ (8003fa8 <HAL_InitTick+0x6c>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4b13      	ldr	r3, [pc, #76]	@ (8003fa4 <HAL_InitTick+0x68>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f64:	4618      	mov	r0, r3
 8003f66:	f001 ff30 	bl	8005dca <HAL_SYSTICK_Config>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10f      	bne.n	8003f90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b0f      	cmp	r3, #15
 8003f74:	d809      	bhi.n	8003f8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f76:	2200      	movs	r2, #0
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7e:	f001 fefc 	bl	8005d7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f82:	4a0a      	ldr	r2, [pc, #40]	@ (8003fac <HAL_InitTick+0x70>)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	e007      	b.n	8003f9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	73fb      	strb	r3, [r7, #15]
 8003f8e:	e004      	b.n	8003f9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	73fb      	strb	r3, [r7, #15]
 8003f94:	e001      	b.n	8003f9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000020 	.word	0x20000020
 8003fa8:	20000018 	.word	0x20000018
 8003fac:	2000001c 	.word	0x2000001c

08003fb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fb4:	4b05      	ldr	r3, [pc, #20]	@ (8003fcc <HAL_IncTick+0x1c>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	4b05      	ldr	r3, [pc, #20]	@ (8003fd0 <HAL_IncTick+0x20>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	4a03      	ldr	r2, [pc, #12]	@ (8003fcc <HAL_IncTick+0x1c>)
 8003fc0:	6013      	str	r3, [r2, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	20000fb0 	.word	0x20000fb0
 8003fd0:	20000020 	.word	0x20000020

08003fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8003fd8:	4b03      	ldr	r3, [pc, #12]	@ (8003fe8 <HAL_GetTick+0x14>)
 8003fda:	681b      	ldr	r3, [r3, #0]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000fb0 	.word	0x20000fb0

08003fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ff4:	f7ff ffee 	bl	8003fd4 <HAL_GetTick>
 8003ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004004:	d004      	beq.n	8004010 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004006:	4b09      	ldr	r3, [pc, #36]	@ (800402c <HAL_Delay+0x40>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4413      	add	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004010:	bf00      	nop
 8004012:	f7ff ffdf 	bl	8003fd4 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	429a      	cmp	r2, r3
 8004020:	d8f7      	bhi.n	8004012 <HAL_Delay+0x26>
  {
  }
}
 8004022:	bf00      	nop
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20000020 	.word	0x20000020

08004030 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	609a      	str	r2, [r3, #8]
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	609a      	str	r2, [r3, #8]
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3360      	adds	r3, #96	@ 0x60
 80040aa:	461a      	mov	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	4b08      	ldr	r3, [pc, #32]	@ (80040dc <LL_ADC_SetOffset+0x44>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80040d0:	bf00      	nop
 80040d2:	371c      	adds	r7, #28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	03fff000 	.word	0x03fff000

080040e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3360      	adds	r3, #96	@ 0x60
 80040ee:	461a      	mov	r2, r3
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3360      	adds	r3, #96	@ 0x60
 800411c:	461a      	mov	r2, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	431a      	orrs	r2, r3
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004142:	b480      	push	{r7}
 8004144:	b087      	sub	sp, #28
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3360      	adds	r3, #96	@ 0x60
 8004152:	461a      	mov	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	431a      	orrs	r2, r3
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800416c:	bf00      	nop
 800416e:	371c      	adds	r7, #28
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	3360      	adds	r3, #96	@ 0x60
 8004188:	461a      	mov	r2, r3
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	431a      	orrs	r2, r3
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	615a      	str	r2, [r3, #20]
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b087      	sub	sp, #28
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3330      	adds	r3, #48	@ 0x30
 800420a:	461a      	mov	r2, r3
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	0a1b      	lsrs	r3, r3, #8
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	f003 030c 	and.w	r3, r3, #12
 8004216:	4413      	add	r3, r2
 8004218:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	211f      	movs	r1, #31
 8004226:	fa01 f303 	lsl.w	r3, r1, r3
 800422a:	43db      	mvns	r3, r3
 800422c:	401a      	ands	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	0e9b      	lsrs	r3, r3, #26
 8004232:	f003 011f 	and.w	r1, r3, #31
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f003 031f 	and.w	r3, r3, #31
 800423c:	fa01 f303 	lsl.w	r3, r1, r3
 8004240:	431a      	orrs	r2, r3
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800425e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3314      	adds	r3, #20
 8004288:	461a      	mov	r2, r3
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	0e5b      	lsrs	r3, r3, #25
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	4413      	add	r3, r2
 8004296:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	0d1b      	lsrs	r3, r3, #20
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	2107      	movs	r1, #7
 80042a6:	fa01 f303 	lsl.w	r3, r1, r3
 80042aa:	43db      	mvns	r3, r3
 80042ac:	401a      	ands	r2, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	0d1b      	lsrs	r3, r3, #20
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	fa01 f303 	lsl.w	r3, r1, r3
 80042bc:	431a      	orrs	r2, r3
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e8:	43db      	mvns	r3, r3
 80042ea:	401a      	ands	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f003 0318 	and.w	r3, r3, #24
 80042f2:	4908      	ldr	r1, [pc, #32]	@ (8004314 <LL_ADC_SetChannelSingleDiff+0x44>)
 80042f4:	40d9      	lsrs	r1, r3
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	400b      	ands	r3, r1
 80042fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042fe:	431a      	orrs	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004306:	bf00      	nop
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	0007ffff 	.word	0x0007ffff

08004318 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 031f 	and.w	r3, r3, #31
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004360:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6093      	str	r3, [r2, #8]
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004384:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004388:	d101      	bne.n	800438e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80043ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043d8:	d101      	bne.n	80043de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004400:	f043 0201 	orr.w	r2, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004424:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004428:	f043 0202 	orr.w	r2, r3, #2
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <LL_ADC_IsEnabled+0x18>
 8004450:	2301      	movs	r3, #1
 8004452:	e000      	b.n	8004456 <LL_ADC_IsEnabled+0x1a>
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b02      	cmp	r3, #2
 8004474:	d101      	bne.n	800447a <LL_ADC_IsDisableOngoing+0x18>
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <LL_ADC_IsDisableOngoing+0x1a>
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004498:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800449c:	f043 0204 	orr.w	r2, r3, #4
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d101      	bne.n	80044c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80044c4:	2301      	movs	r3, #1
 80044c6:	e000      	b.n	80044ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d101      	bne.n	80044ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044fc:	b590      	push	{r4, r7, lr}
 80044fe:	b089      	sub	sp, #36	@ 0x24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e167      	b.n	80047e6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004520:	2b00      	cmp	r3, #0
 8004522:	d109      	bne.n	8004538 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7fc fde9 	bl	80010fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff ff19 	bl	8004374 <LL_ADC_IsDeepPowerDownEnabled>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d004      	beq.n	8004552 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff feff 	bl	8004350 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff ff34 	bl	80043c4 <LL_ADC_IsInternalRegulatorEnabled>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d115      	bne.n	800458e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff ff18 	bl	800439c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800456c:	4ba0      	ldr	r3, [pc, #640]	@ (80047f0 <HAL_ADC_Init+0x2f4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	099b      	lsrs	r3, r3, #6
 8004572:	4aa0      	ldr	r2, [pc, #640]	@ (80047f4 <HAL_ADC_Init+0x2f8>)
 8004574:	fba2 2303 	umull	r2, r3, r2, r3
 8004578:	099b      	lsrs	r3, r3, #6
 800457a:	3301      	adds	r3, #1
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004580:	e002      	b.n	8004588 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3b01      	subs	r3, #1
 8004586:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f9      	bne.n	8004582 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff ff16 	bl	80043c4 <LL_ADC_IsInternalRegulatorEnabled>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10d      	bne.n	80045ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a2:	f043 0210 	orr.w	r2, r3, #16
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ae:	f043 0201 	orr.w	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff ff76 	bl	80044b0 <LL_ADC_REG_IsConversionOngoing>
 80045c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f040 8100 	bne.w	80047d4 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f040 80fc 	bne.w	80047d4 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80045e4:	f043 0202 	orr.w	r2, r3, #2
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff ff23 	bl	800443c <LL_ADC_IsEnabled>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d111      	bne.n	8004620 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004600:	f7ff ff1c 	bl	800443c <LL_ADC_IsEnabled>
 8004604:	4604      	mov	r4, r0
 8004606:	487c      	ldr	r0, [pc, #496]	@ (80047f8 <HAL_ADC_Init+0x2fc>)
 8004608:	f7ff ff18 	bl	800443c <LL_ADC_IsEnabled>
 800460c:	4603      	mov	r3, r0
 800460e:	4323      	orrs	r3, r4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d105      	bne.n	8004620 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	4619      	mov	r1, r3
 800461a:	4878      	ldr	r0, [pc, #480]	@ (80047fc <HAL_ADC_Init+0x300>)
 800461c:	f7ff fd08 	bl	8004030 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	7f5b      	ldrb	r3, [r3, #29]
 8004624:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800462a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004630:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004636:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800463e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004640:	4313      	orrs	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800464a:	2b01      	cmp	r3, #1
 800464c:	d106      	bne.n	800465c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004652:	3b01      	subs	r3, #1
 8004654:	045b      	lsls	r3, r3, #17
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	4313      	orrs	r3, r2
 800465a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d009      	beq.n	8004678 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004668:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004670:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4313      	orrs	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	4b60      	ldr	r3, [pc, #384]	@ (8004800 <HAL_ADC_Init+0x304>)
 8004680:	4013      	ands	r3, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	69b9      	ldr	r1, [r7, #24]
 8004688:	430b      	orrs	r3, r1
 800468a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff ff15 	bl	80044d6 <LL_ADC_INJ_IsConversionOngoing>
 80046ac:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d16d      	bne.n	8004790 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d16a      	bne.n	8004790 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80046be:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80046c6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046d6:	f023 0302 	bic.w	r3, r3, #2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	69b9      	ldr	r1, [r7, #24]
 80046e0:	430b      	orrs	r3, r1
 80046e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d017      	beq.n	800471c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80046fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004704:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004708:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6911      	ldr	r1, [r2, #16]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6812      	ldr	r2, [r2, #0]
 8004714:	430b      	orrs	r3, r1
 8004716:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800471a:	e013      	b.n	8004744 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800472a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800473c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004740:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800474a:	2b01      	cmp	r3, #1
 800474c:	d118      	bne.n	8004780 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004758:	f023 0304 	bic.w	r3, r3, #4
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004764:	4311      	orrs	r1, r2
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800476a:	4311      	orrs	r1, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004770:	430a      	orrs	r2, r1
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0201 	orr.w	r2, r2, #1
 800477c:	611a      	str	r2, [r3, #16]
 800477e:	e007      	b.n	8004790 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d10c      	bne.n	80047b2 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479e:	f023 010f 	bic.w	r1, r3, #15
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	1e5a      	subs	r2, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80047b0:	e007      	b.n	80047c2 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 020f 	bic.w	r2, r2, #15
 80047c0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c6:	f023 0303 	bic.w	r3, r3, #3
 80047ca:	f043 0201 	orr.w	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80047d2:	e007      	b.n	80047e4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d8:	f043 0210 	orr.w	r2, r3, #16
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80047e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3724      	adds	r7, #36	@ 0x24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd90      	pop	{r4, r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20000018 	.word	0x20000018
 80047f4:	053e2d63 	.word	0x053e2d63
 80047f8:	50000100 	.word	0x50000100
 80047fc:	50000300 	.word	0x50000300
 8004800:	fff04007 	.word	0xfff04007

08004804 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004810:	4851      	ldr	r0, [pc, #324]	@ (8004958 <HAL_ADC_Start_DMA+0x154>)
 8004812:	f7ff fd81 	bl	8004318 <LL_ADC_GetMultimode>
 8004816:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff fe47 	bl	80044b0 <LL_ADC_REG_IsConversionOngoing>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	f040 808f 	bne.w	8004948 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004830:	2b01      	cmp	r3, #1
 8004832:	d101      	bne.n	8004838 <HAL_ADC_Start_DMA+0x34>
 8004834:	2302      	movs	r3, #2
 8004836:	e08a      	b.n	800494e <HAL_ADC_Start_DMA+0x14a>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b05      	cmp	r3, #5
 800484a:	d002      	beq.n	8004852 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	2b09      	cmp	r3, #9
 8004850:	d173      	bne.n	800493a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 feb2 	bl	80055bc <ADC_Enable>
 8004858:	4603      	mov	r3, r0
 800485a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800485c:	7dfb      	ldrb	r3, [r7, #23]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d166      	bne.n	8004930 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004866:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800486a:	f023 0301 	bic.w	r3, r3, #1
 800486e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a38      	ldr	r2, [pc, #224]	@ (800495c <HAL_ADC_Start_DMA+0x158>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d002      	beq.n	8004886 <HAL_ADC_Start_DMA+0x82>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	e001      	b.n	800488a <HAL_ADC_Start_DMA+0x86>
 8004886:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	6812      	ldr	r2, [r2, #0]
 800488e:	4293      	cmp	r3, r2
 8004890:	d002      	beq.n	8004898 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d105      	bne.n	80048a4 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d006      	beq.n	80048be <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048b4:	f023 0206 	bic.w	r2, r3, #6
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	661a      	str	r2, [r3, #96]	@ 0x60
 80048bc:	e002      	b.n	80048c4 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c8:	4a25      	ldr	r2, [pc, #148]	@ (8004960 <HAL_ADC_Start_DMA+0x15c>)
 80048ca:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d0:	4a24      	ldr	r2, [pc, #144]	@ (8004964 <HAL_ADC_Start_DMA+0x160>)
 80048d2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d8:	4a23      	ldr	r2, [pc, #140]	@ (8004968 <HAL_ADC_Start_DMA+0x164>)
 80048da:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	221c      	movs	r2, #28
 80048e2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0210 	orr.w	r2, r2, #16
 80048fa:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3340      	adds	r3, #64	@ 0x40
 8004916:	4619      	mov	r1, r3
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f001 fb0a 	bl	8005f34 <HAL_DMA_Start_IT>
 8004920:	4603      	mov	r3, r0
 8004922:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff fdad 	bl	8004488 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800492e:	e00d      	b.n	800494c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004938:	e008      	b.n	800494c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004946:	e001      	b.n	800494c <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004948:	2302      	movs	r3, #2
 800494a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800494c:	7dfb      	ldrb	r3, [r7, #23]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	50000300 	.word	0x50000300
 800495c:	50000100 	.word	0x50000100
 8004960:	08005787 	.word	0x08005787
 8004964:	0800585f 	.word	0x0800585f
 8004968:	0800587b 	.word	0x0800587b

0800496c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b08a      	sub	sp, #40	@ 0x28
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004974:	2300      	movs	r3, #0
 8004976:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004988:	4883      	ldr	r0, [pc, #524]	@ (8004b98 <HAL_ADC_IRQHandler+0x22c>)
 800498a:	f7ff fcc5 	bl	8004318 <LL_ADC_GetMultimode>
 800498e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d017      	beq.n	80049ca <HAL_ADC_IRQHandler+0x5e>
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d012      	beq.n	80049ca <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d105      	bne.n	80049bc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f001 f853 	bl	8005a68 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2202      	movs	r2, #2
 80049c8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d004      	beq.n	80049de <HAL_ADC_IRQHandler+0x72>
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10a      	bne.n	80049f4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8085 	beq.w	8004af4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d07f      	beq.n	8004af4 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d105      	bne.n	8004a0c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a04:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff fbdf 	bl	80041d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d064      	beq.n	8004ae6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a5e      	ldr	r2, [pc, #376]	@ (8004b9c <HAL_ADC_IRQHandler+0x230>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d002      	beq.n	8004a2c <HAL_ADC_IRQHandler+0xc0>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	e001      	b.n	8004a30 <HAL_ADC_IRQHandler+0xc4>
 8004a2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d008      	beq.n	8004a4a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2b05      	cmp	r3, #5
 8004a42:	d002      	beq.n	8004a4a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2b09      	cmp	r3, #9
 8004a48:	d104      	bne.n	8004a54 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	623b      	str	r3, [r7, #32]
 8004a52:	e00d      	b.n	8004a70 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a50      	ldr	r2, [pc, #320]	@ (8004b9c <HAL_ADC_IRQHandler+0x230>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d002      	beq.n	8004a64 <HAL_ADC_IRQHandler+0xf8>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	e001      	b.n	8004a68 <HAL_ADC_IRQHandler+0xfc>
 8004a64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004a68:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d135      	bne.n	8004ae6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d12e      	bne.n	8004ae6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff fd0f 	bl	80044b0 <LL_ADC_REG_IsConversionOngoing>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d11a      	bne.n	8004ace <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 020c 	bic.w	r2, r2, #12
 8004aa6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d112      	bne.n	8004ae6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac4:	f043 0201 	orr.w	r2, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004acc:	e00b      	b.n	8004ae6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad2:	f043 0210 	orr.w	r2, r3, #16
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ade:	f043 0201 	orr.w	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fc ffa0 	bl	8001a2c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	220c      	movs	r2, #12
 8004af2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d004      	beq.n	8004b08 <HAL_ADC_IRQHandler+0x19c>
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	f003 0320 	and.w	r3, r3, #32
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10b      	bne.n	8004b20 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 809e 	beq.w	8004c50 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 8098 	beq.w	8004c50 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d105      	bne.n	8004b38 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b30:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff fb88 	bl	8004252 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004b42:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff fb43 	bl	80041d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b4e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a11      	ldr	r2, [pc, #68]	@ (8004b9c <HAL_ADC_IRQHandler+0x230>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d002      	beq.n	8004b60 <HAL_ADC_IRQHandler+0x1f4>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	e001      	b.n	8004b64 <HAL_ADC_IRQHandler+0x1f8>
 8004b60:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d008      	beq.n	8004b7e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d005      	beq.n	8004b7e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2b06      	cmp	r3, #6
 8004b76:	d002      	beq.n	8004b7e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2b07      	cmp	r3, #7
 8004b7c:	d104      	bne.n	8004b88 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	623b      	str	r3, [r7, #32]
 8004b86:	e011      	b.n	8004bac <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a03      	ldr	r2, [pc, #12]	@ (8004b9c <HAL_ADC_IRQHandler+0x230>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d006      	beq.n	8004ba0 <HAL_ADC_IRQHandler+0x234>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	e005      	b.n	8004ba4 <HAL_ADC_IRQHandler+0x238>
 8004b98:	50000300 	.word	0x50000300
 8004b9c:	50000100 	.word	0x50000100
 8004ba0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004ba4:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d047      	beq.n	8004c42 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <HAL_ADC_IRQHandler+0x260>
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d03f      	beq.n	8004c42 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d13a      	bne.n	8004c42 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd6:	2b40      	cmp	r3, #64	@ 0x40
 8004bd8:	d133      	bne.n	8004c42 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d12e      	bne.n	8004c42 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff fc74 	bl	80044d6 <LL_ADC_INJ_IsConversionOngoing>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d11a      	bne.n	8004c2a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c02:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d112      	bne.n	8004c42 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c20:	f043 0201 	orr.w	r2, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c28:	e00b      	b.n	8004c42 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2e:	f043 0210 	orr.w	r2, r3, #16
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c3a:	f043 0201 	orr.w	r2, r3, #1
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fee8 	bl	8005a18 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2260      	movs	r2, #96	@ 0x60
 8004c4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d011      	beq.n	8004c7e <HAL_ADC_IRQHandler+0x312>
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00c      	beq.n	8004c7e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f89f 	bl	8004db4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2280      	movs	r2, #128	@ 0x80
 8004c7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d012      	beq.n	8004cae <HAL_ADC_IRQHandler+0x342>
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00d      	beq.n	8004cae <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c96:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fece 	bl	8005a40 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d012      	beq.n	8004cde <HAL_ADC_IRQHandler+0x372>
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00d      	beq.n	8004cde <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fec0 	bl	8005a54 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cdc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d036      	beq.n	8004d56 <HAL_ADC_IRQHandler+0x3ea>
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d031      	beq.n	8004d56 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d102      	bne.n	8004d00 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cfe:	e014      	b.n	8004d2a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d008      	beq.n	8004d18 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004d06:	4825      	ldr	r0, [pc, #148]	@ (8004d9c <HAL_ADC_IRQHandler+0x430>)
 8004d08:	f7ff fb14 	bl	8004334 <LL_ADC_GetMultiDMATransfer>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00b      	beq.n	8004d2a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004d12:	2301      	movs	r3, #1
 8004d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d16:	e008      	b.n	8004d2a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004d26:	2301      	movs	r3, #1
 8004d28:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d10e      	bne.n	8004d4e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d34:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d40:	f043 0202 	orr.w	r2, r3, #2
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f83d 	bl	8004dc8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2210      	movs	r2, #16
 8004d54:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d018      	beq.n	8004d92 <HAL_ADC_IRQHandler+0x426>
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d013      	beq.n	8004d92 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d6e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d7a:	f043 0208 	orr.w	r2, r3, #8
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d8a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fe4d 	bl	8005a2c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004d92:	bf00      	nop
 8004d94:	3728      	adds	r7, #40	@ 0x28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	50000300 	.word	0x50000300

08004da0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b0b6      	sub	sp, #216	@ 0xd8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <HAL_ADC_ConfigChannel+0x22>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e3c8      	b.n	8005590 <HAL_ADC_ConfigChannel+0x7b4>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff fb50 	bl	80044b0 <LL_ADC_REG_IsConversionOngoing>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f040 83ad 	bne.w	8005572 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6818      	ldr	r0, [r3, #0]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	6859      	ldr	r1, [r3, #4]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	461a      	mov	r2, r3
 8004e26:	f7ff f9e8 	bl	80041fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff fb3e 	bl	80044b0 <LL_ADC_REG_IsConversionOngoing>
 8004e34:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff fb4a 	bl	80044d6 <LL_ADC_INJ_IsConversionOngoing>
 8004e42:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f040 81d9 	bne.w	8005202 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f040 81d4 	bne.w	8005202 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e62:	d10f      	bne.n	8004e84 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6818      	ldr	r0, [r3, #0]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	4619      	mov	r1, r3
 8004e70:	f7ff fa02 	bl	8004278 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff f996 	bl	80041ae <LL_ADC_SetSamplingTimeCommonConfig>
 8004e82:	e00e      	b.n	8004ea2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	6819      	ldr	r1, [r3, #0]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	461a      	mov	r2, r3
 8004e92:	f7ff f9f1 	bl	8004278 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff f986 	bl	80041ae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	695a      	ldr	r2, [r3, #20]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	08db      	lsrs	r3, r3, #3
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d022      	beq.n	8004f0a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6818      	ldr	r0, [r3, #0]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	6919      	ldr	r1, [r3, #16]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ed4:	f7ff f8e0 	bl	8004098 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6818      	ldr	r0, [r3, #0]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	6919      	ldr	r1, [r3, #16]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	f7ff f92c 	bl	8004142 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d102      	bne.n	8004f00 <HAL_ADC_ConfigChannel+0x124>
 8004efa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004efe:	e000      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x126>
 8004f00:	2300      	movs	r3, #0
 8004f02:	461a      	mov	r2, r3
 8004f04:	f7ff f938 	bl	8004178 <LL_ADC_SetOffsetSaturation>
 8004f08:	e17b      	b.n	8005202 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2100      	movs	r1, #0
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff f8e5 	bl	80040e0 <LL_ADC_GetOffsetChannel>
 8004f16:	4603      	mov	r3, r0
 8004f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10a      	bne.n	8004f36 <HAL_ADC_ConfigChannel+0x15a>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2100      	movs	r1, #0
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff f8da 	bl	80040e0 <LL_ADC_GetOffsetChannel>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	0e9b      	lsrs	r3, r3, #26
 8004f30:	f003 021f 	and.w	r2, r3, #31
 8004f34:	e01e      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x198>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff f8cf 	bl	80040e0 <LL_ADC_GetOffsetChannel>
 8004f42:	4603      	mov	r3, r0
 8004f44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004f4c:	fa93 f3a3 	rbit	r3, r3
 8004f50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004f58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004f5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004f64:	2320      	movs	r3, #32
 8004f66:	e004      	b.n	8004f72 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004f68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f6c:	fab3 f383 	clz	r3, r3
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d105      	bne.n	8004f8c <HAL_ADC_ConfigChannel+0x1b0>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	0e9b      	lsrs	r3, r3, #26
 8004f86:	f003 031f 	and.w	r3, r3, #31
 8004f8a:	e018      	b.n	8004fbe <HAL_ADC_ConfigChannel+0x1e2>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004f98:	fa93 f3a3 	rbit	r3, r3
 8004f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004fa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004fa8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004fb0:	2320      	movs	r3, #32
 8004fb2:	e004      	b.n	8004fbe <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004fb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004fb8:	fab3 f383 	clz	r3, r3
 8004fbc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d106      	bne.n	8004fd0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2100      	movs	r1, #0
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff f89e 	bl	800410c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff f882 	bl	80040e0 <LL_ADC_GetOffsetChannel>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10a      	bne.n	8004ffc <HAL_ADC_ConfigChannel+0x220>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2101      	movs	r1, #1
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff f877 	bl	80040e0 <LL_ADC_GetOffsetChannel>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	0e9b      	lsrs	r3, r3, #26
 8004ff6:	f003 021f 	and.w	r2, r3, #31
 8004ffa:	e01e      	b.n	800503a <HAL_ADC_ConfigChannel+0x25e>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2101      	movs	r1, #1
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff f86c 	bl	80040e0 <LL_ADC_GetOffsetChannel>
 8005008:	4603      	mov	r3, r0
 800500a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005012:	fa93 f3a3 	rbit	r3, r3
 8005016:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800501a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800501e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005022:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800502a:	2320      	movs	r3, #32
 800502c:	e004      	b.n	8005038 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800502e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005032:	fab3 f383 	clz	r3, r3
 8005036:	b2db      	uxtb	r3, r3
 8005038:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005042:	2b00      	cmp	r3, #0
 8005044:	d105      	bne.n	8005052 <HAL_ADC_ConfigChannel+0x276>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	0e9b      	lsrs	r3, r3, #26
 800504c:	f003 031f 	and.w	r3, r3, #31
 8005050:	e018      	b.n	8005084 <HAL_ADC_ConfigChannel+0x2a8>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800505e:	fa93 f3a3 	rbit	r3, r3
 8005062:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005066:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800506a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800506e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8005076:	2320      	movs	r3, #32
 8005078:	e004      	b.n	8005084 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800507a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800507e:	fab3 f383 	clz	r3, r3
 8005082:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005084:	429a      	cmp	r2, r3
 8005086:	d106      	bne.n	8005096 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2200      	movs	r2, #0
 800508e:	2101      	movs	r1, #1
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff f83b 	bl	800410c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2102      	movs	r1, #2
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff f81f 	bl	80040e0 <LL_ADC_GetOffsetChannel>
 80050a2:	4603      	mov	r3, r0
 80050a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10a      	bne.n	80050c2 <HAL_ADC_ConfigChannel+0x2e6>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2102      	movs	r1, #2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff f814 	bl	80040e0 <LL_ADC_GetOffsetChannel>
 80050b8:	4603      	mov	r3, r0
 80050ba:	0e9b      	lsrs	r3, r3, #26
 80050bc:	f003 021f 	and.w	r2, r3, #31
 80050c0:	e01e      	b.n	8005100 <HAL_ADC_ConfigChannel+0x324>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2102      	movs	r1, #2
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff f809 	bl	80040e0 <LL_ADC_GetOffsetChannel>
 80050ce:	4603      	mov	r3, r0
 80050d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050d8:	fa93 f3a3 	rbit	r3, r3
 80050dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80050e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80050e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80050e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80050f0:	2320      	movs	r3, #32
 80050f2:	e004      	b.n	80050fe <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80050f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80050f8:	fab3 f383 	clz	r3, r3
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005108:	2b00      	cmp	r3, #0
 800510a:	d105      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x33c>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	0e9b      	lsrs	r3, r3, #26
 8005112:	f003 031f 	and.w	r3, r3, #31
 8005116:	e016      	b.n	8005146 <HAL_ADC_ConfigChannel+0x36a>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005120:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005124:	fa93 f3a3 	rbit	r3, r3
 8005128:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800512a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800512c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005130:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8005138:	2320      	movs	r3, #32
 800513a:	e004      	b.n	8005146 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800513c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005140:	fab3 f383 	clz	r3, r3
 8005144:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005146:	429a      	cmp	r2, r3
 8005148:	d106      	bne.n	8005158 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2200      	movs	r2, #0
 8005150:	2102      	movs	r1, #2
 8005152:	4618      	mov	r0, r3
 8005154:	f7fe ffda 	bl	800410c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2103      	movs	r1, #3
 800515e:	4618      	mov	r0, r3
 8005160:	f7fe ffbe 	bl	80040e0 <LL_ADC_GetOffsetChannel>
 8005164:	4603      	mov	r3, r0
 8005166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10a      	bne.n	8005184 <HAL_ADC_ConfigChannel+0x3a8>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2103      	movs	r1, #3
 8005174:	4618      	mov	r0, r3
 8005176:	f7fe ffb3 	bl	80040e0 <LL_ADC_GetOffsetChannel>
 800517a:	4603      	mov	r3, r0
 800517c:	0e9b      	lsrs	r3, r3, #26
 800517e:	f003 021f 	and.w	r2, r3, #31
 8005182:	e017      	b.n	80051b4 <HAL_ADC_ConfigChannel+0x3d8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2103      	movs	r1, #3
 800518a:	4618      	mov	r0, r3
 800518c:	f7fe ffa8 	bl	80040e0 <LL_ADC_GetOffsetChannel>
 8005190:	4603      	mov	r3, r0
 8005192:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005194:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005196:	fa93 f3a3 	rbit	r3, r3
 800519a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800519c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800519e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80051a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80051a6:	2320      	movs	r3, #32
 80051a8:	e003      	b.n	80051b2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80051aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051ac:	fab3 f383 	clz	r3, r3
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d105      	bne.n	80051cc <HAL_ADC_ConfigChannel+0x3f0>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	0e9b      	lsrs	r3, r3, #26
 80051c6:	f003 031f 	and.w	r3, r3, #31
 80051ca:	e011      	b.n	80051f0 <HAL_ADC_ConfigChannel+0x414>
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051d4:	fa93 f3a3 	rbit	r3, r3
 80051d8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80051da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80051de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80051e4:	2320      	movs	r3, #32
 80051e6:	e003      	b.n	80051f0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80051e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051ea:	fab3 f383 	clz	r3, r3
 80051ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d106      	bne.n	8005202 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2200      	movs	r2, #0
 80051fa:	2103      	movs	r1, #3
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fe ff85 	bl	800410c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff f918 	bl	800443c <LL_ADC_IsEnabled>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	f040 8140 	bne.w	8005494 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6818      	ldr	r0, [r3, #0]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	6819      	ldr	r1, [r3, #0]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	461a      	mov	r2, r3
 8005222:	f7ff f855 	bl	80042d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	4a8f      	ldr	r2, [pc, #572]	@ (8005468 <HAL_ADC_ConfigChannel+0x68c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	f040 8131 	bne.w	8005494 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10b      	bne.n	800525a <HAL_ADC_ConfigChannel+0x47e>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	0e9b      	lsrs	r3, r3, #26
 8005248:	3301      	adds	r3, #1
 800524a:	f003 031f 	and.w	r3, r3, #31
 800524e:	2b09      	cmp	r3, #9
 8005250:	bf94      	ite	ls
 8005252:	2301      	movls	r3, #1
 8005254:	2300      	movhi	r3, #0
 8005256:	b2db      	uxtb	r3, r3
 8005258:	e019      	b.n	800528e <HAL_ADC_ConfigChannel+0x4b2>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005260:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005262:	fa93 f3a3 	rbit	r3, r3
 8005266:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005268:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800526a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800526c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8005272:	2320      	movs	r3, #32
 8005274:	e003      	b.n	800527e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8005276:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005278:	fab3 f383 	clz	r3, r3
 800527c:	b2db      	uxtb	r3, r3
 800527e:	3301      	adds	r3, #1
 8005280:	f003 031f 	and.w	r3, r3, #31
 8005284:	2b09      	cmp	r3, #9
 8005286:	bf94      	ite	ls
 8005288:	2301      	movls	r3, #1
 800528a:	2300      	movhi	r3, #0
 800528c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800528e:	2b00      	cmp	r3, #0
 8005290:	d079      	beq.n	8005386 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800529a:	2b00      	cmp	r3, #0
 800529c:	d107      	bne.n	80052ae <HAL_ADC_ConfigChannel+0x4d2>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	0e9b      	lsrs	r3, r3, #26
 80052a4:	3301      	adds	r3, #1
 80052a6:	069b      	lsls	r3, r3, #26
 80052a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80052ac:	e015      	b.n	80052da <HAL_ADC_ConfigChannel+0x4fe>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052b6:	fa93 f3a3 	rbit	r3, r3
 80052ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80052bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052be:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80052c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80052c6:	2320      	movs	r3, #32
 80052c8:	e003      	b.n	80052d2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80052ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052cc:	fab3 f383 	clz	r3, r3
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	3301      	adds	r3, #1
 80052d4:	069b      	lsls	r3, r3, #26
 80052d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d109      	bne.n	80052fa <HAL_ADC_ConfigChannel+0x51e>
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	0e9b      	lsrs	r3, r3, #26
 80052ec:	3301      	adds	r3, #1
 80052ee:	f003 031f 	and.w	r3, r3, #31
 80052f2:	2101      	movs	r1, #1
 80052f4:	fa01 f303 	lsl.w	r3, r1, r3
 80052f8:	e017      	b.n	800532a <HAL_ADC_ConfigChannel+0x54e>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005302:	fa93 f3a3 	rbit	r3, r3
 8005306:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800530a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800530c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8005312:	2320      	movs	r3, #32
 8005314:	e003      	b.n	800531e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8005316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005318:	fab3 f383 	clz	r3, r3
 800531c:	b2db      	uxtb	r3, r3
 800531e:	3301      	adds	r3, #1
 8005320:	f003 031f 	and.w	r3, r3, #31
 8005324:	2101      	movs	r1, #1
 8005326:	fa01 f303 	lsl.w	r3, r1, r3
 800532a:	ea42 0103 	orr.w	r1, r2, r3
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10a      	bne.n	8005350 <HAL_ADC_ConfigChannel+0x574>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	0e9b      	lsrs	r3, r3, #26
 8005340:	3301      	adds	r3, #1
 8005342:	f003 021f 	and.w	r2, r3, #31
 8005346:	4613      	mov	r3, r2
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	4413      	add	r3, r2
 800534c:	051b      	lsls	r3, r3, #20
 800534e:	e018      	b.n	8005382 <HAL_ADC_ConfigChannel+0x5a6>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005358:	fa93 f3a3 	rbit	r3, r3
 800535c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800535e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005360:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8005368:	2320      	movs	r3, #32
 800536a:	e003      	b.n	8005374 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800536c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800536e:	fab3 f383 	clz	r3, r3
 8005372:	b2db      	uxtb	r3, r3
 8005374:	3301      	adds	r3, #1
 8005376:	f003 021f 	and.w	r2, r3, #31
 800537a:	4613      	mov	r3, r2
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	4413      	add	r3, r2
 8005380:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005382:	430b      	orrs	r3, r1
 8005384:	e081      	b.n	800548a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800538e:	2b00      	cmp	r3, #0
 8005390:	d107      	bne.n	80053a2 <HAL_ADC_ConfigChannel+0x5c6>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	0e9b      	lsrs	r3, r3, #26
 8005398:	3301      	adds	r3, #1
 800539a:	069b      	lsls	r3, r3, #26
 800539c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80053a0:	e015      	b.n	80053ce <HAL_ADC_ConfigChannel+0x5f2>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053aa:	fa93 f3a3 	rbit	r3, r3
 80053ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80053b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80053b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80053ba:	2320      	movs	r3, #32
 80053bc:	e003      	b.n	80053c6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80053be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c0:	fab3 f383 	clz	r3, r3
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	3301      	adds	r3, #1
 80053c8:	069b      	lsls	r3, r3, #26
 80053ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d109      	bne.n	80053ee <HAL_ADC_ConfigChannel+0x612>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	0e9b      	lsrs	r3, r3, #26
 80053e0:	3301      	adds	r3, #1
 80053e2:	f003 031f 	and.w	r3, r3, #31
 80053e6:	2101      	movs	r1, #1
 80053e8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ec:	e017      	b.n	800541e <HAL_ADC_ConfigChannel+0x642>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	fa93 f3a3 	rbit	r3, r3
 80053fa:	61fb      	str	r3, [r7, #28]
  return result;
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8005406:	2320      	movs	r3, #32
 8005408:	e003      	b.n	8005412 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800540a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540c:	fab3 f383 	clz	r3, r3
 8005410:	b2db      	uxtb	r3, r3
 8005412:	3301      	adds	r3, #1
 8005414:	f003 031f 	and.w	r3, r3, #31
 8005418:	2101      	movs	r1, #1
 800541a:	fa01 f303 	lsl.w	r3, r1, r3
 800541e:	ea42 0103 	orr.w	r1, r2, r3
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10d      	bne.n	800544a <HAL_ADC_ConfigChannel+0x66e>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	0e9b      	lsrs	r3, r3, #26
 8005434:	3301      	adds	r3, #1
 8005436:	f003 021f 	and.w	r2, r3, #31
 800543a:	4613      	mov	r3, r2
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	4413      	add	r3, r2
 8005440:	3b1e      	subs	r3, #30
 8005442:	051b      	lsls	r3, r3, #20
 8005444:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005448:	e01e      	b.n	8005488 <HAL_ADC_ConfigChannel+0x6ac>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	fa93 f3a3 	rbit	r3, r3
 8005456:	613b      	str	r3, [r7, #16]
  return result;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d104      	bne.n	800546c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8005462:	2320      	movs	r3, #32
 8005464:	e006      	b.n	8005474 <HAL_ADC_ConfigChannel+0x698>
 8005466:	bf00      	nop
 8005468:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	fab3 f383 	clz	r3, r3
 8005472:	b2db      	uxtb	r3, r3
 8005474:	3301      	adds	r3, #1
 8005476:	f003 021f 	and.w	r2, r3, #31
 800547a:	4613      	mov	r3, r2
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	4413      	add	r3, r2
 8005480:	3b1e      	subs	r3, #30
 8005482:	051b      	lsls	r3, r3, #20
 8005484:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005488:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800548e:	4619      	mov	r1, r3
 8005490:	f7fe fef2 	bl	8004278 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	4b3f      	ldr	r3, [pc, #252]	@ (8005598 <HAL_ADC_ConfigChannel+0x7bc>)
 800549a:	4013      	ands	r3, r2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d071      	beq.n	8005584 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054a0:	483e      	ldr	r0, [pc, #248]	@ (800559c <HAL_ADC_ConfigChannel+0x7c0>)
 80054a2:	f7fe fdeb 	bl	800407c <LL_ADC_GetCommonPathInternalCh>
 80054a6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a3c      	ldr	r2, [pc, #240]	@ (80055a0 <HAL_ADC_ConfigChannel+0x7c4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d004      	beq.n	80054be <HAL_ADC_ConfigChannel+0x6e2>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a3a      	ldr	r2, [pc, #232]	@ (80055a4 <HAL_ADC_ConfigChannel+0x7c8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d127      	bne.n	800550e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80054be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d121      	bne.n	800550e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054d2:	d157      	bne.n	8005584 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80054dc:	4619      	mov	r1, r3
 80054de:	482f      	ldr	r0, [pc, #188]	@ (800559c <HAL_ADC_ConfigChannel+0x7c0>)
 80054e0:	f7fe fdb9 	bl	8004056 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054e4:	4b30      	ldr	r3, [pc, #192]	@ (80055a8 <HAL_ADC_ConfigChannel+0x7cc>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	099b      	lsrs	r3, r3, #6
 80054ea:	4a30      	ldr	r2, [pc, #192]	@ (80055ac <HAL_ADC_ConfigChannel+0x7d0>)
 80054ec:	fba2 2303 	umull	r2, r3, r2, r3
 80054f0:	099b      	lsrs	r3, r3, #6
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	4613      	mov	r3, r2
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	4413      	add	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80054fe:	e002      	b.n	8005506 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3b01      	subs	r3, #1
 8005504:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1f9      	bne.n	8005500 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800550c:	e03a      	b.n	8005584 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a27      	ldr	r2, [pc, #156]	@ (80055b0 <HAL_ADC_ConfigChannel+0x7d4>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d113      	bne.n	8005540 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005518:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800551c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10d      	bne.n	8005540 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a22      	ldr	r2, [pc, #136]	@ (80055b4 <HAL_ADC_ConfigChannel+0x7d8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d02a      	beq.n	8005584 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800552e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005536:	4619      	mov	r1, r3
 8005538:	4818      	ldr	r0, [pc, #96]	@ (800559c <HAL_ADC_ConfigChannel+0x7c0>)
 800553a:	f7fe fd8c 	bl	8004056 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800553e:	e021      	b.n	8005584 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1c      	ldr	r2, [pc, #112]	@ (80055b8 <HAL_ADC_ConfigChannel+0x7dc>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d11c      	bne.n	8005584 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800554a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800554e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d116      	bne.n	8005584 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a16      	ldr	r2, [pc, #88]	@ (80055b4 <HAL_ADC_ConfigChannel+0x7d8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d011      	beq.n	8005584 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005560:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005564:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005568:	4619      	mov	r1, r3
 800556a:	480c      	ldr	r0, [pc, #48]	@ (800559c <HAL_ADC_ConfigChannel+0x7c0>)
 800556c:	f7fe fd73 	bl	8004056 <LL_ADC_SetCommonPathInternalCh>
 8005570:	e008      	b.n	8005584 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005576:	f043 0220 	orr.w	r2, r3, #32
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800558c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005590:	4618      	mov	r0, r3
 8005592:	37d8      	adds	r7, #216	@ 0xd8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	80080000 	.word	0x80080000
 800559c:	50000300 	.word	0x50000300
 80055a0:	c3210000 	.word	0xc3210000
 80055a4:	90c00010 	.word	0x90c00010
 80055a8:	20000018 	.word	0x20000018
 80055ac:	053e2d63 	.word	0x053e2d63
 80055b0:	c7520000 	.word	0xc7520000
 80055b4:	50000100 	.word	0x50000100
 80055b8:	cb840000 	.word	0xcb840000

080055bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fe ff35 	bl	800443c <LL_ADC_IsEnabled>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d169      	bne.n	80056ac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	4b36      	ldr	r3, [pc, #216]	@ (80056b8 <ADC_Enable+0xfc>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00d      	beq.n	8005602 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ea:	f043 0210 	orr.w	r2, r3, #16
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055f6:	f043 0201 	orr.w	r2, r3, #1
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e055      	b.n	80056ae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4618      	mov	r0, r3
 8005608:	f7fe fef0 	bl	80043ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800560c:	482b      	ldr	r0, [pc, #172]	@ (80056bc <ADC_Enable+0x100>)
 800560e:	f7fe fd35 	bl	800407c <LL_ADC_GetCommonPathInternalCh>
 8005612:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005614:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005618:	2b00      	cmp	r3, #0
 800561a:	d013      	beq.n	8005644 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800561c:	4b28      	ldr	r3, [pc, #160]	@ (80056c0 <ADC_Enable+0x104>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	099b      	lsrs	r3, r3, #6
 8005622:	4a28      	ldr	r2, [pc, #160]	@ (80056c4 <ADC_Enable+0x108>)
 8005624:	fba2 2303 	umull	r2, r3, r2, r3
 8005628:	099b      	lsrs	r3, r3, #6
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	4613      	mov	r3, r2
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	4413      	add	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005636:	e002      	b.n	800563e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	3b01      	subs	r3, #1
 800563c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1f9      	bne.n	8005638 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005644:	f7fe fcc6 	bl	8003fd4 <HAL_GetTick>
 8005648:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800564a:	e028      	b.n	800569e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4618      	mov	r0, r3
 8005652:	f7fe fef3 	bl	800443c <LL_ADC_IsEnabled>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d104      	bne.n	8005666 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4618      	mov	r0, r3
 8005662:	f7fe fec3 	bl	80043ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005666:	f7fe fcb5 	bl	8003fd4 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d914      	bls.n	800569e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b01      	cmp	r3, #1
 8005680:	d00d      	beq.n	800569e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005686:	f043 0210 	orr.w	r2, r3, #16
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005692:	f043 0201 	orr.w	r2, r3, #1
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e007      	b.n	80056ae <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d1cf      	bne.n	800564c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	8000003f 	.word	0x8000003f
 80056bc:	50000300 	.word	0x50000300
 80056c0:	20000018 	.word	0x20000018
 80056c4:	053e2d63 	.word	0x053e2d63

080056c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fe fec4 	bl	8004462 <LL_ADC_IsDisableOngoing>
 80056da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7fe feab 	bl	800443c <LL_ADC_IsEnabled>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d047      	beq.n	800577c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d144      	bne.n	800577c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 030d 	and.w	r3, r3, #13
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d10c      	bne.n	800571a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4618      	mov	r0, r3
 8005706:	f7fe fe85 	bl	8004414 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2203      	movs	r2, #3
 8005710:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005712:	f7fe fc5f 	bl	8003fd4 <HAL_GetTick>
 8005716:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005718:	e029      	b.n	800576e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800571e:	f043 0210 	orr.w	r2, r3, #16
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800572a:	f043 0201 	orr.w	r2, r3, #1
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e023      	b.n	800577e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005736:	f7fe fc4d 	bl	8003fd4 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d914      	bls.n	800576e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00d      	beq.n	800576e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005756:	f043 0210 	orr.w	r2, r3, #16
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005762:	f043 0201 	orr.w	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e007      	b.n	800577e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1dc      	bne.n	8005736 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005792:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005798:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800579c:	2b00      	cmp	r3, #0
 800579e:	d14b      	bne.n	8005838 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d021      	beq.n	80057fe <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe fd08 	bl	80041d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d032      	beq.n	8005830 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d12b      	bne.n	8005830 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d11f      	bne.n	8005830 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f4:	f043 0201 	orr.w	r2, r3, #1
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80057fc:	e018      	b.n	8005830 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d111      	bne.n	8005830 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005810:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800581c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d105      	bne.n	8005830 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005828:	f043 0201 	orr.w	r2, r3, #1
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f7fc f8fb 	bl	8001a2c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005836:	e00e      	b.n	8005856 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800583c:	f003 0310 	and.w	r3, r3, #16
 8005840:	2b00      	cmp	r3, #0
 8005842:	d003      	beq.n	800584c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f7ff fabf 	bl	8004dc8 <HAL_ADC_ErrorCallback>
}
 800584a:	e004      	b.n	8005856 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	4798      	blx	r3
}
 8005856:	bf00      	nop
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b084      	sub	sp, #16
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f7ff fa97 	bl	8004da0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005872:	bf00      	nop
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005886:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800588c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005898:	f043 0204 	orr.w	r2, r3, #4
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f7ff fa91 	bl	8004dc8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80058a6:	bf00      	nop
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <LL_ADC_IsEnabled>:
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <LL_ADC_IsEnabled+0x18>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <LL_ADC_IsEnabled+0x1a>
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <LL_ADC_StartCalibration>:
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80058e6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	609a      	str	r2, [r3, #8]
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <LL_ADC_IsCalibrationOnGoing>:
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005916:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800591a:	d101      	bne.n	8005920 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800591c:	2301      	movs	r3, #1
 800591e:	e000      	b.n	8005922 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <LL_ADC_REG_IsConversionOngoing>:
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b04      	cmp	r3, #4
 8005940:	d101      	bne.n	8005946 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800595e:	2300      	movs	r3, #0
 8005960:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_ADCEx_Calibration_Start+0x1c>
 800596c:	2302      	movs	r3, #2
 800596e:	e04d      	b.n	8005a0c <HAL_ADCEx_Calibration_Start+0xb8>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7ff fea5 	bl	80056c8 <ADC_Disable>
 800597e:	4603      	mov	r3, r0
 8005980:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005982:	7bfb      	ldrb	r3, [r7, #15]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d136      	bne.n	80059f6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800598c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005990:	f023 0302 	bic.w	r3, r3, #2
 8005994:	f043 0202 	orr.w	r2, r3, #2
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff ff96 	bl	80058d4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80059a8:	e014      	b.n	80059d4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	3301      	adds	r3, #1
 80059ae:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4a18      	ldr	r2, [pc, #96]	@ (8005a14 <HAL_ADCEx_Calibration_Start+0xc0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d90d      	bls.n	80059d4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059bc:	f023 0312 	bic.w	r3, r3, #18
 80059c0:	f043 0210 	orr.w	r2, r3, #16
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e01b      	b.n	8005a0c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4618      	mov	r0, r3
 80059da:	f7ff ff94 	bl	8005906 <LL_ADC_IsCalibrationOnGoing>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1e2      	bne.n	80059aa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059e8:	f023 0303 	bic.w	r3, r3, #3
 80059ec:	f043 0201 	orr.w	r2, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80059f4:	e005      	b.n	8005a02 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059fa:	f043 0210 	orr.w	r2, r3, #16
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	0004de01 	.word	0x0004de01

08005a18 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005a7c:	b590      	push	{r4, r7, lr}
 8005a7e:	b0a1      	sub	sp, #132	@ 0x84
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d101      	bne.n	8005a9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005a96:	2302      	movs	r3, #2
 8005a98:	e08b      	b.n	8005bb2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ab2:	d102      	bne.n	8005aba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005ab4:	4b41      	ldr	r3, [pc, #260]	@ (8005bbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005ab6:	60bb      	str	r3, [r7, #8]
 8005ab8:	e001      	b.n	8005abe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005aba:	2300      	movs	r3, #0
 8005abc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10b      	bne.n	8005adc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac8:	f043 0220 	orr.w	r2, r3, #32
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e06a      	b.n	8005bb2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff ff25 	bl	800592e <LL_ADC_REG_IsConversionOngoing>
 8005ae4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff ff1f 	bl	800592e <LL_ADC_REG_IsConversionOngoing>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d14c      	bne.n	8005b90 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005af6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d149      	bne.n	8005b90 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005afc:	4b30      	ldr	r3, [pc, #192]	@ (8005bc0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005afe:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d028      	beq.n	8005b5a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005b08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	6859      	ldr	r1, [r3, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005b1a:	035b      	lsls	r3, r3, #13
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b22:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b24:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005b28:	f7ff fec1 	bl	80058ae <LL_ADC_IsEnabled>
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	4823      	ldr	r0, [pc, #140]	@ (8005bbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005b30:	f7ff febd 	bl	80058ae <LL_ADC_IsEnabled>
 8005b34:	4603      	mov	r3, r0
 8005b36:	4323      	orrs	r3, r4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d133      	bne.n	8005ba4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005b3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005b44:	f023 030f 	bic.w	r3, r3, #15
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	6811      	ldr	r1, [r2, #0]
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	6892      	ldr	r2, [r2, #8]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	431a      	orrs	r2, r3
 8005b54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b56:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005b58:	e024      	b.n	8005ba4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005b5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b64:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b66:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005b6a:	f7ff fea0 	bl	80058ae <LL_ADC_IsEnabled>
 8005b6e:	4604      	mov	r4, r0
 8005b70:	4812      	ldr	r0, [pc, #72]	@ (8005bbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005b72:	f7ff fe9c 	bl	80058ae <LL_ADC_IsEnabled>
 8005b76:	4603      	mov	r3, r0
 8005b78:	4323      	orrs	r3, r4
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d112      	bne.n	8005ba4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005b7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005b86:	f023 030f 	bic.w	r3, r3, #15
 8005b8a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005b8c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005b8e:	e009      	b.n	8005ba4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b94:	f043 0220 	orr.w	r2, r3, #32
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005ba2:	e000      	b.n	8005ba6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005ba4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005bae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3784      	adds	r7, #132	@ 0x84
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd90      	pop	{r4, r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	50000100 	.word	0x50000100
 8005bc0:	50000300 	.word	0x50000300

08005bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8005c08 <__NVIC_SetPriorityGrouping+0x44>)
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005be0:	4013      	ands	r3, r2
 8005be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005bec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bf6:	4a04      	ldr	r2, [pc, #16]	@ (8005c08 <__NVIC_SetPriorityGrouping+0x44>)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	60d3      	str	r3, [r2, #12]
}
 8005bfc:	bf00      	nop
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	e000ed00 	.word	0xe000ed00

08005c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c10:	4b04      	ldr	r3, [pc, #16]	@ (8005c24 <__NVIC_GetPriorityGrouping+0x18>)
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	0a1b      	lsrs	r3, r3, #8
 8005c16:	f003 0307 	and.w	r3, r3, #7
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	e000ed00 	.word	0xe000ed00

08005c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	db0b      	blt.n	8005c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c3a:	79fb      	ldrb	r3, [r7, #7]
 8005c3c:	f003 021f 	and.w	r2, r3, #31
 8005c40:	4907      	ldr	r1, [pc, #28]	@ (8005c60 <__NVIC_EnableIRQ+0x38>)
 8005c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c46:	095b      	lsrs	r3, r3, #5
 8005c48:	2001      	movs	r0, #1
 8005c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8005c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	e000e100 	.word	0xe000e100

08005c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	6039      	str	r1, [r7, #0]
 8005c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	db0a      	blt.n	8005c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	490c      	ldr	r1, [pc, #48]	@ (8005cb0 <__NVIC_SetPriority+0x4c>)
 8005c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c82:	0112      	lsls	r2, r2, #4
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	440b      	add	r3, r1
 8005c88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c8c:	e00a      	b.n	8005ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	4908      	ldr	r1, [pc, #32]	@ (8005cb4 <__NVIC_SetPriority+0x50>)
 8005c94:	79fb      	ldrb	r3, [r7, #7]
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	3b04      	subs	r3, #4
 8005c9c:	0112      	lsls	r2, r2, #4
 8005c9e:	b2d2      	uxtb	r2, r2
 8005ca0:	440b      	add	r3, r1
 8005ca2:	761a      	strb	r2, [r3, #24]
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	e000e100 	.word	0xe000e100
 8005cb4:	e000ed00 	.word	0xe000ed00

08005cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b089      	sub	sp, #36	@ 0x24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	f1c3 0307 	rsb	r3, r3, #7
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	bf28      	it	cs
 8005cd6:	2304      	movcs	r3, #4
 8005cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	2b06      	cmp	r3, #6
 8005ce0:	d902      	bls.n	8005ce8 <NVIC_EncodePriority+0x30>
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	3b03      	subs	r3, #3
 8005ce6:	e000      	b.n	8005cea <NVIC_EncodePriority+0x32>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cec:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf6:	43da      	mvns	r2, r3
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	401a      	ands	r2, r3
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d00:	f04f 31ff 	mov.w	r1, #4294967295
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0a:	43d9      	mvns	r1, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d10:	4313      	orrs	r3, r2
         );
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3724      	adds	r7, #36	@ 0x24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
	...

08005d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d30:	d301      	bcc.n	8005d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d32:	2301      	movs	r3, #1
 8005d34:	e00f      	b.n	8005d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d36:	4a0a      	ldr	r2, [pc, #40]	@ (8005d60 <SysTick_Config+0x40>)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d3e:	210f      	movs	r1, #15
 8005d40:	f04f 30ff 	mov.w	r0, #4294967295
 8005d44:	f7ff ff8e 	bl	8005c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d48:	4b05      	ldr	r3, [pc, #20]	@ (8005d60 <SysTick_Config+0x40>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d4e:	4b04      	ldr	r3, [pc, #16]	@ (8005d60 <SysTick_Config+0x40>)
 8005d50:	2207      	movs	r2, #7
 8005d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	e000e010 	.word	0xe000e010

08005d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff ff29 	bl	8005bc4 <__NVIC_SetPriorityGrouping>
}
 8005d72:	bf00      	nop
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b086      	sub	sp, #24
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	4603      	mov	r3, r0
 8005d82:	60b9      	str	r1, [r7, #8]
 8005d84:	607a      	str	r2, [r7, #4]
 8005d86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d88:	f7ff ff40 	bl	8005c0c <__NVIC_GetPriorityGrouping>
 8005d8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	68b9      	ldr	r1, [r7, #8]
 8005d92:	6978      	ldr	r0, [r7, #20]
 8005d94:	f7ff ff90 	bl	8005cb8 <NVIC_EncodePriority>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d9e:	4611      	mov	r1, r2
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff ff5f 	bl	8005c64 <__NVIC_SetPriority>
}
 8005da6:	bf00      	nop
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	4603      	mov	r3, r0
 8005db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7ff ff33 	bl	8005c28 <__NVIC_EnableIRQ>
}
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7ff ffa4 	bl	8005d20 <SysTick_Config>
 8005dd8:	4603      	mov	r3, r0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e08d      	b.n	8005f12 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	4b47      	ldr	r3, [pc, #284]	@ (8005f1c <HAL_DMA_Init+0x138>)
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d80f      	bhi.n	8005e22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	4b45      	ldr	r3, [pc, #276]	@ (8005f20 <HAL_DMA_Init+0x13c>)
 8005e0a:	4413      	add	r3, r2
 8005e0c:	4a45      	ldr	r2, [pc, #276]	@ (8005f24 <HAL_DMA_Init+0x140>)
 8005e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e12:	091b      	lsrs	r3, r3, #4
 8005e14:	009a      	lsls	r2, r3, #2
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a42      	ldr	r2, [pc, #264]	@ (8005f28 <HAL_DMA_Init+0x144>)
 8005e1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005e20:	e00e      	b.n	8005e40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	4b40      	ldr	r3, [pc, #256]	@ (8005f2c <HAL_DMA_Init+0x148>)
 8005e2a:	4413      	add	r3, r2
 8005e2c:	4a3d      	ldr	r2, [pc, #244]	@ (8005f24 <HAL_DMA_Init+0x140>)
 8005e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e32:	091b      	lsrs	r3, r3, #4
 8005e34:	009a      	lsls	r2, r3, #2
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a3c      	ldr	r2, [pc, #240]	@ (8005f30 <HAL_DMA_Init+0x14c>)
 8005e3e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fa1e 	bl	80062d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ea0:	d102      	bne.n	8005ea8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eb0:	b2d2      	uxtb	r2, r2
 8005eb2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ebc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d010      	beq.n	8005ee8 <HAL_DMA_Init+0x104>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d80c      	bhi.n	8005ee8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fa3e 	bl	8006350 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ee4:	605a      	str	r2, [r3, #4]
 8005ee6:	e008      	b.n	8005efa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	40020407 	.word	0x40020407
 8005f20:	bffdfff8 	.word	0xbffdfff8
 8005f24:	cccccccd 	.word	0xcccccccd
 8005f28:	40020000 	.word	0x40020000
 8005f2c:	bffdfbf8 	.word	0xbffdfbf8
 8005f30:	40020400 	.word	0x40020400

08005f34 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_DMA_Start_IT+0x20>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e066      	b.n	8006022 <HAL_DMA_Start_IT+0xee>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d155      	bne.n	8006014 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0201 	bic.w	r2, r2, #1
 8005f84:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	68b9      	ldr	r1, [r7, #8]
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 f962 	bl	8006256 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d008      	beq.n	8005fac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f042 020e 	orr.w	r2, r2, #14
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	e00f      	b.n	8005fcc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0204 	bic.w	r2, r2, #4
 8005fba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 020a 	orr.w	r2, r2, #10
 8005fca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d007      	beq.n	8005fea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fe4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fe8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d007      	beq.n	8006002 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ffc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006000:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f042 0201 	orr.w	r2, r2, #1
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	e005      	b.n	8006020 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800601c:	2302      	movs	r3, #2
 800601e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006020:	7dfb      	ldrb	r3, [r7, #23]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d00d      	beq.n	800605e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2204      	movs	r2, #4
 8006046:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	73fb      	strb	r3, [r7, #15]
 800605c:	e047      	b.n	80060ee <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 020e 	bic.w	r2, r2, #14
 800606c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0201 	bic.w	r2, r2, #1
 800607c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006088:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800608c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006092:	f003 021f 	and.w	r2, r3, #31
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609a:	2101      	movs	r1, #1
 800609c:	fa01 f202 	lsl.w	r2, r1, r2
 80060a0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80060aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00c      	beq.n	80060ce <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80060cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	4798      	blx	r3
    }
  }
  return status;
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006114:	f003 031f 	and.w	r3, r3, #31
 8006118:	2204      	movs	r2, #4
 800611a:	409a      	lsls	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4013      	ands	r3, r2
 8006120:	2b00      	cmp	r3, #0
 8006122:	d026      	beq.n	8006172 <HAL_DMA_IRQHandler+0x7a>
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b00      	cmp	r3, #0
 800612c:	d021      	beq.n	8006172 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0320 	and.w	r3, r3, #32
 8006138:	2b00      	cmp	r3, #0
 800613a:	d107      	bne.n	800614c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0204 	bic.w	r2, r2, #4
 800614a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006150:	f003 021f 	and.w	r2, r3, #31
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006158:	2104      	movs	r1, #4
 800615a:	fa01 f202 	lsl.w	r2, r1, r2
 800615e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006164:	2b00      	cmp	r3, #0
 8006166:	d071      	beq.n	800624c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006170:	e06c      	b.n	800624c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006176:	f003 031f 	and.w	r3, r3, #31
 800617a:	2202      	movs	r2, #2
 800617c:	409a      	lsls	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4013      	ands	r3, r2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d02e      	beq.n	80061e4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d029      	beq.n	80061e4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10b      	bne.n	80061b6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 020a 	bic.w	r2, r2, #10
 80061ac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ba:	f003 021f 	and.w	r2, r3, #31
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c2:	2102      	movs	r1, #2
 80061c4:	fa01 f202 	lsl.w	r2, r1, r2
 80061c8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d038      	beq.n	800624c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80061e2:	e033      	b.n	800624c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e8:	f003 031f 	and.w	r3, r3, #31
 80061ec:	2208      	movs	r2, #8
 80061ee:	409a      	lsls	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4013      	ands	r3, r2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d02a      	beq.n	800624e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f003 0308 	and.w	r3, r3, #8
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d025      	beq.n	800624e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 020e 	bic.w	r2, r2, #14
 8006210:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006216:	f003 021f 	and.w	r2, r3, #31
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621e:	2101      	movs	r1, #1
 8006220:	fa01 f202 	lsl.w	r2, r1, r2
 8006224:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006240:	2b00      	cmp	r3, #0
 8006242:	d004      	beq.n	800624e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800624c:	bf00      	nop
 800624e:	bf00      	nop
}
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006256:	b480      	push	{r7}
 8006258:	b085      	sub	sp, #20
 800625a:	af00      	add	r7, sp, #0
 800625c:	60f8      	str	r0, [r7, #12]
 800625e:	60b9      	str	r1, [r7, #8]
 8006260:	607a      	str	r2, [r7, #4]
 8006262:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800626c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006272:	2b00      	cmp	r3, #0
 8006274:	d004      	beq.n	8006280 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800627e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006284:	f003 021f 	and.w	r2, r3, #31
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628c:	2101      	movs	r1, #1
 800628e:	fa01 f202 	lsl.w	r2, r1, r2
 8006292:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	2b10      	cmp	r3, #16
 80062a2:	d108      	bne.n	80062b6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80062b4:	e007      	b.n	80062c6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	60da      	str	r2, [r3, #12]
}
 80062c6:	bf00      	nop
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
	...

080062d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	461a      	mov	r2, r3
 80062e2:	4b16      	ldr	r3, [pc, #88]	@ (800633c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d802      	bhi.n	80062ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80062e8:	4b15      	ldr	r3, [pc, #84]	@ (8006340 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	e001      	b.n	80062f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80062ee:	4b15      	ldr	r3, [pc, #84]	@ (8006344 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80062f0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	3b08      	subs	r3, #8
 80062fe:	4a12      	ldr	r2, [pc, #72]	@ (8006348 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006300:	fba2 2303 	umull	r2, r3, r2, r3
 8006304:	091b      	lsrs	r3, r3, #4
 8006306:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800630c:	089b      	lsrs	r3, r3, #2
 800630e:	009a      	lsls	r2, r3, #2
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	4413      	add	r3, r2
 8006314:	461a      	mov	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a0b      	ldr	r2, [pc, #44]	@ (800634c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800631e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f003 031f 	and.w	r3, r3, #31
 8006326:	2201      	movs	r2, #1
 8006328:	409a      	lsls	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800632e:	bf00      	nop
 8006330:	371c      	adds	r7, #28
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	40020407 	.word	0x40020407
 8006340:	40020800 	.word	0x40020800
 8006344:	40020820 	.word	0x40020820
 8006348:	cccccccd 	.word	0xcccccccd
 800634c:	40020880 	.word	0x40020880

08006350 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4b0b      	ldr	r3, [pc, #44]	@ (8006390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006364:	4413      	add	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	461a      	mov	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a08      	ldr	r2, [pc, #32]	@ (8006394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006372:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3b01      	subs	r3, #1
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	2201      	movs	r2, #1
 800637e:	409a      	lsls	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006384:	bf00      	nop
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	1000823f 	.word	0x1000823f
 8006394:	40020940 	.word	0x40020940

08006398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80063a6:	e15a      	b.n	800665e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	2101      	movs	r1, #1
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	fa01 f303 	lsl.w	r3, r1, r3
 80063b4:	4013      	ands	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 814c 	beq.w	8006658 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f003 0303 	and.w	r3, r3, #3
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d005      	beq.n	80063d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d130      	bne.n	800643a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	2203      	movs	r2, #3
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	43db      	mvns	r3, r3
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4013      	ands	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	68da      	ldr	r2, [r3, #12]
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	fa02 f303 	lsl.w	r3, r2, r3
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800640e:	2201      	movs	r2, #1
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	43db      	mvns	r3, r3
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	4013      	ands	r3, r2
 800641c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	091b      	lsrs	r3, r3, #4
 8006424:	f003 0201 	and.w	r2, r3, #1
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	fa02 f303 	lsl.w	r3, r2, r3
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	4313      	orrs	r3, r2
 8006432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	2b03      	cmp	r3, #3
 8006444:	d017      	beq.n	8006476 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	2203      	movs	r2, #3
 8006452:	fa02 f303 	lsl.w	r3, r2, r3
 8006456:	43db      	mvns	r3, r3
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4013      	ands	r3, r2
 800645c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	689a      	ldr	r2, [r3, #8]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	fa02 f303 	lsl.w	r3, r2, r3
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	4313      	orrs	r3, r2
 800646e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d123      	bne.n	80064ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	08da      	lsrs	r2, r3, #3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	3208      	adds	r2, #8
 800648a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800648e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f003 0307 	and.w	r3, r3, #7
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	220f      	movs	r2, #15
 800649a:	fa02 f303 	lsl.w	r3, r2, r3
 800649e:	43db      	mvns	r3, r3
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	4013      	ands	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	691a      	ldr	r2, [r3, #16]
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	fa02 f303 	lsl.w	r3, r2, r3
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	08da      	lsrs	r2, r3, #3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	3208      	adds	r2, #8
 80064c4:	6939      	ldr	r1, [r7, #16]
 80064c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	2203      	movs	r2, #3
 80064d6:	fa02 f303 	lsl.w	r3, r2, r3
 80064da:	43db      	mvns	r3, r3
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4013      	ands	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f003 0203 	and.w	r2, r3, #3
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 80a6 	beq.w	8006658 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800650c:	4b5b      	ldr	r3, [pc, #364]	@ (800667c <HAL_GPIO_Init+0x2e4>)
 800650e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006510:	4a5a      	ldr	r2, [pc, #360]	@ (800667c <HAL_GPIO_Init+0x2e4>)
 8006512:	f043 0301 	orr.w	r3, r3, #1
 8006516:	6613      	str	r3, [r2, #96]	@ 0x60
 8006518:	4b58      	ldr	r3, [pc, #352]	@ (800667c <HAL_GPIO_Init+0x2e4>)
 800651a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	60bb      	str	r3, [r7, #8]
 8006522:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006524:	4a56      	ldr	r2, [pc, #344]	@ (8006680 <HAL_GPIO_Init+0x2e8>)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	089b      	lsrs	r3, r3, #2
 800652a:	3302      	adds	r3, #2
 800652c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006530:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f003 0303 	and.w	r3, r3, #3
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	220f      	movs	r2, #15
 800653c:	fa02 f303 	lsl.w	r3, r2, r3
 8006540:	43db      	mvns	r3, r3
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4013      	ands	r3, r2
 8006546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800654e:	d01f      	beq.n	8006590 <HAL_GPIO_Init+0x1f8>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a4c      	ldr	r2, [pc, #304]	@ (8006684 <HAL_GPIO_Init+0x2ec>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d019      	beq.n	800658c <HAL_GPIO_Init+0x1f4>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a4b      	ldr	r2, [pc, #300]	@ (8006688 <HAL_GPIO_Init+0x2f0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d013      	beq.n	8006588 <HAL_GPIO_Init+0x1f0>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a4a      	ldr	r2, [pc, #296]	@ (800668c <HAL_GPIO_Init+0x2f4>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00d      	beq.n	8006584 <HAL_GPIO_Init+0x1ec>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a49      	ldr	r2, [pc, #292]	@ (8006690 <HAL_GPIO_Init+0x2f8>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d007      	beq.n	8006580 <HAL_GPIO_Init+0x1e8>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a48      	ldr	r2, [pc, #288]	@ (8006694 <HAL_GPIO_Init+0x2fc>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d101      	bne.n	800657c <HAL_GPIO_Init+0x1e4>
 8006578:	2305      	movs	r3, #5
 800657a:	e00a      	b.n	8006592 <HAL_GPIO_Init+0x1fa>
 800657c:	2306      	movs	r3, #6
 800657e:	e008      	b.n	8006592 <HAL_GPIO_Init+0x1fa>
 8006580:	2304      	movs	r3, #4
 8006582:	e006      	b.n	8006592 <HAL_GPIO_Init+0x1fa>
 8006584:	2303      	movs	r3, #3
 8006586:	e004      	b.n	8006592 <HAL_GPIO_Init+0x1fa>
 8006588:	2302      	movs	r3, #2
 800658a:	e002      	b.n	8006592 <HAL_GPIO_Init+0x1fa>
 800658c:	2301      	movs	r3, #1
 800658e:	e000      	b.n	8006592 <HAL_GPIO_Init+0x1fa>
 8006590:	2300      	movs	r3, #0
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	f002 0203 	and.w	r2, r2, #3
 8006598:	0092      	lsls	r2, r2, #2
 800659a:	4093      	lsls	r3, r2
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065a2:	4937      	ldr	r1, [pc, #220]	@ (8006680 <HAL_GPIO_Init+0x2e8>)
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	089b      	lsrs	r3, r3, #2
 80065a8:	3302      	adds	r3, #2
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80065b0:	4b39      	ldr	r3, [pc, #228]	@ (8006698 <HAL_GPIO_Init+0x300>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	43db      	mvns	r3, r3
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	4013      	ands	r3, r2
 80065be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80065d4:	4a30      	ldr	r2, [pc, #192]	@ (8006698 <HAL_GPIO_Init+0x300>)
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80065da:	4b2f      	ldr	r3, [pc, #188]	@ (8006698 <HAL_GPIO_Init+0x300>)
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	43db      	mvns	r3, r3
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	4013      	ands	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80065fe:	4a26      	ldr	r2, [pc, #152]	@ (8006698 <HAL_GPIO_Init+0x300>)
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006604:	4b24      	ldr	r3, [pc, #144]	@ (8006698 <HAL_GPIO_Init+0x300>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	43db      	mvns	r3, r3
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	4013      	ands	r3, r2
 8006612:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006628:	4a1b      	ldr	r2, [pc, #108]	@ (8006698 <HAL_GPIO_Init+0x300>)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800662e:	4b1a      	ldr	r3, [pc, #104]	@ (8006698 <HAL_GPIO_Init+0x300>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	43db      	mvns	r3, r3
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4013      	ands	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4313      	orrs	r3, r2
 8006650:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006652:	4a11      	ldr	r2, [pc, #68]	@ (8006698 <HAL_GPIO_Init+0x300>)
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	3301      	adds	r3, #1
 800665c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	fa22 f303 	lsr.w	r3, r2, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	f47f ae9d 	bne.w	80063a8 <HAL_GPIO_Init+0x10>
  }
}
 800666e:	bf00      	nop
 8006670:	bf00      	nop
 8006672:	371c      	adds	r7, #28
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	40021000 	.word	0x40021000
 8006680:	40010000 	.word	0x40010000
 8006684:	48000400 	.word	0x48000400
 8006688:	48000800 	.word	0x48000800
 800668c:	48000c00 	.word	0x48000c00
 8006690:	48001000 	.word	0x48001000
 8006694:	48001400 	.word	0x48001400
 8006698:	40010400 	.word	0x40010400

0800669c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691a      	ldr	r2, [r3, #16]
 80066ac:	887b      	ldrh	r3, [r7, #2]
 80066ae:	4013      	ands	r3, r2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80066b4:	2301      	movs	r3, #1
 80066b6:	73fb      	strb	r3, [r7, #15]
 80066b8:	e001      	b.n	80066be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80066ba:	2300      	movs	r3, #0
 80066bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80066be:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	807b      	strh	r3, [r7, #2]
 80066d8:	4613      	mov	r3, r2
 80066da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80066dc:	787b      	ldrb	r3, [r7, #1]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80066e2:	887a      	ldrh	r2, [r7, #2]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80066e8:	e002      	b.n	80066f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80066ea:	887a      	ldrh	r2, [r7, #2]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e08d      	b.n	800682a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d106      	bne.n	8006728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7fa ff1c 	bl	8001560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2224      	movs	r2, #36	@ 0x24
 800672c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0201 	bic.w	r2, r2, #1
 800673e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800674c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	689a      	ldr	r2, [r3, #8]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800675c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d107      	bne.n	8006776 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006772:	609a      	str	r2, [r3, #8]
 8006774:	e006      	b.n	8006784 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006782:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	2b02      	cmp	r3, #2
 800678a:	d108      	bne.n	800679e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800679a:	605a      	str	r2, [r3, #4]
 800679c:	e007      	b.n	80067ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	6812      	ldr	r2, [r2, #0]
 80067b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80067bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68da      	ldr	r2, [r3, #12]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80067d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691a      	ldr	r2, [r3, #16]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	69d9      	ldr	r1, [r3, #28]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a1a      	ldr	r2, [r3, #32]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0201 	orr.w	r2, r2, #1
 800680a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2220      	movs	r2, #32
 8006816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
	...

08006834 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b088      	sub	sp, #32
 8006838:	af02      	add	r7, sp, #8
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	607a      	str	r2, [r7, #4]
 800683e:	461a      	mov	r2, r3
 8006840:	460b      	mov	r3, r1
 8006842:	817b      	strh	r3, [r7, #10]
 8006844:	4613      	mov	r3, r2
 8006846:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b20      	cmp	r3, #32
 8006852:	f040 80fd 	bne.w	8006a50 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800685c:	2b01      	cmp	r3, #1
 800685e:	d101      	bne.n	8006864 <HAL_I2C_Master_Transmit+0x30>
 8006860:	2302      	movs	r3, #2
 8006862:	e0f6      	b.n	8006a52 <HAL_I2C_Master_Transmit+0x21e>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800686c:	f7fd fbb2 	bl	8003fd4 <HAL_GetTick>
 8006870:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	2319      	movs	r3, #25
 8006878:	2201      	movs	r2, #1
 800687a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f000 f914 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e0e1      	b.n	8006a52 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2221      	movs	r2, #33	@ 0x21
 8006892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2210      	movs	r2, #16
 800689a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	893a      	ldrh	r2, [r7, #8]
 80068ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	2bff      	cmp	r3, #255	@ 0xff
 80068be:	d906      	bls.n	80068ce <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	22ff      	movs	r2, #255	@ 0xff
 80068c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80068c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	e007      	b.n	80068de <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80068d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80068dc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d024      	beq.n	8006930 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ea:	781a      	ldrb	r2, [r3, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006900:	b29b      	uxth	r3, r3
 8006902:	3b01      	subs	r3, #1
 8006904:	b29a      	uxth	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800690e:	3b01      	subs	r3, #1
 8006910:	b29a      	uxth	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800691a:	b2db      	uxtb	r3, r3
 800691c:	3301      	adds	r3, #1
 800691e:	b2da      	uxtb	r2, r3
 8006920:	8979      	ldrh	r1, [r7, #10]
 8006922:	4b4e      	ldr	r3, [pc, #312]	@ (8006a5c <HAL_I2C_Master_Transmit+0x228>)
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 fa83 	bl	8006e34 <I2C_TransferConfig>
 800692e:	e066      	b.n	80069fe <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006934:	b2da      	uxtb	r2, r3
 8006936:	8979      	ldrh	r1, [r7, #10]
 8006938:	4b48      	ldr	r3, [pc, #288]	@ (8006a5c <HAL_I2C_Master_Transmit+0x228>)
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 fa78 	bl	8006e34 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006944:	e05b      	b.n	80069fe <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	6a39      	ldr	r1, [r7, #32]
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 f907 	bl	8006b5e <I2C_WaitOnTXISFlagUntilTimeout>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e07b      	b.n	8006a52 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695e:	781a      	ldrb	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006974:	b29b      	uxth	r3, r3
 8006976:	3b01      	subs	r3, #1
 8006978:	b29a      	uxth	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006982:	3b01      	subs	r3, #1
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800698e:	b29b      	uxth	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	d034      	beq.n	80069fe <HAL_I2C_Master_Transmit+0x1ca>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006998:	2b00      	cmp	r3, #0
 800699a:	d130      	bne.n	80069fe <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	6a3b      	ldr	r3, [r7, #32]
 80069a2:	2200      	movs	r2, #0
 80069a4:	2180      	movs	r1, #128	@ 0x80
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 f880 	bl	8006aac <I2C_WaitOnFlagUntilTimeout>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e04d      	b.n	8006a52 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2bff      	cmp	r3, #255	@ 0xff
 80069be:	d90e      	bls.n	80069de <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	22ff      	movs	r2, #255	@ 0xff
 80069c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	8979      	ldrh	r1, [r7, #10]
 80069ce:	2300      	movs	r3, #0
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 fa2c 	bl	8006e34 <I2C_TransferConfig>
 80069dc:	e00f      	b.n	80069fe <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	8979      	ldrh	r1, [r7, #10]
 80069f0:	2300      	movs	r3, #0
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 fa1b 	bl	8006e34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d19e      	bne.n	8006946 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	6a39      	ldr	r1, [r7, #32]
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 f8ed 	bl	8006bec <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e01a      	b.n	8006a52 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2220      	movs	r2, #32
 8006a22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6859      	ldr	r1, [r3, #4]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006a60 <HAL_I2C_Master_Transmit+0x22c>)
 8006a30:	400b      	ands	r3, r1
 8006a32:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	e000      	b.n	8006a52 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006a50:	2302      	movs	r3, #2
  }
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	80002000 	.word	0x80002000
 8006a60:	fe00e800 	.word	0xfe00e800

08006a64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d103      	bne.n	8006a82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d007      	beq.n	8006aa0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699a      	ldr	r2, [r3, #24]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0201 	orr.w	r2, r2, #1
 8006a9e:	619a      	str	r2, [r3, #24]
  }
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	603b      	str	r3, [r7, #0]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006abc:	e03b      	b.n	8006b36 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006abe:	69ba      	ldr	r2, [r7, #24]
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 f8d6 	bl	8006c74 <I2C_IsErrorOccurred>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e041      	b.n	8006b56 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad8:	d02d      	beq.n	8006b36 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ada:	f7fd fa7b 	bl	8003fd4 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d302      	bcc.n	8006af0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d122      	bne.n	8006b36 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	699a      	ldr	r2, [r3, #24]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	4013      	ands	r3, r2
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	bf0c      	ite	eq
 8006b00:	2301      	moveq	r3, #1
 8006b02:	2300      	movne	r3, #0
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	461a      	mov	r2, r3
 8006b08:	79fb      	ldrb	r3, [r7, #7]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d113      	bne.n	8006b36 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b12:	f043 0220 	orr.w	r2, r3, #32
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e00f      	b.n	8006b56 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	699a      	ldr	r2, [r3, #24]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	4013      	ands	r3, r2
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	bf0c      	ite	eq
 8006b46:	2301      	moveq	r3, #1
 8006b48:	2300      	movne	r3, #0
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	79fb      	ldrb	r3, [r7, #7]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d0b4      	beq.n	8006abe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b084      	sub	sp, #16
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	60f8      	str	r0, [r7, #12]
 8006b66:	60b9      	str	r1, [r7, #8]
 8006b68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b6a:	e033      	b.n	8006bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	68b9      	ldr	r1, [r7, #8]
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 f87f 	bl	8006c74 <I2C_IsErrorOccurred>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e031      	b.n	8006be4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b86:	d025      	beq.n	8006bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b88:	f7fd fa24 	bl	8003fd4 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d302      	bcc.n	8006b9e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d11a      	bne.n	8006bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d013      	beq.n	8006bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb0:	f043 0220 	orr.w	r2, r3, #32
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e007      	b.n	8006be4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d1c4      	bne.n	8006b6c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bf8:	e02f      	b.n	8006c5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	68b9      	ldr	r1, [r7, #8]
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f000 f838 	bl	8006c74 <I2C_IsErrorOccurred>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e02d      	b.n	8006c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c0e:	f7fd f9e1 	bl	8003fd4 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d302      	bcc.n	8006c24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d11a      	bne.n	8006c5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	f003 0320 	and.w	r3, r3, #32
 8006c2e:	2b20      	cmp	r3, #32
 8006c30:	d013      	beq.n	8006c5a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c36:	f043 0220 	orr.w	r2, r3, #32
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e007      	b.n	8006c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	f003 0320 	and.w	r3, r3, #32
 8006c64:	2b20      	cmp	r3, #32
 8006c66:	d1c8      	bne.n	8006bfa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08a      	sub	sp, #40	@ 0x28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c80:	2300      	movs	r3, #0
 8006c82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	f003 0310 	and.w	r3, r3, #16
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d068      	beq.n	8006d72 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2210      	movs	r2, #16
 8006ca6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ca8:	e049      	b.n	8006d3e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb0:	d045      	beq.n	8006d3e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006cb2:	f7fd f98f 	bl	8003fd4 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d302      	bcc.n	8006cc8 <I2C_IsErrorOccurred+0x54>
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d13a      	bne.n	8006d3e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cd2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006cda:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ce6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cea:	d121      	bne.n	8006d30 <I2C_IsErrorOccurred+0xbc>
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cf2:	d01d      	beq.n	8006d30 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006cf4:	7cfb      	ldrb	r3, [r7, #19]
 8006cf6:	2b20      	cmp	r3, #32
 8006cf8:	d01a      	beq.n	8006d30 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006d0a:	f7fd f963 	bl	8003fd4 <HAL_GetTick>
 8006d0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d10:	e00e      	b.n	8006d30 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006d12:	f7fd f95f 	bl	8003fd4 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b19      	cmp	r3, #25
 8006d1e:	d907      	bls.n	8006d30 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	f043 0320 	orr.w	r3, r3, #32
 8006d26:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006d2e:	e006      	b.n	8006d3e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	f003 0320 	and.w	r3, r3, #32
 8006d3a:	2b20      	cmp	r3, #32
 8006d3c:	d1e9      	bne.n	8006d12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	d003      	beq.n	8006d54 <I2C_IsErrorOccurred+0xe0>
 8006d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d0aa      	beq.n	8006caa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006d54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d103      	bne.n	8006d64 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2220      	movs	r2, #32
 8006d62:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	f043 0304 	orr.w	r3, r3, #4
 8006d6a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00b      	beq.n	8006d9c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	f043 0301 	orr.w	r3, r3, #1
 8006d8a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00b      	beq.n	8006dbe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	f043 0308 	orr.w	r3, r3, #8
 8006dac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006db6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00b      	beq.n	8006de0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	f043 0302 	orr.w	r3, r3, #2
 8006dce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006de0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d01c      	beq.n	8006e22 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f7ff fe3b 	bl	8006a64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6859      	ldr	r1, [r3, #4]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	4b0d      	ldr	r3, [pc, #52]	@ (8006e30 <I2C_IsErrorOccurred+0x1bc>)
 8006dfa:	400b      	ands	r3, r1
 8006dfc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	431a      	orrs	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006e22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3728      	adds	r7, #40	@ 0x28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	fe00e800 	.word	0xfe00e800

08006e34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	607b      	str	r3, [r7, #4]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	817b      	strh	r3, [r7, #10]
 8006e42:	4613      	mov	r3, r2
 8006e44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e46:	897b      	ldrh	r3, [r7, #10]
 8006e48:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e4c:	7a7b      	ldrb	r3, [r7, #9]
 8006e4e:	041b      	lsls	r3, r3, #16
 8006e50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e54:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e62:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	0d5b      	lsrs	r3, r3, #21
 8006e6e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006e72:	4b08      	ldr	r3, [pc, #32]	@ (8006e94 <I2C_TransferConfig+0x60>)
 8006e74:	430b      	orrs	r3, r1
 8006e76:	43db      	mvns	r3, r3
 8006e78:	ea02 0103 	and.w	r1, r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006e86:	bf00      	nop
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	03ff63ff 	.word	0x03ff63ff

08006e98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b20      	cmp	r3, #32
 8006eac:	d138      	bne.n	8006f20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d101      	bne.n	8006ebc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006eb8:	2302      	movs	r3, #2
 8006eba:	e032      	b.n	8006f22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2224      	movs	r2, #36	@ 0x24
 8006ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f022 0201 	bic.w	r2, r2, #1
 8006eda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006eea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6819      	ldr	r1, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0201 	orr.w	r2, r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	e000      	b.n	8006f22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f20:	2302      	movs	r3, #2
  }
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b085      	sub	sp, #20
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d139      	bne.n	8006fb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d101      	bne.n	8006f52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e033      	b.n	8006fba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2224      	movs	r2, #36	@ 0x24
 8006f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0201 	bic.w	r2, r2, #1
 8006f70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006f80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	021b      	lsls	r3, r3, #8
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0201 	orr.w	r2, r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	e000      	b.n	8006fba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006fb8:	2302      	movs	r3, #2
  }
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
	...

08006fc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d141      	bne.n	800705a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006fd6:	4b4b      	ldr	r3, [pc, #300]	@ (8007104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fe2:	d131      	bne.n	8007048 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006fe4:	4b47      	ldr	r3, [pc, #284]	@ (8007104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fea:	4a46      	ldr	r2, [pc, #280]	@ (8007104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ff0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ff4:	4b43      	ldr	r3, [pc, #268]	@ (8007104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ffc:	4a41      	ldr	r2, [pc, #260]	@ (8007104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ffe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007002:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007004:	4b40      	ldr	r3, [pc, #256]	@ (8007108 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2232      	movs	r2, #50	@ 0x32
 800700a:	fb02 f303 	mul.w	r3, r2, r3
 800700e:	4a3f      	ldr	r2, [pc, #252]	@ (800710c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007010:	fba2 2303 	umull	r2, r3, r2, r3
 8007014:	0c9b      	lsrs	r3, r3, #18
 8007016:	3301      	adds	r3, #1
 8007018:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800701a:	e002      	b.n	8007022 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3b01      	subs	r3, #1
 8007020:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007022:	4b38      	ldr	r3, [pc, #224]	@ (8007104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800702a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800702e:	d102      	bne.n	8007036 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1f2      	bne.n	800701c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007036:	4b33      	ldr	r3, [pc, #204]	@ (8007104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800703e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007042:	d158      	bne.n	80070f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e057      	b.n	80070f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007048:	4b2e      	ldr	r3, [pc, #184]	@ (8007104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800704a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800704e:	4a2d      	ldr	r2, [pc, #180]	@ (8007104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007054:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007058:	e04d      	b.n	80070f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007060:	d141      	bne.n	80070e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007062:	4b28      	ldr	r3, [pc, #160]	@ (8007104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800706a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800706e:	d131      	bne.n	80070d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007070:	4b24      	ldr	r3, [pc, #144]	@ (8007104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007076:	4a23      	ldr	r2, [pc, #140]	@ (8007104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800707c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007080:	4b20      	ldr	r3, [pc, #128]	@ (8007104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007088:	4a1e      	ldr	r2, [pc, #120]	@ (8007104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800708a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800708e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007090:	4b1d      	ldr	r3, [pc, #116]	@ (8007108 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2232      	movs	r2, #50	@ 0x32
 8007096:	fb02 f303 	mul.w	r3, r2, r3
 800709a:	4a1c      	ldr	r2, [pc, #112]	@ (800710c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800709c:	fba2 2303 	umull	r2, r3, r2, r3
 80070a0:	0c9b      	lsrs	r3, r3, #18
 80070a2:	3301      	adds	r3, #1
 80070a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070a6:	e002      	b.n	80070ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070ae:	4b15      	ldr	r3, [pc, #84]	@ (8007104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ba:	d102      	bne.n	80070c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1f2      	bne.n	80070a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80070c2:	4b10      	ldr	r3, [pc, #64]	@ (8007104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ce:	d112      	bne.n	80070f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e011      	b.n	80070f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80070d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070da:	4a0a      	ldr	r2, [pc, #40]	@ (8007104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80070e4:	e007      	b.n	80070f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80070e6:	4b07      	ldr	r3, [pc, #28]	@ (8007104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80070ee:	4a05      	ldr	r2, [pc, #20]	@ (8007104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80070f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	40007000 	.word	0x40007000
 8007108:	20000018 	.word	0x20000018
 800710c:	431bde83 	.word	0x431bde83

08007110 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007110:	b480      	push	{r7}
 8007112:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007114:	4b05      	ldr	r3, [pc, #20]	@ (800712c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	4a04      	ldr	r2, [pc, #16]	@ (800712c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800711a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800711e:	6093      	str	r3, [r2, #8]
}
 8007120:	bf00      	nop
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	40007000 	.word	0x40007000

08007130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b088      	sub	sp, #32
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e2fe      	b.n	8007740 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d075      	beq.n	800723a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800714e:	4b97      	ldr	r3, [pc, #604]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f003 030c 	and.w	r3, r3, #12
 8007156:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007158:	4b94      	ldr	r3, [pc, #592]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f003 0303 	and.w	r3, r3, #3
 8007160:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	2b0c      	cmp	r3, #12
 8007166:	d102      	bne.n	800716e <HAL_RCC_OscConfig+0x3e>
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	2b03      	cmp	r3, #3
 800716c:	d002      	beq.n	8007174 <HAL_RCC_OscConfig+0x44>
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	2b08      	cmp	r3, #8
 8007172:	d10b      	bne.n	800718c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007174:	4b8d      	ldr	r3, [pc, #564]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d05b      	beq.n	8007238 <HAL_RCC_OscConfig+0x108>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d157      	bne.n	8007238 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e2d9      	b.n	8007740 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007194:	d106      	bne.n	80071a4 <HAL_RCC_OscConfig+0x74>
 8007196:	4b85      	ldr	r3, [pc, #532]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a84      	ldr	r2, [pc, #528]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 800719c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	e01d      	b.n	80071e0 <HAL_RCC_OscConfig+0xb0>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071ac:	d10c      	bne.n	80071c8 <HAL_RCC_OscConfig+0x98>
 80071ae:	4b7f      	ldr	r3, [pc, #508]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a7e      	ldr	r2, [pc, #504]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 80071b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071b8:	6013      	str	r3, [r2, #0]
 80071ba:	4b7c      	ldr	r3, [pc, #496]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a7b      	ldr	r2, [pc, #492]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 80071c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071c4:	6013      	str	r3, [r2, #0]
 80071c6:	e00b      	b.n	80071e0 <HAL_RCC_OscConfig+0xb0>
 80071c8:	4b78      	ldr	r3, [pc, #480]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a77      	ldr	r2, [pc, #476]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 80071ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071d2:	6013      	str	r3, [r2, #0]
 80071d4:	4b75      	ldr	r3, [pc, #468]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a74      	ldr	r2, [pc, #464]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 80071da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d013      	beq.n	8007210 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e8:	f7fc fef4 	bl	8003fd4 <HAL_GetTick>
 80071ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071ee:	e008      	b.n	8007202 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071f0:	f7fc fef0 	bl	8003fd4 <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	2b64      	cmp	r3, #100	@ 0x64
 80071fc:	d901      	bls.n	8007202 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e29e      	b.n	8007740 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007202:	4b6a      	ldr	r3, [pc, #424]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d0f0      	beq.n	80071f0 <HAL_RCC_OscConfig+0xc0>
 800720e:	e014      	b.n	800723a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007210:	f7fc fee0 	bl	8003fd4 <HAL_GetTick>
 8007214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007216:	e008      	b.n	800722a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007218:	f7fc fedc 	bl	8003fd4 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b64      	cmp	r3, #100	@ 0x64
 8007224:	d901      	bls.n	800722a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e28a      	b.n	8007740 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800722a:	4b60      	ldr	r3, [pc, #384]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1f0      	bne.n	8007218 <HAL_RCC_OscConfig+0xe8>
 8007236:	e000      	b.n	800723a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d075      	beq.n	8007332 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007246:	4b59      	ldr	r3, [pc, #356]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f003 030c 	and.w	r3, r3, #12
 800724e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007250:	4b56      	ldr	r3, [pc, #344]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f003 0303 	and.w	r3, r3, #3
 8007258:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	2b0c      	cmp	r3, #12
 800725e:	d102      	bne.n	8007266 <HAL_RCC_OscConfig+0x136>
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d002      	beq.n	800726c <HAL_RCC_OscConfig+0x13c>
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	2b04      	cmp	r3, #4
 800726a:	d11f      	bne.n	80072ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800726c:	4b4f      	ldr	r3, [pc, #316]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007274:	2b00      	cmp	r3, #0
 8007276:	d005      	beq.n	8007284 <HAL_RCC_OscConfig+0x154>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e25d      	b.n	8007740 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007284:	4b49      	ldr	r3, [pc, #292]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	061b      	lsls	r3, r3, #24
 8007292:	4946      	ldr	r1, [pc, #280]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 8007294:	4313      	orrs	r3, r2
 8007296:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007298:	4b45      	ldr	r3, [pc, #276]	@ (80073b0 <HAL_RCC_OscConfig+0x280>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4618      	mov	r0, r3
 800729e:	f7fc fe4d 	bl	8003f3c <HAL_InitTick>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d043      	beq.n	8007330 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e249      	b.n	8007740 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d023      	beq.n	80072fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072b4:	4b3d      	ldr	r3, [pc, #244]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a3c      	ldr	r2, [pc, #240]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 80072ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c0:	f7fc fe88 	bl	8003fd4 <HAL_GetTick>
 80072c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072c6:	e008      	b.n	80072da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072c8:	f7fc fe84 	bl	8003fd4 <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d901      	bls.n	80072da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e232      	b.n	8007740 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072da:	4b34      	ldr	r3, [pc, #208]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d0f0      	beq.n	80072c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072e6:	4b31      	ldr	r3, [pc, #196]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	061b      	lsls	r3, r3, #24
 80072f4:	492d      	ldr	r1, [pc, #180]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	604b      	str	r3, [r1, #4]
 80072fa:	e01a      	b.n	8007332 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072fc:	4b2b      	ldr	r3, [pc, #172]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a2a      	ldr	r2, [pc, #168]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 8007302:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007308:	f7fc fe64 	bl	8003fd4 <HAL_GetTick>
 800730c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800730e:	e008      	b.n	8007322 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007310:	f7fc fe60 	bl	8003fd4 <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	2b02      	cmp	r3, #2
 800731c:	d901      	bls.n	8007322 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e20e      	b.n	8007740 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007322:	4b22      	ldr	r3, [pc, #136]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1f0      	bne.n	8007310 <HAL_RCC_OscConfig+0x1e0>
 800732e:	e000      	b.n	8007332 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007330:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0308 	and.w	r3, r3, #8
 800733a:	2b00      	cmp	r3, #0
 800733c:	d041      	beq.n	80073c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d01c      	beq.n	8007380 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007346:	4b19      	ldr	r3, [pc, #100]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 8007348:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800734c:	4a17      	ldr	r2, [pc, #92]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 800734e:	f043 0301 	orr.w	r3, r3, #1
 8007352:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007356:	f7fc fe3d 	bl	8003fd4 <HAL_GetTick>
 800735a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800735c:	e008      	b.n	8007370 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800735e:	f7fc fe39 	bl	8003fd4 <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	2b02      	cmp	r3, #2
 800736a:	d901      	bls.n	8007370 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e1e7      	b.n	8007740 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007370:	4b0e      	ldr	r3, [pc, #56]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 8007372:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0ef      	beq.n	800735e <HAL_RCC_OscConfig+0x22e>
 800737e:	e020      	b.n	80073c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007380:	4b0a      	ldr	r3, [pc, #40]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 8007382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007386:	4a09      	ldr	r2, [pc, #36]	@ (80073ac <HAL_RCC_OscConfig+0x27c>)
 8007388:	f023 0301 	bic.w	r3, r3, #1
 800738c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007390:	f7fc fe20 	bl	8003fd4 <HAL_GetTick>
 8007394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007396:	e00d      	b.n	80073b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007398:	f7fc fe1c 	bl	8003fd4 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d906      	bls.n	80073b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e1ca      	b.n	8007740 <HAL_RCC_OscConfig+0x610>
 80073aa:	bf00      	nop
 80073ac:	40021000 	.word	0x40021000
 80073b0:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073b4:	4b8c      	ldr	r3, [pc, #560]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 80073b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1ea      	bne.n	8007398 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0304 	and.w	r3, r3, #4
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 80a6 	beq.w	800751c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073d0:	2300      	movs	r3, #0
 80073d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80073d4:	4b84      	ldr	r3, [pc, #528]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 80073d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <HAL_RCC_OscConfig+0x2b4>
 80073e0:	2301      	movs	r3, #1
 80073e2:	e000      	b.n	80073e6 <HAL_RCC_OscConfig+0x2b6>
 80073e4:	2300      	movs	r3, #0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00d      	beq.n	8007406 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073ea:	4b7f      	ldr	r3, [pc, #508]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 80073ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ee:	4a7e      	ldr	r2, [pc, #504]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 80073f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80073f6:	4b7c      	ldr	r3, [pc, #496]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 80073f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007402:	2301      	movs	r3, #1
 8007404:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007406:	4b79      	ldr	r3, [pc, #484]	@ (80075ec <HAL_RCC_OscConfig+0x4bc>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800740e:	2b00      	cmp	r3, #0
 8007410:	d118      	bne.n	8007444 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007412:	4b76      	ldr	r3, [pc, #472]	@ (80075ec <HAL_RCC_OscConfig+0x4bc>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a75      	ldr	r2, [pc, #468]	@ (80075ec <HAL_RCC_OscConfig+0x4bc>)
 8007418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800741c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800741e:	f7fc fdd9 	bl	8003fd4 <HAL_GetTick>
 8007422:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007424:	e008      	b.n	8007438 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007426:	f7fc fdd5 	bl	8003fd4 <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	2b02      	cmp	r3, #2
 8007432:	d901      	bls.n	8007438 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e183      	b.n	8007740 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007438:	4b6c      	ldr	r3, [pc, #432]	@ (80075ec <HAL_RCC_OscConfig+0x4bc>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007440:	2b00      	cmp	r3, #0
 8007442:	d0f0      	beq.n	8007426 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d108      	bne.n	800745e <HAL_RCC_OscConfig+0x32e>
 800744c:	4b66      	ldr	r3, [pc, #408]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 800744e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007452:	4a65      	ldr	r2, [pc, #404]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 8007454:	f043 0301 	orr.w	r3, r3, #1
 8007458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800745c:	e024      	b.n	80074a8 <HAL_RCC_OscConfig+0x378>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	2b05      	cmp	r3, #5
 8007464:	d110      	bne.n	8007488 <HAL_RCC_OscConfig+0x358>
 8007466:	4b60      	ldr	r3, [pc, #384]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 8007468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800746c:	4a5e      	ldr	r2, [pc, #376]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 800746e:	f043 0304 	orr.w	r3, r3, #4
 8007472:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007476:	4b5c      	ldr	r3, [pc, #368]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 8007478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800747c:	4a5a      	ldr	r2, [pc, #360]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 800747e:	f043 0301 	orr.w	r3, r3, #1
 8007482:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007486:	e00f      	b.n	80074a8 <HAL_RCC_OscConfig+0x378>
 8007488:	4b57      	ldr	r3, [pc, #348]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 800748a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800748e:	4a56      	ldr	r2, [pc, #344]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 8007490:	f023 0301 	bic.w	r3, r3, #1
 8007494:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007498:	4b53      	ldr	r3, [pc, #332]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 800749a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800749e:	4a52      	ldr	r2, [pc, #328]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 80074a0:	f023 0304 	bic.w	r3, r3, #4
 80074a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d016      	beq.n	80074de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074b0:	f7fc fd90 	bl	8003fd4 <HAL_GetTick>
 80074b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074b6:	e00a      	b.n	80074ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074b8:	f7fc fd8c 	bl	8003fd4 <HAL_GetTick>
 80074bc:	4602      	mov	r2, r0
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d901      	bls.n	80074ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e138      	b.n	8007740 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074ce:	4b46      	ldr	r3, [pc, #280]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 80074d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d4:	f003 0302 	and.w	r3, r3, #2
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d0ed      	beq.n	80074b8 <HAL_RCC_OscConfig+0x388>
 80074dc:	e015      	b.n	800750a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074de:	f7fc fd79 	bl	8003fd4 <HAL_GetTick>
 80074e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80074e4:	e00a      	b.n	80074fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074e6:	f7fc fd75 	bl	8003fd4 <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d901      	bls.n	80074fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e121      	b.n	8007740 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80074fc:	4b3a      	ldr	r3, [pc, #232]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 80074fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1ed      	bne.n	80074e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800750a:	7ffb      	ldrb	r3, [r7, #31]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d105      	bne.n	800751c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007510:	4b35      	ldr	r3, [pc, #212]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 8007512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007514:	4a34      	ldr	r2, [pc, #208]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 8007516:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800751a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 0320 	and.w	r3, r3, #32
 8007524:	2b00      	cmp	r3, #0
 8007526:	d03c      	beq.n	80075a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d01c      	beq.n	800756a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007530:	4b2d      	ldr	r3, [pc, #180]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 8007532:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007536:	4a2c      	ldr	r2, [pc, #176]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 8007538:	f043 0301 	orr.w	r3, r3, #1
 800753c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007540:	f7fc fd48 	bl	8003fd4 <HAL_GetTick>
 8007544:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007546:	e008      	b.n	800755a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007548:	f7fc fd44 	bl	8003fd4 <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	2b02      	cmp	r3, #2
 8007554:	d901      	bls.n	800755a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e0f2      	b.n	8007740 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800755a:	4b23      	ldr	r3, [pc, #140]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 800755c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007560:	f003 0302 	and.w	r3, r3, #2
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0ef      	beq.n	8007548 <HAL_RCC_OscConfig+0x418>
 8007568:	e01b      	b.n	80075a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800756a:	4b1f      	ldr	r3, [pc, #124]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 800756c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007570:	4a1d      	ldr	r2, [pc, #116]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 8007572:	f023 0301 	bic.w	r3, r3, #1
 8007576:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800757a:	f7fc fd2b 	bl	8003fd4 <HAL_GetTick>
 800757e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007580:	e008      	b.n	8007594 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007582:	f7fc fd27 	bl	8003fd4 <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	2b02      	cmp	r3, #2
 800758e:	d901      	bls.n	8007594 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e0d5      	b.n	8007740 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007594:	4b14      	ldr	r3, [pc, #80]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 8007596:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1ef      	bne.n	8007582 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	69db      	ldr	r3, [r3, #28]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 80c9 	beq.w	800773e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80075ac:	4b0e      	ldr	r3, [pc, #56]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f003 030c 	and.w	r3, r3, #12
 80075b4:	2b0c      	cmp	r3, #12
 80075b6:	f000 8083 	beq.w	80076c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d15e      	bne.n	8007680 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075c2:	4b09      	ldr	r3, [pc, #36]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a08      	ldr	r2, [pc, #32]	@ (80075e8 <HAL_RCC_OscConfig+0x4b8>)
 80075c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ce:	f7fc fd01 	bl	8003fd4 <HAL_GetTick>
 80075d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075d4:	e00c      	b.n	80075f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075d6:	f7fc fcfd 	bl	8003fd4 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d905      	bls.n	80075f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e0ab      	b.n	8007740 <HAL_RCC_OscConfig+0x610>
 80075e8:	40021000 	.word	0x40021000
 80075ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075f0:	4b55      	ldr	r3, [pc, #340]	@ (8007748 <HAL_RCC_OscConfig+0x618>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1ec      	bne.n	80075d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075fc:	4b52      	ldr	r3, [pc, #328]	@ (8007748 <HAL_RCC_OscConfig+0x618>)
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	4b52      	ldr	r3, [pc, #328]	@ (800774c <HAL_RCC_OscConfig+0x61c>)
 8007602:	4013      	ands	r3, r2
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	6a11      	ldr	r1, [r2, #32]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800760c:	3a01      	subs	r2, #1
 800760e:	0112      	lsls	r2, r2, #4
 8007610:	4311      	orrs	r1, r2
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007616:	0212      	lsls	r2, r2, #8
 8007618:	4311      	orrs	r1, r2
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800761e:	0852      	lsrs	r2, r2, #1
 8007620:	3a01      	subs	r2, #1
 8007622:	0552      	lsls	r2, r2, #21
 8007624:	4311      	orrs	r1, r2
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800762a:	0852      	lsrs	r2, r2, #1
 800762c:	3a01      	subs	r2, #1
 800762e:	0652      	lsls	r2, r2, #25
 8007630:	4311      	orrs	r1, r2
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007636:	06d2      	lsls	r2, r2, #27
 8007638:	430a      	orrs	r2, r1
 800763a:	4943      	ldr	r1, [pc, #268]	@ (8007748 <HAL_RCC_OscConfig+0x618>)
 800763c:	4313      	orrs	r3, r2
 800763e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007640:	4b41      	ldr	r3, [pc, #260]	@ (8007748 <HAL_RCC_OscConfig+0x618>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a40      	ldr	r2, [pc, #256]	@ (8007748 <HAL_RCC_OscConfig+0x618>)
 8007646:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800764a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800764c:	4b3e      	ldr	r3, [pc, #248]	@ (8007748 <HAL_RCC_OscConfig+0x618>)
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	4a3d      	ldr	r2, [pc, #244]	@ (8007748 <HAL_RCC_OscConfig+0x618>)
 8007652:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007656:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007658:	f7fc fcbc 	bl	8003fd4 <HAL_GetTick>
 800765c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800765e:	e008      	b.n	8007672 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007660:	f7fc fcb8 	bl	8003fd4 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	2b02      	cmp	r3, #2
 800766c:	d901      	bls.n	8007672 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e066      	b.n	8007740 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007672:	4b35      	ldr	r3, [pc, #212]	@ (8007748 <HAL_RCC_OscConfig+0x618>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d0f0      	beq.n	8007660 <HAL_RCC_OscConfig+0x530>
 800767e:	e05e      	b.n	800773e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007680:	4b31      	ldr	r3, [pc, #196]	@ (8007748 <HAL_RCC_OscConfig+0x618>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a30      	ldr	r2, [pc, #192]	@ (8007748 <HAL_RCC_OscConfig+0x618>)
 8007686:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800768a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800768c:	f7fc fca2 	bl	8003fd4 <HAL_GetTick>
 8007690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007692:	e008      	b.n	80076a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007694:	f7fc fc9e 	bl	8003fd4 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d901      	bls.n	80076a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e04c      	b.n	8007740 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076a6:	4b28      	ldr	r3, [pc, #160]	@ (8007748 <HAL_RCC_OscConfig+0x618>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1f0      	bne.n	8007694 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80076b2:	4b25      	ldr	r3, [pc, #148]	@ (8007748 <HAL_RCC_OscConfig+0x618>)
 80076b4:	68da      	ldr	r2, [r3, #12]
 80076b6:	4924      	ldr	r1, [pc, #144]	@ (8007748 <HAL_RCC_OscConfig+0x618>)
 80076b8:	4b25      	ldr	r3, [pc, #148]	@ (8007750 <HAL_RCC_OscConfig+0x620>)
 80076ba:	4013      	ands	r3, r2
 80076bc:	60cb      	str	r3, [r1, #12]
 80076be:	e03e      	b.n	800773e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d101      	bne.n	80076cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e039      	b.n	8007740 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80076cc:	4b1e      	ldr	r3, [pc, #120]	@ (8007748 <HAL_RCC_OscConfig+0x618>)
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f003 0203 	and.w	r2, r3, #3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d12c      	bne.n	800773a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ea:	3b01      	subs	r3, #1
 80076ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d123      	bne.n	800773a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80076fe:	429a      	cmp	r2, r3
 8007700:	d11b      	bne.n	800773a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800770e:	429a      	cmp	r2, r3
 8007710:	d113      	bne.n	800773a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800771c:	085b      	lsrs	r3, r3, #1
 800771e:	3b01      	subs	r3, #1
 8007720:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007722:	429a      	cmp	r2, r3
 8007724:	d109      	bne.n	800773a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007730:	085b      	lsrs	r3, r3, #1
 8007732:	3b01      	subs	r3, #1
 8007734:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007736:	429a      	cmp	r2, r3
 8007738:	d001      	beq.n	800773e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e000      	b.n	8007740 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3720      	adds	r7, #32
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	40021000 	.word	0x40021000
 800774c:	019f800c 	.word	0x019f800c
 8007750:	feeefffc 	.word	0xfeeefffc

08007754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800775e:	2300      	movs	r3, #0
 8007760:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e11e      	b.n	80079aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800776c:	4b91      	ldr	r3, [pc, #580]	@ (80079b4 <HAL_RCC_ClockConfig+0x260>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 030f 	and.w	r3, r3, #15
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d910      	bls.n	800779c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800777a:	4b8e      	ldr	r3, [pc, #568]	@ (80079b4 <HAL_RCC_ClockConfig+0x260>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f023 020f 	bic.w	r2, r3, #15
 8007782:	498c      	ldr	r1, [pc, #560]	@ (80079b4 <HAL_RCC_ClockConfig+0x260>)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	4313      	orrs	r3, r2
 8007788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800778a:	4b8a      	ldr	r3, [pc, #552]	@ (80079b4 <HAL_RCC_ClockConfig+0x260>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 030f 	and.w	r3, r3, #15
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	429a      	cmp	r2, r3
 8007796:	d001      	beq.n	800779c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e106      	b.n	80079aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d073      	beq.n	8007890 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	2b03      	cmp	r3, #3
 80077ae:	d129      	bne.n	8007804 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077b0:	4b81      	ldr	r3, [pc, #516]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e0f4      	b.n	80079aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80077c0:	f000 f99e 	bl	8007b00 <RCC_GetSysClockFreqFromPLLSource>
 80077c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	4a7c      	ldr	r2, [pc, #496]	@ (80079bc <HAL_RCC_ClockConfig+0x268>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d93f      	bls.n	800784e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80077ce:	4b7a      	ldr	r3, [pc, #488]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d009      	beq.n	80077ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d033      	beq.n	800784e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d12f      	bne.n	800784e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80077ee:	4b72      	ldr	r3, [pc, #456]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077f6:	4a70      	ldr	r2, [pc, #448]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 80077f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80077fe:	2380      	movs	r3, #128	@ 0x80
 8007800:	617b      	str	r3, [r7, #20]
 8007802:	e024      	b.n	800784e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	2b02      	cmp	r3, #2
 800780a:	d107      	bne.n	800781c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800780c:	4b6a      	ldr	r3, [pc, #424]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d109      	bne.n	800782c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e0c6      	b.n	80079aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800781c:	4b66      	ldr	r3, [pc, #408]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007824:	2b00      	cmp	r3, #0
 8007826:	d101      	bne.n	800782c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e0be      	b.n	80079aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800782c:	f000 f8ce 	bl	80079cc <HAL_RCC_GetSysClockFreq>
 8007830:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	4a61      	ldr	r2, [pc, #388]	@ (80079bc <HAL_RCC_ClockConfig+0x268>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d909      	bls.n	800784e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800783a:	4b5f      	ldr	r3, [pc, #380]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007842:	4a5d      	ldr	r2, [pc, #372]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 8007844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007848:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800784a:	2380      	movs	r3, #128	@ 0x80
 800784c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800784e:	4b5a      	ldr	r3, [pc, #360]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f023 0203 	bic.w	r2, r3, #3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	4957      	ldr	r1, [pc, #348]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 800785c:	4313      	orrs	r3, r2
 800785e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007860:	f7fc fbb8 	bl	8003fd4 <HAL_GetTick>
 8007864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007866:	e00a      	b.n	800787e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007868:	f7fc fbb4 	bl	8003fd4 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007876:	4293      	cmp	r3, r2
 8007878:	d901      	bls.n	800787e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e095      	b.n	80079aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800787e:	4b4e      	ldr	r3, [pc, #312]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f003 020c 	and.w	r2, r3, #12
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	429a      	cmp	r2, r3
 800788e:	d1eb      	bne.n	8007868 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d023      	beq.n	80078e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0304 	and.w	r3, r3, #4
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d005      	beq.n	80078b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078a8:	4b43      	ldr	r3, [pc, #268]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	4a42      	ldr	r2, [pc, #264]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 80078ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80078b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0308 	and.w	r3, r3, #8
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d007      	beq.n	80078d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80078c0:	4b3d      	ldr	r3, [pc, #244]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80078c8:	4a3b      	ldr	r2, [pc, #236]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 80078ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80078ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078d0:	4b39      	ldr	r3, [pc, #228]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	4936      	ldr	r1, [pc, #216]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	608b      	str	r3, [r1, #8]
 80078e2:	e008      	b.n	80078f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	2b80      	cmp	r3, #128	@ 0x80
 80078e8:	d105      	bne.n	80078f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80078ea:	4b33      	ldr	r3, [pc, #204]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	4a32      	ldr	r2, [pc, #200]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 80078f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078f6:	4b2f      	ldr	r3, [pc, #188]	@ (80079b4 <HAL_RCC_ClockConfig+0x260>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 030f 	and.w	r3, r3, #15
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	429a      	cmp	r2, r3
 8007902:	d21d      	bcs.n	8007940 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007904:	4b2b      	ldr	r3, [pc, #172]	@ (80079b4 <HAL_RCC_ClockConfig+0x260>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f023 020f 	bic.w	r2, r3, #15
 800790c:	4929      	ldr	r1, [pc, #164]	@ (80079b4 <HAL_RCC_ClockConfig+0x260>)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	4313      	orrs	r3, r2
 8007912:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007914:	f7fc fb5e 	bl	8003fd4 <HAL_GetTick>
 8007918:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800791a:	e00a      	b.n	8007932 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800791c:	f7fc fb5a 	bl	8003fd4 <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800792a:	4293      	cmp	r3, r2
 800792c:	d901      	bls.n	8007932 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e03b      	b.n	80079aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007932:	4b20      	ldr	r3, [pc, #128]	@ (80079b4 <HAL_RCC_ClockConfig+0x260>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 030f 	and.w	r3, r3, #15
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	429a      	cmp	r2, r3
 800793e:	d1ed      	bne.n	800791c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	d008      	beq.n	800795e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800794c:	4b1a      	ldr	r3, [pc, #104]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	4917      	ldr	r1, [pc, #92]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 800795a:	4313      	orrs	r3, r2
 800795c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0308 	and.w	r3, r3, #8
 8007966:	2b00      	cmp	r3, #0
 8007968:	d009      	beq.n	800797e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800796a:	4b13      	ldr	r3, [pc, #76]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	00db      	lsls	r3, r3, #3
 8007978:	490f      	ldr	r1, [pc, #60]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 800797a:	4313      	orrs	r3, r2
 800797c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800797e:	f000 f825 	bl	80079cc <HAL_RCC_GetSysClockFreq>
 8007982:	4602      	mov	r2, r0
 8007984:	4b0c      	ldr	r3, [pc, #48]	@ (80079b8 <HAL_RCC_ClockConfig+0x264>)
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	091b      	lsrs	r3, r3, #4
 800798a:	f003 030f 	and.w	r3, r3, #15
 800798e:	490c      	ldr	r1, [pc, #48]	@ (80079c0 <HAL_RCC_ClockConfig+0x26c>)
 8007990:	5ccb      	ldrb	r3, [r1, r3]
 8007992:	f003 031f 	and.w	r3, r3, #31
 8007996:	fa22 f303 	lsr.w	r3, r2, r3
 800799a:	4a0a      	ldr	r2, [pc, #40]	@ (80079c4 <HAL_RCC_ClockConfig+0x270>)
 800799c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800799e:	4b0a      	ldr	r3, [pc, #40]	@ (80079c8 <HAL_RCC_ClockConfig+0x274>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fc faca 	bl	8003f3c <HAL_InitTick>
 80079a8:	4603      	mov	r3, r0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3718      	adds	r7, #24
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	40022000 	.word	0x40022000
 80079b8:	40021000 	.word	0x40021000
 80079bc:	04c4b400 	.word	0x04c4b400
 80079c0:	0800c8b8 	.word	0x0800c8b8
 80079c4:	20000018 	.word	0x20000018
 80079c8:	2000001c 	.word	0x2000001c

080079cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80079d2:	4b2c      	ldr	r3, [pc, #176]	@ (8007a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f003 030c 	and.w	r3, r3, #12
 80079da:	2b04      	cmp	r3, #4
 80079dc:	d102      	bne.n	80079e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80079de:	4b2a      	ldr	r3, [pc, #168]	@ (8007a88 <HAL_RCC_GetSysClockFreq+0xbc>)
 80079e0:	613b      	str	r3, [r7, #16]
 80079e2:	e047      	b.n	8007a74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80079e4:	4b27      	ldr	r3, [pc, #156]	@ (8007a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f003 030c 	and.w	r3, r3, #12
 80079ec:	2b08      	cmp	r3, #8
 80079ee:	d102      	bne.n	80079f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80079f0:	4b26      	ldr	r3, [pc, #152]	@ (8007a8c <HAL_RCC_GetSysClockFreq+0xc0>)
 80079f2:	613b      	str	r3, [r7, #16]
 80079f4:	e03e      	b.n	8007a74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80079f6:	4b23      	ldr	r3, [pc, #140]	@ (8007a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f003 030c 	and.w	r3, r3, #12
 80079fe:	2b0c      	cmp	r3, #12
 8007a00:	d136      	bne.n	8007a70 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007a02:	4b20      	ldr	r3, [pc, #128]	@ (8007a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	f003 0303 	and.w	r3, r3, #3
 8007a0a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8007a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	091b      	lsrs	r3, r3, #4
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	3301      	adds	r3, #1
 8007a18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2b03      	cmp	r3, #3
 8007a1e:	d10c      	bne.n	8007a3a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a20:	4a1a      	ldr	r2, [pc, #104]	@ (8007a8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a28:	4a16      	ldr	r2, [pc, #88]	@ (8007a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a2a:	68d2      	ldr	r2, [r2, #12]
 8007a2c:	0a12      	lsrs	r2, r2, #8
 8007a2e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007a32:	fb02 f303 	mul.w	r3, r2, r3
 8007a36:	617b      	str	r3, [r7, #20]
      break;
 8007a38:	e00c      	b.n	8007a54 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a3a:	4a13      	ldr	r2, [pc, #76]	@ (8007a88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a42:	4a10      	ldr	r2, [pc, #64]	@ (8007a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a44:	68d2      	ldr	r2, [r2, #12]
 8007a46:	0a12      	lsrs	r2, r2, #8
 8007a48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007a4c:	fb02 f303 	mul.w	r3, r2, r3
 8007a50:	617b      	str	r3, [r7, #20]
      break;
 8007a52:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a54:	4b0b      	ldr	r3, [pc, #44]	@ (8007a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	0e5b      	lsrs	r3, r3, #25
 8007a5a:	f003 0303 	and.w	r3, r3, #3
 8007a5e:	3301      	adds	r3, #1
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a6c:	613b      	str	r3, [r7, #16]
 8007a6e:	e001      	b.n	8007a74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007a70:	2300      	movs	r3, #0
 8007a72:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007a74:	693b      	ldr	r3, [r7, #16]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	371c      	adds	r7, #28
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	40021000 	.word	0x40021000
 8007a88:	00f42400 	.word	0x00f42400
 8007a8c:	007a1200 	.word	0x007a1200

08007a90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a94:	4b03      	ldr	r3, [pc, #12]	@ (8007aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a96:	681b      	ldr	r3, [r3, #0]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20000018 	.word	0x20000018

08007aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007aac:	f7ff fff0 	bl	8007a90 <HAL_RCC_GetHCLKFreq>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	4b06      	ldr	r3, [pc, #24]	@ (8007acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	0a1b      	lsrs	r3, r3, #8
 8007ab8:	f003 0307 	and.w	r3, r3, #7
 8007abc:	4904      	ldr	r1, [pc, #16]	@ (8007ad0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007abe:	5ccb      	ldrb	r3, [r1, r3]
 8007ac0:	f003 031f 	and.w	r3, r3, #31
 8007ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	40021000 	.word	0x40021000
 8007ad0:	0800c8c8 	.word	0x0800c8c8

08007ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007ad8:	f7ff ffda 	bl	8007a90 <HAL_RCC_GetHCLKFreq>
 8007adc:	4602      	mov	r2, r0
 8007ade:	4b06      	ldr	r3, [pc, #24]	@ (8007af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	0adb      	lsrs	r3, r3, #11
 8007ae4:	f003 0307 	and.w	r3, r3, #7
 8007ae8:	4904      	ldr	r1, [pc, #16]	@ (8007afc <HAL_RCC_GetPCLK2Freq+0x28>)
 8007aea:	5ccb      	ldrb	r3, [r1, r3]
 8007aec:	f003 031f 	and.w	r3, r3, #31
 8007af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	40021000 	.word	0x40021000
 8007afc:	0800c8c8 	.word	0x0800c8c8

08007b00 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007b06:	4b1e      	ldr	r3, [pc, #120]	@ (8007b80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	f003 0303 	and.w	r3, r3, #3
 8007b0e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b10:	4b1b      	ldr	r3, [pc, #108]	@ (8007b80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	091b      	lsrs	r3, r3, #4
 8007b16:	f003 030f 	and.w	r3, r3, #15
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	d10c      	bne.n	8007b3e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b24:	4a17      	ldr	r2, [pc, #92]	@ (8007b84 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b2c:	4a14      	ldr	r2, [pc, #80]	@ (8007b80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b2e:	68d2      	ldr	r2, [r2, #12]
 8007b30:	0a12      	lsrs	r2, r2, #8
 8007b32:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007b36:	fb02 f303 	mul.w	r3, r2, r3
 8007b3a:	617b      	str	r3, [r7, #20]
    break;
 8007b3c:	e00c      	b.n	8007b58 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b3e:	4a12      	ldr	r2, [pc, #72]	@ (8007b88 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b46:	4a0e      	ldr	r2, [pc, #56]	@ (8007b80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b48:	68d2      	ldr	r2, [r2, #12]
 8007b4a:	0a12      	lsrs	r2, r2, #8
 8007b4c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007b50:	fb02 f303 	mul.w	r3, r2, r3
 8007b54:	617b      	str	r3, [r7, #20]
    break;
 8007b56:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b58:	4b09      	ldr	r3, [pc, #36]	@ (8007b80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	0e5b      	lsrs	r3, r3, #25
 8007b5e:	f003 0303 	and.w	r3, r3, #3
 8007b62:	3301      	adds	r3, #1
 8007b64:	005b      	lsls	r3, r3, #1
 8007b66:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b70:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007b72:	687b      	ldr	r3, [r7, #4]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	371c      	adds	r7, #28
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	40021000 	.word	0x40021000
 8007b84:	007a1200 	.word	0x007a1200
 8007b88:	00f42400 	.word	0x00f42400

08007b8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b94:	2300      	movs	r3, #0
 8007b96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b98:	2300      	movs	r3, #0
 8007b9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f000 8098 	beq.w	8007cda <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007baa:	2300      	movs	r3, #0
 8007bac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bae:	4b43      	ldr	r3, [pc, #268]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10d      	bne.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bba:	4b40      	ldr	r3, [pc, #256]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bbe:	4a3f      	ldr	r2, [pc, #252]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bce:	60bb      	str	r3, [r7, #8]
 8007bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bd6:	4b3a      	ldr	r3, [pc, #232]	@ (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a39      	ldr	r2, [pc, #228]	@ (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007be0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007be2:	f7fc f9f7 	bl	8003fd4 <HAL_GetTick>
 8007be6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007be8:	e009      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bea:	f7fc f9f3 	bl	8003fd4 <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d902      	bls.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	74fb      	strb	r3, [r7, #19]
        break;
 8007bfc:	e005      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bfe:	4b30      	ldr	r3, [pc, #192]	@ (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0ef      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007c0a:	7cfb      	ldrb	r3, [r7, #19]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d159      	bne.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007c10:	4b2a      	ldr	r3, [pc, #168]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c1a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d01e      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d019      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007c2c:	4b23      	ldr	r3, [pc, #140]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c38:	4b20      	ldr	r3, [pc, #128]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c48:	4b1c      	ldr	r3, [pc, #112]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007c58:	4a18      	ldr	r2, [pc, #96]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d016      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c6a:	f7fc f9b3 	bl	8003fd4 <HAL_GetTick>
 8007c6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c70:	e00b      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c72:	f7fc f9af 	bl	8003fd4 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d902      	bls.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	74fb      	strb	r3, [r7, #19]
            break;
 8007c88:	e006      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c90:	f003 0302 	and.w	r3, r3, #2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d0ec      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007c98:	7cfb      	ldrb	r3, [r7, #19]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10b      	bne.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c9e:	4b07      	ldr	r3, [pc, #28]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ca4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cac:	4903      	ldr	r1, [pc, #12]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007cb4:	e008      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007cb6:	7cfb      	ldrb	r3, [r7, #19]
 8007cb8:	74bb      	strb	r3, [r7, #18]
 8007cba:	e005      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007cbc:	40021000 	.word	0x40021000
 8007cc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc4:	7cfb      	ldrb	r3, [r7, #19]
 8007cc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007cc8:	7c7b      	ldrb	r3, [r7, #17]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d105      	bne.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cce:	4ba6      	ldr	r3, [pc, #664]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cd2:	4aa5      	ldr	r2, [pc, #660]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cd8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ce6:	4ba0      	ldr	r3, [pc, #640]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cec:	f023 0203 	bic.w	r2, r3, #3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	499c      	ldr	r1, [pc, #624]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00a      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d08:	4b97      	ldr	r3, [pc, #604]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d0e:	f023 020c 	bic.w	r2, r3, #12
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	4994      	ldr	r1, [pc, #592]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0304 	and.w	r3, r3, #4
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00a      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d2a:	4b8f      	ldr	r3, [pc, #572]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d30:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	498b      	ldr	r1, [pc, #556]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0308 	and.w	r3, r3, #8
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00a      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d4c:	4b86      	ldr	r3, [pc, #536]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d52:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	4983      	ldr	r1, [pc, #524]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0320 	and.w	r3, r3, #32
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00a      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d6e:	4b7e      	ldr	r3, [pc, #504]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d74:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	695b      	ldr	r3, [r3, #20]
 8007d7c:	497a      	ldr	r1, [pc, #488]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00a      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d90:	4b75      	ldr	r3, [pc, #468]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d96:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	4972      	ldr	r1, [pc, #456]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00a      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007db2:	4b6d      	ldr	r3, [pc, #436]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007db8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	4969      	ldr	r1, [pc, #420]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00a      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007dd4:	4b64      	ldr	r3, [pc, #400]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dda:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	4961      	ldr	r1, [pc, #388]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00a      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007df6:	4b5c      	ldr	r3, [pc, #368]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dfc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e04:	4958      	ldr	r1, [pc, #352]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d015      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e18:	4b53      	ldr	r3, [pc, #332]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e26:	4950      	ldr	r1, [pc, #320]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e36:	d105      	bne.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e38:	4b4b      	ldr	r3, [pc, #300]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	4a4a      	ldr	r2, [pc, #296]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e42:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d015      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e50:	4b45      	ldr	r3, [pc, #276]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e5e:	4942      	ldr	r1, [pc, #264]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e6e:	d105      	bne.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e70:	4b3d      	ldr	r3, [pc, #244]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	4a3c      	ldr	r2, [pc, #240]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e7a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d015      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e88:	4b37      	ldr	r3, [pc, #220]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e8e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e96:	4934      	ldr	r1, [pc, #208]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ea6:	d105      	bne.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	4a2e      	ldr	r2, [pc, #184]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007eae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007eb2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d015      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ec0:	4b29      	ldr	r3, [pc, #164]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ec6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ece:	4926      	ldr	r1, [pc, #152]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ede:	d105      	bne.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ee0:	4b21      	ldr	r3, [pc, #132]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	4a20      	ldr	r2, [pc, #128]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007eea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d015      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007efe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f06:	4918      	ldr	r1, [pc, #96]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f16:	d105      	bne.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f18:	4b13      	ldr	r3, [pc, #76]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	4a12      	ldr	r2, [pc, #72]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d015      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007f30:	4b0d      	ldr	r3, [pc, #52]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f36:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f3e:	490a      	ldr	r1, [pc, #40]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f40:	4313      	orrs	r3, r2
 8007f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f4e:	d105      	bne.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f50:	4b05      	ldr	r3, [pc, #20]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	4a04      	ldr	r2, [pc, #16]	@ (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007f5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3718      	adds	r7, #24
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	40021000 	.word	0x40021000

08007f6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e09d      	b.n	80080ba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d108      	bne.n	8007f98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f8e:	d009      	beq.n	8007fa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	61da      	str	r2, [r3, #28]
 8007f96:	e005      	b.n	8007fa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d106      	bne.n	8007fc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7fa fe1a 	bl	8002bf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007fe4:	d902      	bls.n	8007fec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60fb      	str	r3, [r7, #12]
 8007fea:	e002      	b.n	8007ff2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007fec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007ff0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007ffa:	d007      	beq.n	800800c <HAL_SPI_Init+0xa0>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008004:	d002      	beq.n	800800c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800801c:	431a      	orrs	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	f003 0302 	and.w	r3, r3, #2
 8008026:	431a      	orrs	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	695b      	ldr	r3, [r3, #20]
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	431a      	orrs	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800803a:	431a      	orrs	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	69db      	ldr	r3, [r3, #28]
 8008040:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008044:	431a      	orrs	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a1b      	ldr	r3, [r3, #32]
 800804a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800804e:	ea42 0103 	orr.w	r1, r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008056:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	430a      	orrs	r2, r1
 8008060:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	0c1b      	lsrs	r3, r3, #16
 8008068:	f003 0204 	and.w	r2, r3, #4
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008070:	f003 0310 	and.w	r3, r3, #16
 8008074:	431a      	orrs	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800807a:	f003 0308 	and.w	r3, r3, #8
 800807e:	431a      	orrs	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008088:	ea42 0103 	orr.w	r1, r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	69da      	ldr	r2, [r3, #28]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80080a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b088      	sub	sp, #32
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	60f8      	str	r0, [r7, #12]
 80080ca:	60b9      	str	r1, [r7, #8]
 80080cc:	603b      	str	r3, [r7, #0]
 80080ce:	4613      	mov	r3, r2
 80080d0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080d2:	f7fb ff7f 	bl	8003fd4 <HAL_GetTick>
 80080d6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80080d8:	88fb      	ldrh	r3, [r7, #6]
 80080da:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d001      	beq.n	80080ec <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80080e8:	2302      	movs	r3, #2
 80080ea:	e15c      	b.n	80083a6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d002      	beq.n	80080f8 <HAL_SPI_Transmit+0x36>
 80080f2:	88fb      	ldrh	r3, [r7, #6]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d101      	bne.n	80080fc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e154      	b.n	80083a6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008102:	2b01      	cmp	r3, #1
 8008104:	d101      	bne.n	800810a <HAL_SPI_Transmit+0x48>
 8008106:	2302      	movs	r3, #2
 8008108:	e14d      	b.n	80083a6 <HAL_SPI_Transmit+0x2e4>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2203      	movs	r2, #3
 8008116:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	88fa      	ldrh	r2, [r7, #6]
 800812a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	88fa      	ldrh	r2, [r7, #6]
 8008130:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800815c:	d10f      	bne.n	800817e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800816c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800817c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008188:	2b40      	cmp	r3, #64	@ 0x40
 800818a:	d007      	beq.n	800819c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800819a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80081a4:	d952      	bls.n	800824c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d002      	beq.n	80081b4 <HAL_SPI_Transmit+0xf2>
 80081ae:	8b7b      	ldrh	r3, [r7, #26]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d145      	bne.n	8008240 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b8:	881a      	ldrh	r2, [r3, #0]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c4:	1c9a      	adds	r2, r3, #2
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	3b01      	subs	r3, #1
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80081d8:	e032      	b.n	8008240 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d112      	bne.n	800820e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ec:	881a      	ldrh	r2, [r3, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f8:	1c9a      	adds	r2, r3, #2
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008202:	b29b      	uxth	r3, r3
 8008204:	3b01      	subs	r3, #1
 8008206:	b29a      	uxth	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800820c:	e018      	b.n	8008240 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800820e:	f7fb fee1 	bl	8003fd4 <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	683a      	ldr	r2, [r7, #0]
 800821a:	429a      	cmp	r2, r3
 800821c:	d803      	bhi.n	8008226 <HAL_SPI_Transmit+0x164>
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008224:	d102      	bne.n	800822c <HAL_SPI_Transmit+0x16a>
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d109      	bne.n	8008240 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e0b2      	b.n	80083a6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008244:	b29b      	uxth	r3, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1c7      	bne.n	80081da <HAL_SPI_Transmit+0x118>
 800824a:	e083      	b.n	8008354 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <HAL_SPI_Transmit+0x198>
 8008254:	8b7b      	ldrh	r3, [r7, #26]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d177      	bne.n	800834a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800825e:	b29b      	uxth	r3, r3
 8008260:	2b01      	cmp	r3, #1
 8008262:	d912      	bls.n	800828a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008268:	881a      	ldrh	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008274:	1c9a      	adds	r2, r3, #2
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800827e:	b29b      	uxth	r3, r3
 8008280:	3b02      	subs	r3, #2
 8008282:	b29a      	uxth	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008288:	e05f      	b.n	800834a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	330c      	adds	r3, #12
 8008294:	7812      	ldrb	r2, [r2, #0]
 8008296:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829c:	1c5a      	adds	r2, r3, #1
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	3b01      	subs	r3, #1
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80082b0:	e04b      	b.n	800834a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f003 0302 	and.w	r3, r3, #2
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d12b      	bne.n	8008318 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d912      	bls.n	80082f0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ce:	881a      	ldrh	r2, [r3, #0]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082da:	1c9a      	adds	r2, r3, #2
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	3b02      	subs	r3, #2
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80082ee:	e02c      	b.n	800834a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	330c      	adds	r3, #12
 80082fa:	7812      	ldrb	r2, [r2, #0]
 80082fc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008302:	1c5a      	adds	r2, r3, #1
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800830c:	b29b      	uxth	r3, r3
 800830e:	3b01      	subs	r3, #1
 8008310:	b29a      	uxth	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008316:	e018      	b.n	800834a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008318:	f7fb fe5c 	bl	8003fd4 <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	683a      	ldr	r2, [r7, #0]
 8008324:	429a      	cmp	r2, r3
 8008326:	d803      	bhi.n	8008330 <HAL_SPI_Transmit+0x26e>
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832e:	d102      	bne.n	8008336 <HAL_SPI_Transmit+0x274>
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d109      	bne.n	800834a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e02d      	b.n	80083a6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800834e:	b29b      	uxth	r3, r3
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1ae      	bne.n	80082b2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008354:	69fa      	ldr	r2, [r7, #28]
 8008356:	6839      	ldr	r1, [r7, #0]
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 f947 	bl	80085ec <SPI_EndRxTxTransaction>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d002      	beq.n	800836a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2220      	movs	r2, #32
 8008368:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10a      	bne.n	8008388 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008372:	2300      	movs	r3, #0
 8008374:	617b      	str	r3, [r7, #20]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	617b      	str	r3, [r7, #20]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	617b      	str	r3, [r7, #20]
 8008386:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e000      	b.n	80083a6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80083a4:	2300      	movs	r3, #0
  }
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3720      	adds	r7, #32
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
	...

080083b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	603b      	str	r3, [r7, #0]
 80083bc:	4613      	mov	r3, r2
 80083be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80083c0:	f7fb fe08 	bl	8003fd4 <HAL_GetTick>
 80083c4:	4602      	mov	r2, r0
 80083c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c8:	1a9b      	subs	r3, r3, r2
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	4413      	add	r3, r2
 80083ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80083d0:	f7fb fe00 	bl	8003fd4 <HAL_GetTick>
 80083d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80083d6:	4b39      	ldr	r3, [pc, #228]	@ (80084bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	015b      	lsls	r3, r3, #5
 80083dc:	0d1b      	lsrs	r3, r3, #20
 80083de:	69fa      	ldr	r2, [r7, #28]
 80083e0:	fb02 f303 	mul.w	r3, r2, r3
 80083e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083e6:	e054      	b.n	8008492 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ee:	d050      	beq.n	8008492 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083f0:	f7fb fdf0 	bl	8003fd4 <HAL_GetTick>
 80083f4:	4602      	mov	r2, r0
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	69fa      	ldr	r2, [r7, #28]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d902      	bls.n	8008406 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d13d      	bne.n	8008482 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008414:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800841e:	d111      	bne.n	8008444 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008428:	d004      	beq.n	8008434 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008432:	d107      	bne.n	8008444 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008442:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008448:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800844c:	d10f      	bne.n	800846e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800846c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e017      	b.n	80084b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d101      	bne.n	800848c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	3b01      	subs	r3, #1
 8008490:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	4013      	ands	r3, r2
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	429a      	cmp	r2, r3
 80084a0:	bf0c      	ite	eq
 80084a2:	2301      	moveq	r3, #1
 80084a4:	2300      	movne	r3, #0
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	461a      	mov	r2, r3
 80084aa:	79fb      	ldrb	r3, [r7, #7]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d19b      	bne.n	80083e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3720      	adds	r7, #32
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20000018 	.word	0x20000018

080084c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08a      	sub	sp, #40	@ 0x28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80084ce:	2300      	movs	r3, #0
 80084d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80084d2:	f7fb fd7f 	bl	8003fd4 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084da:	1a9b      	subs	r3, r3, r2
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	4413      	add	r3, r2
 80084e0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80084e2:	f7fb fd77 	bl	8003fd4 <HAL_GetTick>
 80084e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	330c      	adds	r3, #12
 80084ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80084f0:	4b3d      	ldr	r3, [pc, #244]	@ (80085e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	4613      	mov	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	00da      	lsls	r2, r3, #3
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	0d1b      	lsrs	r3, r3, #20
 8008500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008502:	fb02 f303 	mul.w	r3, r2, r3
 8008506:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008508:	e060      	b.n	80085cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008510:	d107      	bne.n	8008522 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d104      	bne.n	8008522 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	b2db      	uxtb	r3, r3
 800851e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008520:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008528:	d050      	beq.n	80085cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800852a:	f7fb fd53 	bl	8003fd4 <HAL_GetTick>
 800852e:	4602      	mov	r2, r0
 8008530:	6a3b      	ldr	r3, [r7, #32]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008536:	429a      	cmp	r2, r3
 8008538:	d902      	bls.n	8008540 <SPI_WaitFifoStateUntilTimeout+0x80>
 800853a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853c:	2b00      	cmp	r3, #0
 800853e:	d13d      	bne.n	80085bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800854e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008558:	d111      	bne.n	800857e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008562:	d004      	beq.n	800856e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800856c:	d107      	bne.n	800857e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800857c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008582:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008586:	d10f      	bne.n	80085a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80085a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e010      	b.n	80085de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d101      	bne.n	80085c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	689a      	ldr	r2, [r3, #8]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	4013      	ands	r3, r2
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d196      	bne.n	800850a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3728      	adds	r7, #40	@ 0x28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20000018 	.word	0x20000018

080085ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b086      	sub	sp, #24
 80085f0:	af02      	add	r7, sp, #8
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	2200      	movs	r2, #0
 8008600:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f7ff ff5b 	bl	80084c0 <SPI_WaitFifoStateUntilTimeout>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d007      	beq.n	8008620 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008614:	f043 0220 	orr.w	r2, r3, #32
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e027      	b.n	8008670 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2200      	movs	r2, #0
 8008628:	2180      	movs	r1, #128	@ 0x80
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f7ff fec0 	bl	80083b0 <SPI_WaitFlagStateUntilTimeout>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d007      	beq.n	8008646 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800863a:	f043 0220 	orr.w	r2, r3, #32
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e014      	b.n	8008670 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	2200      	movs	r2, #0
 800864e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f7ff ff34 	bl	80084c0 <SPI_WaitFifoStateUntilTimeout>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d007      	beq.n	800866e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008662:	f043 0220 	orr.w	r2, r3, #32
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e000      	b.n	8008670 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e049      	b.n	800871e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d106      	bne.n	80086a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7fa ff40 	bl	8003524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2202      	movs	r2, #2
 80086a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3304      	adds	r3, #4
 80086b4:	4619      	mov	r1, r3
 80086b6:	4610      	mov	r0, r2
 80086b8:	f001 fb50 	bl	8009d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
	...

08008728 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b01      	cmp	r3, #1
 800873a:	d001      	beq.n	8008740 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e042      	b.n	80087c6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2202      	movs	r2, #2
 8008744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a21      	ldr	r2, [pc, #132]	@ (80087d4 <HAL_TIM_Base_Start+0xac>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d018      	beq.n	8008784 <HAL_TIM_Base_Start+0x5c>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800875a:	d013      	beq.n	8008784 <HAL_TIM_Base_Start+0x5c>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a1d      	ldr	r2, [pc, #116]	@ (80087d8 <HAL_TIM_Base_Start+0xb0>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d00e      	beq.n	8008784 <HAL_TIM_Base_Start+0x5c>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a1c      	ldr	r2, [pc, #112]	@ (80087dc <HAL_TIM_Base_Start+0xb4>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d009      	beq.n	8008784 <HAL_TIM_Base_Start+0x5c>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a1a      	ldr	r2, [pc, #104]	@ (80087e0 <HAL_TIM_Base_Start+0xb8>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d004      	beq.n	8008784 <HAL_TIM_Base_Start+0x5c>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a19      	ldr	r2, [pc, #100]	@ (80087e4 <HAL_TIM_Base_Start+0xbc>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d115      	bne.n	80087b0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	689a      	ldr	r2, [r3, #8]
 800878a:	4b17      	ldr	r3, [pc, #92]	@ (80087e8 <HAL_TIM_Base_Start+0xc0>)
 800878c:	4013      	ands	r3, r2
 800878e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2b06      	cmp	r3, #6
 8008794:	d015      	beq.n	80087c2 <HAL_TIM_Base_Start+0x9a>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800879c:	d011      	beq.n	80087c2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f042 0201 	orr.w	r2, r2, #1
 80087ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ae:	e008      	b.n	80087c2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f042 0201 	orr.w	r2, r2, #1
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	e000      	b.n	80087c4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	40012c00 	.word	0x40012c00
 80087d8:	40000400 	.word	0x40000400
 80087dc:	40000800 	.word	0x40000800
 80087e0:	40013400 	.word	0x40013400
 80087e4:	40014000 	.word	0x40014000
 80087e8:	00010007 	.word	0x00010007

080087ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d001      	beq.n	8008804 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e04a      	b.n	800889a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2202      	movs	r2, #2
 8008808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68da      	ldr	r2, [r3, #12]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f042 0201 	orr.w	r2, r2, #1
 800881a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a21      	ldr	r2, [pc, #132]	@ (80088a8 <HAL_TIM_Base_Start_IT+0xbc>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d018      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x6c>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800882e:	d013      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x6c>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a1d      	ldr	r2, [pc, #116]	@ (80088ac <HAL_TIM_Base_Start_IT+0xc0>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d00e      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x6c>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a1c      	ldr	r2, [pc, #112]	@ (80088b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d009      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x6c>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a1a      	ldr	r2, [pc, #104]	@ (80088b4 <HAL_TIM_Base_Start_IT+0xc8>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d004      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x6c>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a19      	ldr	r2, [pc, #100]	@ (80088b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d115      	bne.n	8008884 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	689a      	ldr	r2, [r3, #8]
 800885e:	4b17      	ldr	r3, [pc, #92]	@ (80088bc <HAL_TIM_Base_Start_IT+0xd0>)
 8008860:	4013      	ands	r3, r2
 8008862:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b06      	cmp	r3, #6
 8008868:	d015      	beq.n	8008896 <HAL_TIM_Base_Start_IT+0xaa>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008870:	d011      	beq.n	8008896 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f042 0201 	orr.w	r2, r2, #1
 8008880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008882:	e008      	b.n	8008896 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f042 0201 	orr.w	r2, r2, #1
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	e000      	b.n	8008898 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008896:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	40012c00 	.word	0x40012c00
 80088ac:	40000400 	.word	0x40000400
 80088b0:	40000800 	.word	0x40000800
 80088b4:	40013400 	.word	0x40013400
 80088b8:	40014000 	.word	0x40014000
 80088bc:	00010007 	.word	0x00010007

080088c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e049      	b.n	8008966 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d106      	bne.n	80088ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f841 	bl	800896e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2202      	movs	r2, #2
 80088f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	3304      	adds	r3, #4
 80088fc:	4619      	mov	r1, r3
 80088fe:	4610      	mov	r0, r2
 8008900:	f001 fa2c 	bl	8009d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800896e:	b480      	push	{r7}
 8008970:	b083      	sub	sp, #12
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008976:	bf00      	nop
 8008978:	370c      	adds	r7, #12
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
	...

08008984 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
 8008990:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008992:	2300      	movs	r3, #0
 8008994:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d109      	bne.n	80089b0 <HAL_TIM_PWM_Start_DMA+0x2c>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	bf0c      	ite	eq
 80089a8:	2301      	moveq	r3, #1
 80089aa:	2300      	movne	r3, #0
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	e03c      	b.n	8008a2a <HAL_TIM_PWM_Start_DMA+0xa6>
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	2b04      	cmp	r3, #4
 80089b4:	d109      	bne.n	80089ca <HAL_TIM_PWM_Start_DMA+0x46>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b02      	cmp	r3, #2
 80089c0:	bf0c      	ite	eq
 80089c2:	2301      	moveq	r3, #1
 80089c4:	2300      	movne	r3, #0
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	e02f      	b.n	8008a2a <HAL_TIM_PWM_Start_DMA+0xa6>
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2b08      	cmp	r3, #8
 80089ce:	d109      	bne.n	80089e4 <HAL_TIM_PWM_Start_DMA+0x60>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b02      	cmp	r3, #2
 80089da:	bf0c      	ite	eq
 80089dc:	2301      	moveq	r3, #1
 80089de:	2300      	movne	r3, #0
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	e022      	b.n	8008a2a <HAL_TIM_PWM_Start_DMA+0xa6>
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	2b0c      	cmp	r3, #12
 80089e8:	d109      	bne.n	80089fe <HAL_TIM_PWM_Start_DMA+0x7a>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	bf0c      	ite	eq
 80089f6:	2301      	moveq	r3, #1
 80089f8:	2300      	movne	r3, #0
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	e015      	b.n	8008a2a <HAL_TIM_PWM_Start_DMA+0xa6>
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	2b10      	cmp	r3, #16
 8008a02:	d109      	bne.n	8008a18 <HAL_TIM_PWM_Start_DMA+0x94>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	bf0c      	ite	eq
 8008a10:	2301      	moveq	r3, #1
 8008a12:	2300      	movne	r3, #0
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	e008      	b.n	8008a2a <HAL_TIM_PWM_Start_DMA+0xa6>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	bf0c      	ite	eq
 8008a24:	2301      	moveq	r3, #1
 8008a26:	2300      	movne	r3, #0
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8008a2e:	2302      	movs	r3, #2
 8008a30:	e1a6      	b.n	8008d80 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d109      	bne.n	8008a4c <HAL_TIM_PWM_Start_DMA+0xc8>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	bf0c      	ite	eq
 8008a44:	2301      	moveq	r3, #1
 8008a46:	2300      	movne	r3, #0
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	e03c      	b.n	8008ac6 <HAL_TIM_PWM_Start_DMA+0x142>
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2b04      	cmp	r3, #4
 8008a50:	d109      	bne.n	8008a66 <HAL_TIM_PWM_Start_DMA+0xe2>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	bf0c      	ite	eq
 8008a5e:	2301      	moveq	r3, #1
 8008a60:	2300      	movne	r3, #0
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	e02f      	b.n	8008ac6 <HAL_TIM_PWM_Start_DMA+0x142>
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2b08      	cmp	r3, #8
 8008a6a:	d109      	bne.n	8008a80 <HAL_TIM_PWM_Start_DMA+0xfc>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	bf0c      	ite	eq
 8008a78:	2301      	moveq	r3, #1
 8008a7a:	2300      	movne	r3, #0
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	e022      	b.n	8008ac6 <HAL_TIM_PWM_Start_DMA+0x142>
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	2b0c      	cmp	r3, #12
 8008a84:	d109      	bne.n	8008a9a <HAL_TIM_PWM_Start_DMA+0x116>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	bf0c      	ite	eq
 8008a92:	2301      	moveq	r3, #1
 8008a94:	2300      	movne	r3, #0
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	e015      	b.n	8008ac6 <HAL_TIM_PWM_Start_DMA+0x142>
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2b10      	cmp	r3, #16
 8008a9e:	d109      	bne.n	8008ab4 <HAL_TIM_PWM_Start_DMA+0x130>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	bf0c      	ite	eq
 8008aac:	2301      	moveq	r3, #1
 8008aae:	2300      	movne	r3, #0
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	e008      	b.n	8008ac6 <HAL_TIM_PWM_Start_DMA+0x142>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	bf0c      	ite	eq
 8008ac0:	2301      	moveq	r3, #1
 8008ac2:	2300      	movne	r3, #0
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d034      	beq.n	8008b34 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <HAL_TIM_PWM_Start_DMA+0x152>
 8008ad0:	887b      	ldrh	r3, [r7, #2]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e152      	b.n	8008d80 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d104      	bne.n	8008aea <HAL_TIM_PWM_Start_DMA+0x166>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2202      	movs	r2, #2
 8008ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ae8:	e026      	b.n	8008b38 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	d104      	bne.n	8008afa <HAL_TIM_PWM_Start_DMA+0x176>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2202      	movs	r2, #2
 8008af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008af8:	e01e      	b.n	8008b38 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	2b08      	cmp	r3, #8
 8008afe:	d104      	bne.n	8008b0a <HAL_TIM_PWM_Start_DMA+0x186>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2202      	movs	r2, #2
 8008b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b08:	e016      	b.n	8008b38 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	2b0c      	cmp	r3, #12
 8008b0e:	d104      	bne.n	8008b1a <HAL_TIM_PWM_Start_DMA+0x196>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2202      	movs	r2, #2
 8008b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b18:	e00e      	b.n	8008b38 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	2b10      	cmp	r3, #16
 8008b1e:	d104      	bne.n	8008b2a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2202      	movs	r2, #2
 8008b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b28:	e006      	b.n	8008b38 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b32:	e001      	b.n	8008b38 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e123      	b.n	8008d80 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	2b0c      	cmp	r3, #12
 8008b3c:	f200 80ae 	bhi.w	8008c9c <HAL_TIM_PWM_Start_DMA+0x318>
 8008b40:	a201      	add	r2, pc, #4	@ (adr r2, 8008b48 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8008b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b46:	bf00      	nop
 8008b48:	08008b7d 	.word	0x08008b7d
 8008b4c:	08008c9d 	.word	0x08008c9d
 8008b50:	08008c9d 	.word	0x08008c9d
 8008b54:	08008c9d 	.word	0x08008c9d
 8008b58:	08008bc5 	.word	0x08008bc5
 8008b5c:	08008c9d 	.word	0x08008c9d
 8008b60:	08008c9d 	.word	0x08008c9d
 8008b64:	08008c9d 	.word	0x08008c9d
 8008b68:	08008c0d 	.word	0x08008c0d
 8008b6c:	08008c9d 	.word	0x08008c9d
 8008b70:	08008c9d 	.word	0x08008c9d
 8008b74:	08008c9d 	.word	0x08008c9d
 8008b78:	08008c55 	.word	0x08008c55
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b80:	4a81      	ldr	r2, [pc, #516]	@ (8008d88 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008b82:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b88:	4a80      	ldr	r2, [pc, #512]	@ (8008d8c <HAL_TIM_PWM_Start_DMA+0x408>)
 8008b8a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b90:	4a7f      	ldr	r2, [pc, #508]	@ (8008d90 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008b92:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8008b98:	6879      	ldr	r1, [r7, #4]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	3334      	adds	r3, #52	@ 0x34
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	887b      	ldrh	r3, [r7, #2]
 8008ba4:	f7fd f9c6 	bl	8005f34 <HAL_DMA_Start_IT>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d001      	beq.n	8008bb2 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e0e6      	b.n	8008d80 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68da      	ldr	r2, [r3, #12]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bc0:	60da      	str	r2, [r3, #12]
      break;
 8008bc2:	e06e      	b.n	8008ca2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc8:	4a6f      	ldr	r2, [pc, #444]	@ (8008d88 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008bca:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd0:	4a6e      	ldr	r2, [pc, #440]	@ (8008d8c <HAL_TIM_PWM_Start_DMA+0x408>)
 8008bd2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd8:	4a6d      	ldr	r2, [pc, #436]	@ (8008d90 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008bda:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008be0:	6879      	ldr	r1, [r7, #4]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3338      	adds	r3, #56	@ 0x38
 8008be8:	461a      	mov	r2, r3
 8008bea:	887b      	ldrh	r3, [r7, #2]
 8008bec:	f7fd f9a2 	bl	8005f34 <HAL_DMA_Start_IT>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e0c2      	b.n	8008d80 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68da      	ldr	r2, [r3, #12]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008c08:	60da      	str	r2, [r3, #12]
      break;
 8008c0a:	e04a      	b.n	8008ca2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c10:	4a5d      	ldr	r2, [pc, #372]	@ (8008d88 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008c12:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c18:	4a5c      	ldr	r2, [pc, #368]	@ (8008d8c <HAL_TIM_PWM_Start_DMA+0x408>)
 8008c1a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c20:	4a5b      	ldr	r2, [pc, #364]	@ (8008d90 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008c22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008c28:	6879      	ldr	r1, [r7, #4]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	333c      	adds	r3, #60	@ 0x3c
 8008c30:	461a      	mov	r2, r3
 8008c32:	887b      	ldrh	r3, [r7, #2]
 8008c34:	f7fd f97e 	bl	8005f34 <HAL_DMA_Start_IT>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d001      	beq.n	8008c42 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e09e      	b.n	8008d80 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	68da      	ldr	r2, [r3, #12]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c50:	60da      	str	r2, [r3, #12]
      break;
 8008c52:	e026      	b.n	8008ca2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c58:	4a4b      	ldr	r2, [pc, #300]	@ (8008d88 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c60:	4a4a      	ldr	r2, [pc, #296]	@ (8008d8c <HAL_TIM_PWM_Start_DMA+0x408>)
 8008c62:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c68:	4a49      	ldr	r2, [pc, #292]	@ (8008d90 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008c6a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008c70:	6879      	ldr	r1, [r7, #4]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3340      	adds	r3, #64	@ 0x40
 8008c78:	461a      	mov	r2, r3
 8008c7a:	887b      	ldrh	r3, [r7, #2]
 8008c7c:	f7fd f95a 	bl	8005f34 <HAL_DMA_Start_IT>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e07a      	b.n	8008d80 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68da      	ldr	r2, [r3, #12]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008c98:	60da      	str	r2, [r3, #12]
      break;
 8008c9a:	e002      	b.n	8008ca2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8008ca0:	bf00      	nop
  }

  if (status == HAL_OK)
 8008ca2:	7dfb      	ldrb	r3, [r7, #23]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d16a      	bne.n	8008d7e <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2201      	movs	r2, #1
 8008cae:	68b9      	ldr	r1, [r7, #8]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f001 fd9f 	bl	800a7f4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a36      	ldr	r2, [pc, #216]	@ (8008d94 <HAL_TIM_PWM_Start_DMA+0x410>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d013      	beq.n	8008ce8 <HAL_TIM_PWM_Start_DMA+0x364>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a34      	ldr	r2, [pc, #208]	@ (8008d98 <HAL_TIM_PWM_Start_DMA+0x414>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d00e      	beq.n	8008ce8 <HAL_TIM_PWM_Start_DMA+0x364>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a33      	ldr	r2, [pc, #204]	@ (8008d9c <HAL_TIM_PWM_Start_DMA+0x418>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d009      	beq.n	8008ce8 <HAL_TIM_PWM_Start_DMA+0x364>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a31      	ldr	r2, [pc, #196]	@ (8008da0 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d004      	beq.n	8008ce8 <HAL_TIM_PWM_Start_DMA+0x364>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a30      	ldr	r2, [pc, #192]	@ (8008da4 <HAL_TIM_PWM_Start_DMA+0x420>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d101      	bne.n	8008cec <HAL_TIM_PWM_Start_DMA+0x368>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e000      	b.n	8008cee <HAL_TIM_PWM_Start_DMA+0x36a>
 8008cec:	2300      	movs	r3, #0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d007      	beq.n	8008d02 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a23      	ldr	r2, [pc, #140]	@ (8008d94 <HAL_TIM_PWM_Start_DMA+0x410>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d018      	beq.n	8008d3e <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d14:	d013      	beq.n	8008d3e <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a23      	ldr	r2, [pc, #140]	@ (8008da8 <HAL_TIM_PWM_Start_DMA+0x424>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d00e      	beq.n	8008d3e <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a21      	ldr	r2, [pc, #132]	@ (8008dac <HAL_TIM_PWM_Start_DMA+0x428>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d009      	beq.n	8008d3e <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8008d98 <HAL_TIM_PWM_Start_DMA+0x414>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d004      	beq.n	8008d3e <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a18      	ldr	r2, [pc, #96]	@ (8008d9c <HAL_TIM_PWM_Start_DMA+0x418>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d115      	bne.n	8008d6a <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	689a      	ldr	r2, [r3, #8]
 8008d44:	4b1a      	ldr	r3, [pc, #104]	@ (8008db0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8008d46:	4013      	ands	r3, r2
 8008d48:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	2b06      	cmp	r3, #6
 8008d4e:	d015      	beq.n	8008d7c <HAL_TIM_PWM_Start_DMA+0x3f8>
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d56:	d011      	beq.n	8008d7c <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f042 0201 	orr.w	r2, r2, #1
 8008d66:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d68:	e008      	b.n	8008d7c <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f042 0201 	orr.w	r2, r2, #1
 8008d78:	601a      	str	r2, [r3, #0]
 8008d7a:	e000      	b.n	8008d7e <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d7c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	08009c4b 	.word	0x08009c4b
 8008d8c:	08009cf3 	.word	0x08009cf3
 8008d90:	08009bb9 	.word	0x08009bb9
 8008d94:	40012c00 	.word	0x40012c00
 8008d98:	40013400 	.word	0x40013400
 8008d9c:	40014000 	.word	0x40014000
 8008da0:	40014400 	.word	0x40014400
 8008da4:	40014800 	.word	0x40014800
 8008da8:	40000400 	.word	0x40000400
 8008dac:	40000800 	.word	0x40000800
 8008db0:	00010007 	.word	0x00010007

08008db4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	2b0c      	cmp	r3, #12
 8008dc6:	d855      	bhi.n	8008e74 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dce:	bf00      	nop
 8008dd0:	08008e05 	.word	0x08008e05
 8008dd4:	08008e75 	.word	0x08008e75
 8008dd8:	08008e75 	.word	0x08008e75
 8008ddc:	08008e75 	.word	0x08008e75
 8008de0:	08008e21 	.word	0x08008e21
 8008de4:	08008e75 	.word	0x08008e75
 8008de8:	08008e75 	.word	0x08008e75
 8008dec:	08008e75 	.word	0x08008e75
 8008df0:	08008e3d 	.word	0x08008e3d
 8008df4:	08008e75 	.word	0x08008e75
 8008df8:	08008e75 	.word	0x08008e75
 8008dfc:	08008e75 	.word	0x08008e75
 8008e00:	08008e59 	.word	0x08008e59
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68da      	ldr	r2, [r3, #12]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008e12:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fd f906 	bl	800602a <HAL_DMA_Abort_IT>
      break;
 8008e1e:	e02c      	b.n	8008e7a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68da      	ldr	r2, [r3, #12]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e2e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fd f8f8 	bl	800602a <HAL_DMA_Abort_IT>
      break;
 8008e3a:	e01e      	b.n	8008e7a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68da      	ldr	r2, [r3, #12]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e4a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7fd f8ea 	bl	800602a <HAL_DMA_Abort_IT>
      break;
 8008e56:	e010      	b.n	8008e7a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68da      	ldr	r2, [r3, #12]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e66:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7fd f8dc 	bl	800602a <HAL_DMA_Abort_IT>
      break;
 8008e72:	e002      	b.n	8008e7a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	73fb      	strb	r3, [r7, #15]
      break;
 8008e78:	bf00      	nop
  }

  if (status == HAL_OK)
 8008e7a:	7bfb      	ldrb	r3, [r7, #15]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f040 8081 	bne.w	8008f84 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2200      	movs	r2, #0
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f001 fcb2 	bl	800a7f4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a3e      	ldr	r2, [pc, #248]	@ (8008f90 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d013      	beq.n	8008ec2 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a3d      	ldr	r2, [pc, #244]	@ (8008f94 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d00e      	beq.n	8008ec2 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a3b      	ldr	r2, [pc, #236]	@ (8008f98 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d009      	beq.n	8008ec2 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a3a      	ldr	r2, [pc, #232]	@ (8008f9c <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d004      	beq.n	8008ec2 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a38      	ldr	r2, [pc, #224]	@ (8008fa0 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d101      	bne.n	8008ec6 <HAL_TIM_PWM_Stop_DMA+0x112>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e000      	b.n	8008ec8 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d017      	beq.n	8008efc <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6a1a      	ldr	r2, [r3, #32]
 8008ed2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10f      	bne.n	8008efc <HAL_TIM_PWM_Stop_DMA+0x148>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6a1a      	ldr	r2, [r3, #32]
 8008ee2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d107      	bne.n	8008efc <HAL_TIM_PWM_Stop_DMA+0x148>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008efa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6a1a      	ldr	r2, [r3, #32]
 8008f02:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008f06:	4013      	ands	r3, r2
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10f      	bne.n	8008f2c <HAL_TIM_PWM_Stop_DMA+0x178>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6a1a      	ldr	r2, [r3, #32]
 8008f12:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008f16:	4013      	ands	r3, r2
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d107      	bne.n	8008f2c <HAL_TIM_PWM_Stop_DMA+0x178>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f022 0201 	bic.w	r2, r2, #1
 8008f2a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d104      	bne.n	8008f3c <HAL_TIM_PWM_Stop_DMA+0x188>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2201      	movs	r2, #1
 8008f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f3a:	e023      	b.n	8008f84 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2b04      	cmp	r3, #4
 8008f40:	d104      	bne.n	8008f4c <HAL_TIM_PWM_Stop_DMA+0x198>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f4a:	e01b      	b.n	8008f84 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	2b08      	cmp	r3, #8
 8008f50:	d104      	bne.n	8008f5c <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f5a:	e013      	b.n	8008f84 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	2b0c      	cmp	r3, #12
 8008f60:	d104      	bne.n	8008f6c <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f6a:	e00b      	b.n	8008f84 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	2b10      	cmp	r3, #16
 8008f70:	d104      	bne.n	8008f7c <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f7a:	e003      	b.n	8008f84 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	40012c00 	.word	0x40012c00
 8008f94:	40013400 	.word	0x40013400
 8008f98:	40014000 	.word	0x40014000
 8008f9c:	40014400 	.word	0x40014400
 8008fa0:	40014800 	.word	0x40014800

08008fa4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d101      	bne.n	8008fb6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e049      	b.n	800904a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d106      	bne.n	8008fd0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f841 	bl	8009052 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3304      	adds	r3, #4
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	4610      	mov	r0, r2
 8008fe4:	f000 feba 	bl	8009d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009052:	b480      	push	{r7}
 8009054:	b083      	sub	sp, #12
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800905a:	bf00      	nop
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
	...

08009068 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d104      	bne.n	8009086 <HAL_TIM_IC_Start_IT+0x1e>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009082:	b2db      	uxtb	r3, r3
 8009084:	e023      	b.n	80090ce <HAL_TIM_IC_Start_IT+0x66>
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2b04      	cmp	r3, #4
 800908a:	d104      	bne.n	8009096 <HAL_TIM_IC_Start_IT+0x2e>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009092:	b2db      	uxtb	r3, r3
 8009094:	e01b      	b.n	80090ce <HAL_TIM_IC_Start_IT+0x66>
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	2b08      	cmp	r3, #8
 800909a:	d104      	bne.n	80090a6 <HAL_TIM_IC_Start_IT+0x3e>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	e013      	b.n	80090ce <HAL_TIM_IC_Start_IT+0x66>
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	2b0c      	cmp	r3, #12
 80090aa:	d104      	bne.n	80090b6 <HAL_TIM_IC_Start_IT+0x4e>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	e00b      	b.n	80090ce <HAL_TIM_IC_Start_IT+0x66>
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	2b10      	cmp	r3, #16
 80090ba:	d104      	bne.n	80090c6 <HAL_TIM_IC_Start_IT+0x5e>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	e003      	b.n	80090ce <HAL_TIM_IC_Start_IT+0x66>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d104      	bne.n	80090e0 <HAL_TIM_IC_Start_IT+0x78>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	e013      	b.n	8009108 <HAL_TIM_IC_Start_IT+0xa0>
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	2b04      	cmp	r3, #4
 80090e4:	d104      	bne.n	80090f0 <HAL_TIM_IC_Start_IT+0x88>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	e00b      	b.n	8009108 <HAL_TIM_IC_Start_IT+0xa0>
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2b08      	cmp	r3, #8
 80090f4:	d104      	bne.n	8009100 <HAL_TIM_IC_Start_IT+0x98>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	e003      	b.n	8009108 <HAL_TIM_IC_Start_IT+0xa0>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8009106:	b2db      	uxtb	r3, r3
 8009108:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800910a:	7bbb      	ldrb	r3, [r7, #14]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d102      	bne.n	8009116 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009110:	7b7b      	ldrb	r3, [r7, #13]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d001      	beq.n	800911a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e0d8      	b.n	80092cc <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d104      	bne.n	800912a <HAL_TIM_IC_Start_IT+0xc2>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2202      	movs	r2, #2
 8009124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009128:	e023      	b.n	8009172 <HAL_TIM_IC_Start_IT+0x10a>
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b04      	cmp	r3, #4
 800912e:	d104      	bne.n	800913a <HAL_TIM_IC_Start_IT+0xd2>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2202      	movs	r2, #2
 8009134:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009138:	e01b      	b.n	8009172 <HAL_TIM_IC_Start_IT+0x10a>
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2b08      	cmp	r3, #8
 800913e:	d104      	bne.n	800914a <HAL_TIM_IC_Start_IT+0xe2>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2202      	movs	r2, #2
 8009144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009148:	e013      	b.n	8009172 <HAL_TIM_IC_Start_IT+0x10a>
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	2b0c      	cmp	r3, #12
 800914e:	d104      	bne.n	800915a <HAL_TIM_IC_Start_IT+0xf2>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2202      	movs	r2, #2
 8009154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009158:	e00b      	b.n	8009172 <HAL_TIM_IC_Start_IT+0x10a>
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	2b10      	cmp	r3, #16
 800915e:	d104      	bne.n	800916a <HAL_TIM_IC_Start_IT+0x102>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2202      	movs	r2, #2
 8009164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009168:	e003      	b.n	8009172 <HAL_TIM_IC_Start_IT+0x10a>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2202      	movs	r2, #2
 800916e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d104      	bne.n	8009182 <HAL_TIM_IC_Start_IT+0x11a>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2202      	movs	r2, #2
 800917c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009180:	e013      	b.n	80091aa <HAL_TIM_IC_Start_IT+0x142>
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	2b04      	cmp	r3, #4
 8009186:	d104      	bne.n	8009192 <HAL_TIM_IC_Start_IT+0x12a>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009190:	e00b      	b.n	80091aa <HAL_TIM_IC_Start_IT+0x142>
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b08      	cmp	r3, #8
 8009196:	d104      	bne.n	80091a2 <HAL_TIM_IC_Start_IT+0x13a>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2202      	movs	r2, #2
 800919c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80091a0:	e003      	b.n	80091aa <HAL_TIM_IC_Start_IT+0x142>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2202      	movs	r2, #2
 80091a6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	2b0c      	cmp	r3, #12
 80091ae:	d841      	bhi.n	8009234 <HAL_TIM_IC_Start_IT+0x1cc>
 80091b0:	a201      	add	r2, pc, #4	@ (adr r2, 80091b8 <HAL_TIM_IC_Start_IT+0x150>)
 80091b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b6:	bf00      	nop
 80091b8:	080091ed 	.word	0x080091ed
 80091bc:	08009235 	.word	0x08009235
 80091c0:	08009235 	.word	0x08009235
 80091c4:	08009235 	.word	0x08009235
 80091c8:	080091ff 	.word	0x080091ff
 80091cc:	08009235 	.word	0x08009235
 80091d0:	08009235 	.word	0x08009235
 80091d4:	08009235 	.word	0x08009235
 80091d8:	08009211 	.word	0x08009211
 80091dc:	08009235 	.word	0x08009235
 80091e0:	08009235 	.word	0x08009235
 80091e4:	08009235 	.word	0x08009235
 80091e8:	08009223 	.word	0x08009223
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68da      	ldr	r2, [r3, #12]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f042 0202 	orr.w	r2, r2, #2
 80091fa:	60da      	str	r2, [r3, #12]
      break;
 80091fc:	e01d      	b.n	800923a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68da      	ldr	r2, [r3, #12]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f042 0204 	orr.w	r2, r2, #4
 800920c:	60da      	str	r2, [r3, #12]
      break;
 800920e:	e014      	b.n	800923a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68da      	ldr	r2, [r3, #12]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f042 0208 	orr.w	r2, r2, #8
 800921e:	60da      	str	r2, [r3, #12]
      break;
 8009220:	e00b      	b.n	800923a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68da      	ldr	r2, [r3, #12]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f042 0210 	orr.w	r2, r2, #16
 8009230:	60da      	str	r2, [r3, #12]
      break;
 8009232:	e002      	b.n	800923a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	73fb      	strb	r3, [r7, #15]
      break;
 8009238:	bf00      	nop
  }

  if (status == HAL_OK)
 800923a:	7bfb      	ldrb	r3, [r7, #15]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d144      	bne.n	80092ca <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2201      	movs	r2, #1
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	4618      	mov	r0, r3
 800924a:	f001 fad3 	bl	800a7f4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a20      	ldr	r2, [pc, #128]	@ (80092d4 <HAL_TIM_IC_Start_IT+0x26c>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d018      	beq.n	800928a <HAL_TIM_IC_Start_IT+0x222>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009260:	d013      	beq.n	800928a <HAL_TIM_IC_Start_IT+0x222>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a1c      	ldr	r2, [pc, #112]	@ (80092d8 <HAL_TIM_IC_Start_IT+0x270>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d00e      	beq.n	800928a <HAL_TIM_IC_Start_IT+0x222>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a1a      	ldr	r2, [pc, #104]	@ (80092dc <HAL_TIM_IC_Start_IT+0x274>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d009      	beq.n	800928a <HAL_TIM_IC_Start_IT+0x222>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a19      	ldr	r2, [pc, #100]	@ (80092e0 <HAL_TIM_IC_Start_IT+0x278>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d004      	beq.n	800928a <HAL_TIM_IC_Start_IT+0x222>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a17      	ldr	r2, [pc, #92]	@ (80092e4 <HAL_TIM_IC_Start_IT+0x27c>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d115      	bne.n	80092b6 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	689a      	ldr	r2, [r3, #8]
 8009290:	4b15      	ldr	r3, [pc, #84]	@ (80092e8 <HAL_TIM_IC_Start_IT+0x280>)
 8009292:	4013      	ands	r3, r2
 8009294:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	2b06      	cmp	r3, #6
 800929a:	d015      	beq.n	80092c8 <HAL_TIM_IC_Start_IT+0x260>
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092a2:	d011      	beq.n	80092c8 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f042 0201 	orr.w	r2, r2, #1
 80092b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092b4:	e008      	b.n	80092c8 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f042 0201 	orr.w	r2, r2, #1
 80092c4:	601a      	str	r2, [r3, #0]
 80092c6:	e000      	b.n	80092ca <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092c8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	40012c00 	.word	0x40012c00
 80092d8:	40000400 	.word	0x40000400
 80092dc:	40000800 	.word	0x40000800
 80092e0:	40013400 	.word	0x40013400
 80092e4:	40014000 	.word	0x40014000
 80092e8:	00010007 	.word	0x00010007

080092ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	f003 0302 	and.w	r3, r3, #2
 800930a:	2b00      	cmp	r3, #0
 800930c:	d020      	beq.n	8009350 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f003 0302 	and.w	r3, r3, #2
 8009314:	2b00      	cmp	r3, #0
 8009316:	d01b      	beq.n	8009350 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f06f 0202 	mvn.w	r2, #2
 8009320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2201      	movs	r2, #1
 8009326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	f003 0303 	and.w	r3, r3, #3
 8009332:	2b00      	cmp	r3, #0
 8009334:	d003      	beq.n	800933e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7f8 f974 	bl	8001624 <HAL_TIM_IC_CaptureCallback>
 800933c:	e005      	b.n	800934a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fc12 	bl	8009b68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7fa fc51 	bl	8003bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	f003 0304 	and.w	r3, r3, #4
 8009356:	2b00      	cmp	r3, #0
 8009358:	d020      	beq.n	800939c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f003 0304 	and.w	r3, r3, #4
 8009360:	2b00      	cmp	r3, #0
 8009362:	d01b      	beq.n	800939c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f06f 0204 	mvn.w	r2, #4
 800936c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2202      	movs	r2, #2
 8009372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800937e:	2b00      	cmp	r3, #0
 8009380:	d003      	beq.n	800938a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7f8 f94e 	bl	8001624 <HAL_TIM_IC_CaptureCallback>
 8009388:	e005      	b.n	8009396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fbec 	bl	8009b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7fa fc2b 	bl	8003bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	f003 0308 	and.w	r3, r3, #8
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d020      	beq.n	80093e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f003 0308 	and.w	r3, r3, #8
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d01b      	beq.n	80093e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f06f 0208 	mvn.w	r2, #8
 80093b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2204      	movs	r2, #4
 80093be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	f003 0303 	and.w	r3, r3, #3
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d003      	beq.n	80093d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7f8 f928 	bl	8001624 <HAL_TIM_IC_CaptureCallback>
 80093d4:	e005      	b.n	80093e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fbc6 	bl	8009b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7fa fc05 	bl	8003bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	f003 0310 	and.w	r3, r3, #16
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d020      	beq.n	8009434 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f003 0310 	and.w	r3, r3, #16
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d01b      	beq.n	8009434 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f06f 0210 	mvn.w	r2, #16
 8009404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2208      	movs	r2, #8
 800940a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	69db      	ldr	r3, [r3, #28]
 8009412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009416:	2b00      	cmp	r3, #0
 8009418:	d003      	beq.n	8009422 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7f8 f902 	bl	8001624 <HAL_TIM_IC_CaptureCallback>
 8009420:	e005      	b.n	800942e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fba0 	bl	8009b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f7fa fbdf 	bl	8003bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00c      	beq.n	8009458 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f003 0301 	and.w	r3, r3, #1
 8009444:	2b00      	cmp	r3, #0
 8009446:	d007      	beq.n	8009458 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f06f 0201 	mvn.w	r2, #1
 8009450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7f8 fb72 	bl	8001b3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800945e:	2b00      	cmp	r3, #0
 8009460:	d104      	bne.n	800946c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00c      	beq.n	8009486 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009472:	2b00      	cmp	r3, #0
 8009474:	d007      	beq.n	8009486 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800947e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f001 fa69 	bl	800a958 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00c      	beq.n	80094aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009496:	2b00      	cmp	r3, #0
 8009498:	d007      	beq.n	80094aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80094a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f001 fa61 	bl	800a96c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00c      	beq.n	80094ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d007      	beq.n	80094ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80094c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fb61 	bl	8009b90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	f003 0320 	and.w	r3, r3, #32
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00c      	beq.n	80094f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f003 0320 	and.w	r3, r3, #32
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d007      	beq.n	80094f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f06f 0220 	mvn.w	r2, #32
 80094ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f001 fa29 	bl	800a944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00c      	beq.n	8009516 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009502:	2b00      	cmp	r3, #0
 8009504:	d007      	beq.n	8009516 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800950e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f001 fa35 	bl	800a980 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00c      	beq.n	800953a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009526:	2b00      	cmp	r3, #0
 8009528:	d007      	beq.n	800953a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f001 fa2d 	bl	800a994 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00c      	beq.n	800955e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800954a:	2b00      	cmp	r3, #0
 800954c:	d007      	beq.n	800955e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f001 fa25 	bl	800a9a8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00c      	beq.n	8009582 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800956e:	2b00      	cmp	r3, #0
 8009570:	d007      	beq.n	8009582 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800957a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f001 fa1d 	bl	800a9bc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009582:	bf00      	nop
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b086      	sub	sp, #24
 800958e:	af00      	add	r7, sp, #0
 8009590:	60f8      	str	r0, [r7, #12]
 8009592:	60b9      	str	r1, [r7, #8]
 8009594:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d101      	bne.n	80095a8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80095a4:	2302      	movs	r3, #2
 80095a6:	e088      	b.n	80096ba <HAL_TIM_IC_ConfigChannel+0x130>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d11b      	bne.n	80095ee <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80095c6:	f000 ff5b 	bl	800a480 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	699a      	ldr	r2, [r3, #24]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f022 020c 	bic.w	r2, r2, #12
 80095d8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	6999      	ldr	r1, [r3, #24]
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	689a      	ldr	r2, [r3, #8]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	430a      	orrs	r2, r1
 80095ea:	619a      	str	r2, [r3, #24]
 80095ec:	e060      	b.n	80096b0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2b04      	cmp	r3, #4
 80095f2:	d11c      	bne.n	800962e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009604:	f000 ffd3 	bl	800a5ae <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	699a      	ldr	r2, [r3, #24]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009616:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	6999      	ldr	r1, [r3, #24]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	021a      	lsls	r2, r3, #8
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	430a      	orrs	r2, r1
 800962a:	619a      	str	r2, [r3, #24]
 800962c:	e040      	b.n	80096b0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2b08      	cmp	r3, #8
 8009632:	d11b      	bne.n	800966c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009644:	f001 f820 	bl	800a688 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	69da      	ldr	r2, [r3, #28]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f022 020c 	bic.w	r2, r2, #12
 8009656:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	69d9      	ldr	r1, [r3, #28]
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	689a      	ldr	r2, [r3, #8]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	430a      	orrs	r2, r1
 8009668:	61da      	str	r2, [r3, #28]
 800966a:	e021      	b.n	80096b0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b0c      	cmp	r3, #12
 8009670:	d11c      	bne.n	80096ac <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009682:	f001 f83d 	bl	800a700 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	69da      	ldr	r2, [r3, #28]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009694:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	69d9      	ldr	r1, [r3, #28]
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	021a      	lsls	r2, r3, #8
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	430a      	orrs	r2, r1
 80096a8:	61da      	str	r2, [r3, #28]
 80096aa:	e001      	b.n	80096b0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80096b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3718      	adds	r7, #24
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
	...

080096c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096d0:	2300      	movs	r3, #0
 80096d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d101      	bne.n	80096e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80096de:	2302      	movs	r3, #2
 80096e0:	e0ff      	b.n	80098e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2b14      	cmp	r3, #20
 80096ee:	f200 80f0 	bhi.w	80098d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80096f2:	a201      	add	r2, pc, #4	@ (adr r2, 80096f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80096f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f8:	0800974d 	.word	0x0800974d
 80096fc:	080098d3 	.word	0x080098d3
 8009700:	080098d3 	.word	0x080098d3
 8009704:	080098d3 	.word	0x080098d3
 8009708:	0800978d 	.word	0x0800978d
 800970c:	080098d3 	.word	0x080098d3
 8009710:	080098d3 	.word	0x080098d3
 8009714:	080098d3 	.word	0x080098d3
 8009718:	080097cf 	.word	0x080097cf
 800971c:	080098d3 	.word	0x080098d3
 8009720:	080098d3 	.word	0x080098d3
 8009724:	080098d3 	.word	0x080098d3
 8009728:	0800980f 	.word	0x0800980f
 800972c:	080098d3 	.word	0x080098d3
 8009730:	080098d3 	.word	0x080098d3
 8009734:	080098d3 	.word	0x080098d3
 8009738:	08009851 	.word	0x08009851
 800973c:	080098d3 	.word	0x080098d3
 8009740:	080098d3 	.word	0x080098d3
 8009744:	080098d3 	.word	0x080098d3
 8009748:	08009891 	.word	0x08009891
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	68b9      	ldr	r1, [r7, #8]
 8009752:	4618      	mov	r0, r3
 8009754:	f000 fb9e 	bl	8009e94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	699a      	ldr	r2, [r3, #24]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f042 0208 	orr.w	r2, r2, #8
 8009766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	699a      	ldr	r2, [r3, #24]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f022 0204 	bic.w	r2, r2, #4
 8009776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6999      	ldr	r1, [r3, #24]
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	691a      	ldr	r2, [r3, #16]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	430a      	orrs	r2, r1
 8009788:	619a      	str	r2, [r3, #24]
      break;
 800978a:	e0a5      	b.n	80098d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68b9      	ldr	r1, [r7, #8]
 8009792:	4618      	mov	r0, r3
 8009794:	f000 fc0e 	bl	8009fb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	699a      	ldr	r2, [r3, #24]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80097a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	699a      	ldr	r2, [r3, #24]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6999      	ldr	r1, [r3, #24]
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	021a      	lsls	r2, r3, #8
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	430a      	orrs	r2, r1
 80097ca:	619a      	str	r2, [r3, #24]
      break;
 80097cc:	e084      	b.n	80098d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68b9      	ldr	r1, [r7, #8]
 80097d4:	4618      	mov	r0, r3
 80097d6:	f000 fc77 	bl	800a0c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	69da      	ldr	r2, [r3, #28]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f042 0208 	orr.w	r2, r2, #8
 80097e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	69da      	ldr	r2, [r3, #28]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f022 0204 	bic.w	r2, r2, #4
 80097f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	69d9      	ldr	r1, [r3, #28]
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	691a      	ldr	r2, [r3, #16]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	430a      	orrs	r2, r1
 800980a:	61da      	str	r2, [r3, #28]
      break;
 800980c:	e064      	b.n	80098d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68b9      	ldr	r1, [r7, #8]
 8009814:	4618      	mov	r0, r3
 8009816:	f000 fcdf 	bl	800a1d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	69da      	ldr	r2, [r3, #28]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009828:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	69da      	ldr	r2, [r3, #28]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	69d9      	ldr	r1, [r3, #28]
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	021a      	lsls	r2, r3, #8
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	430a      	orrs	r2, r1
 800984c:	61da      	str	r2, [r3, #28]
      break;
 800984e:	e043      	b.n	80098d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68b9      	ldr	r1, [r7, #8]
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fd48 	bl	800a2ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f042 0208 	orr.w	r2, r2, #8
 800986a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f022 0204 	bic.w	r2, r2, #4
 800987a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	691a      	ldr	r2, [r3, #16]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	430a      	orrs	r2, r1
 800988c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800988e:	e023      	b.n	80098d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68b9      	ldr	r1, [r7, #8]
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fd8c 	bl	800a3b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80098aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	021a      	lsls	r2, r3, #8
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	430a      	orrs	r2, r1
 80098ce:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80098d0:	e002      	b.n	80098d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	75fb      	strb	r3, [r7, #23]
      break;
 80098d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80098e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3718      	adds	r7, #24
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop

080098ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009900:	2b01      	cmp	r3, #1
 8009902:	d101      	bne.n	8009908 <HAL_TIM_ConfigClockSource+0x1c>
 8009904:	2302      	movs	r3, #2
 8009906:	e0de      	b.n	8009ac6 <HAL_TIM_ConfigClockSource+0x1da>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2202      	movs	r2, #2
 8009914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009926:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800992a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009932:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a63      	ldr	r2, [pc, #396]	@ (8009ad0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009942:	4293      	cmp	r3, r2
 8009944:	f000 80a9 	beq.w	8009a9a <HAL_TIM_ConfigClockSource+0x1ae>
 8009948:	4a61      	ldr	r2, [pc, #388]	@ (8009ad0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800994a:	4293      	cmp	r3, r2
 800994c:	f200 80ae 	bhi.w	8009aac <HAL_TIM_ConfigClockSource+0x1c0>
 8009950:	4a60      	ldr	r2, [pc, #384]	@ (8009ad4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009952:	4293      	cmp	r3, r2
 8009954:	f000 80a1 	beq.w	8009a9a <HAL_TIM_ConfigClockSource+0x1ae>
 8009958:	4a5e      	ldr	r2, [pc, #376]	@ (8009ad4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800995a:	4293      	cmp	r3, r2
 800995c:	f200 80a6 	bhi.w	8009aac <HAL_TIM_ConfigClockSource+0x1c0>
 8009960:	4a5d      	ldr	r2, [pc, #372]	@ (8009ad8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009962:	4293      	cmp	r3, r2
 8009964:	f000 8099 	beq.w	8009a9a <HAL_TIM_ConfigClockSource+0x1ae>
 8009968:	4a5b      	ldr	r2, [pc, #364]	@ (8009ad8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800996a:	4293      	cmp	r3, r2
 800996c:	f200 809e 	bhi.w	8009aac <HAL_TIM_ConfigClockSource+0x1c0>
 8009970:	4a5a      	ldr	r2, [pc, #360]	@ (8009adc <HAL_TIM_ConfigClockSource+0x1f0>)
 8009972:	4293      	cmp	r3, r2
 8009974:	f000 8091 	beq.w	8009a9a <HAL_TIM_ConfigClockSource+0x1ae>
 8009978:	4a58      	ldr	r2, [pc, #352]	@ (8009adc <HAL_TIM_ConfigClockSource+0x1f0>)
 800997a:	4293      	cmp	r3, r2
 800997c:	f200 8096 	bhi.w	8009aac <HAL_TIM_ConfigClockSource+0x1c0>
 8009980:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009984:	f000 8089 	beq.w	8009a9a <HAL_TIM_ConfigClockSource+0x1ae>
 8009988:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800998c:	f200 808e 	bhi.w	8009aac <HAL_TIM_ConfigClockSource+0x1c0>
 8009990:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009994:	d03e      	beq.n	8009a14 <HAL_TIM_ConfigClockSource+0x128>
 8009996:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800999a:	f200 8087 	bhi.w	8009aac <HAL_TIM_ConfigClockSource+0x1c0>
 800999e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099a2:	f000 8086 	beq.w	8009ab2 <HAL_TIM_ConfigClockSource+0x1c6>
 80099a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099aa:	d87f      	bhi.n	8009aac <HAL_TIM_ConfigClockSource+0x1c0>
 80099ac:	2b70      	cmp	r3, #112	@ 0x70
 80099ae:	d01a      	beq.n	80099e6 <HAL_TIM_ConfigClockSource+0xfa>
 80099b0:	2b70      	cmp	r3, #112	@ 0x70
 80099b2:	d87b      	bhi.n	8009aac <HAL_TIM_ConfigClockSource+0x1c0>
 80099b4:	2b60      	cmp	r3, #96	@ 0x60
 80099b6:	d050      	beq.n	8009a5a <HAL_TIM_ConfigClockSource+0x16e>
 80099b8:	2b60      	cmp	r3, #96	@ 0x60
 80099ba:	d877      	bhi.n	8009aac <HAL_TIM_ConfigClockSource+0x1c0>
 80099bc:	2b50      	cmp	r3, #80	@ 0x50
 80099be:	d03c      	beq.n	8009a3a <HAL_TIM_ConfigClockSource+0x14e>
 80099c0:	2b50      	cmp	r3, #80	@ 0x50
 80099c2:	d873      	bhi.n	8009aac <HAL_TIM_ConfigClockSource+0x1c0>
 80099c4:	2b40      	cmp	r3, #64	@ 0x40
 80099c6:	d058      	beq.n	8009a7a <HAL_TIM_ConfigClockSource+0x18e>
 80099c8:	2b40      	cmp	r3, #64	@ 0x40
 80099ca:	d86f      	bhi.n	8009aac <HAL_TIM_ConfigClockSource+0x1c0>
 80099cc:	2b30      	cmp	r3, #48	@ 0x30
 80099ce:	d064      	beq.n	8009a9a <HAL_TIM_ConfigClockSource+0x1ae>
 80099d0:	2b30      	cmp	r3, #48	@ 0x30
 80099d2:	d86b      	bhi.n	8009aac <HAL_TIM_ConfigClockSource+0x1c0>
 80099d4:	2b20      	cmp	r3, #32
 80099d6:	d060      	beq.n	8009a9a <HAL_TIM_ConfigClockSource+0x1ae>
 80099d8:	2b20      	cmp	r3, #32
 80099da:	d867      	bhi.n	8009aac <HAL_TIM_ConfigClockSource+0x1c0>
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d05c      	beq.n	8009a9a <HAL_TIM_ConfigClockSource+0x1ae>
 80099e0:	2b10      	cmp	r3, #16
 80099e2:	d05a      	beq.n	8009a9a <HAL_TIM_ConfigClockSource+0x1ae>
 80099e4:	e062      	b.n	8009aac <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80099f6:	f000 fedd 	bl	800a7b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009a08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	609a      	str	r2, [r3, #8]
      break;
 8009a12:	e04f      	b.n	8009ab4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a24:	f000 fec6 	bl	800a7b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	689a      	ldr	r2, [r3, #8]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009a36:	609a      	str	r2, [r3, #8]
      break;
 8009a38:	e03c      	b.n	8009ab4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a46:	461a      	mov	r2, r3
 8009a48:	f000 fd82 	bl	800a550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2150      	movs	r1, #80	@ 0x50
 8009a52:	4618      	mov	r0, r3
 8009a54:	f000 fe91 	bl	800a77a <TIM_ITRx_SetConfig>
      break;
 8009a58:	e02c      	b.n	8009ab4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a66:	461a      	mov	r2, r3
 8009a68:	f000 fdde 	bl	800a628 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2160      	movs	r1, #96	@ 0x60
 8009a72:	4618      	mov	r0, r3
 8009a74:	f000 fe81 	bl	800a77a <TIM_ITRx_SetConfig>
      break;
 8009a78:	e01c      	b.n	8009ab4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a86:	461a      	mov	r2, r3
 8009a88:	f000 fd62 	bl	800a550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2140      	movs	r1, #64	@ 0x40
 8009a92:	4618      	mov	r0, r3
 8009a94:	f000 fe71 	bl	800a77a <TIM_ITRx_SetConfig>
      break;
 8009a98:	e00c      	b.n	8009ab4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	f000 fe68 	bl	800a77a <TIM_ITRx_SetConfig>
      break;
 8009aaa:	e003      	b.n	8009ab4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	73fb      	strb	r3, [r7, #15]
      break;
 8009ab0:	e000      	b.n	8009ab4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8009ab2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	00100070 	.word	0x00100070
 8009ad4:	00100040 	.word	0x00100040
 8009ad8:	00100030 	.word	0x00100030
 8009adc:	00100020 	.word	0x00100020

08009ae0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009aea:	2300      	movs	r3, #0
 8009aec:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	2b0c      	cmp	r3, #12
 8009af2:	d831      	bhi.n	8009b58 <HAL_TIM_ReadCapturedValue+0x78>
 8009af4:	a201      	add	r2, pc, #4	@ (adr r2, 8009afc <HAL_TIM_ReadCapturedValue+0x1c>)
 8009af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afa:	bf00      	nop
 8009afc:	08009b31 	.word	0x08009b31
 8009b00:	08009b59 	.word	0x08009b59
 8009b04:	08009b59 	.word	0x08009b59
 8009b08:	08009b59 	.word	0x08009b59
 8009b0c:	08009b3b 	.word	0x08009b3b
 8009b10:	08009b59 	.word	0x08009b59
 8009b14:	08009b59 	.word	0x08009b59
 8009b18:	08009b59 	.word	0x08009b59
 8009b1c:	08009b45 	.word	0x08009b45
 8009b20:	08009b59 	.word	0x08009b59
 8009b24:	08009b59 	.word	0x08009b59
 8009b28:	08009b59 	.word	0x08009b59
 8009b2c:	08009b4f 	.word	0x08009b4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b36:	60fb      	str	r3, [r7, #12]

      break;
 8009b38:	e00f      	b.n	8009b5a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b40:	60fb      	str	r3, [r7, #12]

      break;
 8009b42:	e00a      	b.n	8009b5a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b4a:	60fb      	str	r3, [r7, #12]

      break;
 8009b4c:	e005      	b.n	8009b5a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b54:	60fb      	str	r3, [r7, #12]

      break;
 8009b56:	e000      	b.n	8009b5a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009b58:	bf00      	nop
  }

  return tmpreg;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3714      	adds	r7, #20
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009b84:	bf00      	nop
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009bac:	bf00      	nop
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d107      	bne.n	8009be0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009bde:	e02a      	b.n	8009c36 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d107      	bne.n	8009bfa <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2202      	movs	r2, #2
 8009bee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009bf8:	e01d      	b.n	8009c36 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d107      	bne.n	8009c14 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2204      	movs	r2, #4
 8009c08:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c12:	e010      	b.n	8009c36 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d107      	bne.n	8009c2e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2208      	movs	r2, #8
 8009c22:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2201      	movs	r2, #1
 8009c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c2c:	e003      	b.n	8009c36 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f7ff ffb4 	bl	8009ba4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	771a      	strb	r2, [r3, #28]
}
 8009c42:	bf00      	nop
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b084      	sub	sp, #16
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c56:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d10b      	bne.n	8009c7a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2201      	movs	r2, #1
 8009c66:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	69db      	ldr	r3, [r3, #28]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d136      	bne.n	8009cde <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c78:	e031      	b.n	8009cde <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d10b      	bne.n	8009c9c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2202      	movs	r2, #2
 8009c88:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	69db      	ldr	r3, [r3, #28]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d125      	bne.n	8009cde <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c9a:	e020      	b.n	8009cde <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d10b      	bne.n	8009cbe <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2204      	movs	r2, #4
 8009caa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	69db      	ldr	r3, [r3, #28]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d114      	bne.n	8009cde <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009cbc:	e00f      	b.n	8009cde <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d10a      	bne.n	8009cde <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2208      	movs	r2, #8
 8009ccc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d103      	bne.n	8009cde <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f7f9 ff84 	bl	8003bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	771a      	strb	r2, [r3, #28]
}
 8009cea:	bf00      	nop
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cfe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d103      	bne.n	8009d12 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	771a      	strb	r2, [r3, #28]
 8009d10:	e019      	b.n	8009d46 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d103      	bne.n	8009d24 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2202      	movs	r2, #2
 8009d20:	771a      	strb	r2, [r3, #28]
 8009d22:	e010      	b.n	8009d46 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d103      	bne.n	8009d36 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2204      	movs	r2, #4
 8009d32:	771a      	strb	r2, [r3, #28]
 8009d34:	e007      	b.n	8009d46 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d102      	bne.n	8009d46 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2208      	movs	r2, #8
 8009d44:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009d46:	68f8      	ldr	r0, [r7, #12]
 8009d48:	f7ff ff18 	bl	8009b7c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	771a      	strb	r2, [r3, #28]
}
 8009d52:	bf00      	nop
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
	...

08009d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a42      	ldr	r2, [pc, #264]	@ (8009e78 <TIM_Base_SetConfig+0x11c>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d00f      	beq.n	8009d94 <TIM_Base_SetConfig+0x38>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d7a:	d00b      	beq.n	8009d94 <TIM_Base_SetConfig+0x38>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a3f      	ldr	r2, [pc, #252]	@ (8009e7c <TIM_Base_SetConfig+0x120>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d007      	beq.n	8009d94 <TIM_Base_SetConfig+0x38>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a3e      	ldr	r2, [pc, #248]	@ (8009e80 <TIM_Base_SetConfig+0x124>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d003      	beq.n	8009d94 <TIM_Base_SetConfig+0x38>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4a3d      	ldr	r2, [pc, #244]	@ (8009e84 <TIM_Base_SetConfig+0x128>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d108      	bne.n	8009da6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a33      	ldr	r2, [pc, #204]	@ (8009e78 <TIM_Base_SetConfig+0x11c>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d01b      	beq.n	8009de6 <TIM_Base_SetConfig+0x8a>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009db4:	d017      	beq.n	8009de6 <TIM_Base_SetConfig+0x8a>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a30      	ldr	r2, [pc, #192]	@ (8009e7c <TIM_Base_SetConfig+0x120>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d013      	beq.n	8009de6 <TIM_Base_SetConfig+0x8a>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a2f      	ldr	r2, [pc, #188]	@ (8009e80 <TIM_Base_SetConfig+0x124>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d00f      	beq.n	8009de6 <TIM_Base_SetConfig+0x8a>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4a2e      	ldr	r2, [pc, #184]	@ (8009e84 <TIM_Base_SetConfig+0x128>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d00b      	beq.n	8009de6 <TIM_Base_SetConfig+0x8a>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8009e88 <TIM_Base_SetConfig+0x12c>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d007      	beq.n	8009de6 <TIM_Base_SetConfig+0x8a>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a2c      	ldr	r2, [pc, #176]	@ (8009e8c <TIM_Base_SetConfig+0x130>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d003      	beq.n	8009de6 <TIM_Base_SetConfig+0x8a>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4a2b      	ldr	r2, [pc, #172]	@ (8009e90 <TIM_Base_SetConfig+0x134>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d108      	bne.n	8009df8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	68fa      	ldr	r2, [r7, #12]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	695b      	ldr	r3, [r3, #20]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	689a      	ldr	r2, [r3, #8]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a16      	ldr	r2, [pc, #88]	@ (8009e78 <TIM_Base_SetConfig+0x11c>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d00f      	beq.n	8009e44 <TIM_Base_SetConfig+0xe8>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a17      	ldr	r2, [pc, #92]	@ (8009e84 <TIM_Base_SetConfig+0x128>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d00b      	beq.n	8009e44 <TIM_Base_SetConfig+0xe8>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a16      	ldr	r2, [pc, #88]	@ (8009e88 <TIM_Base_SetConfig+0x12c>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d007      	beq.n	8009e44 <TIM_Base_SetConfig+0xe8>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a15      	ldr	r2, [pc, #84]	@ (8009e8c <TIM_Base_SetConfig+0x130>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d003      	beq.n	8009e44 <TIM_Base_SetConfig+0xe8>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a14      	ldr	r2, [pc, #80]	@ (8009e90 <TIM_Base_SetConfig+0x134>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d103      	bne.n	8009e4c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	691a      	ldr	r2, [r3, #16]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	f003 0301 	and.w	r3, r3, #1
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d105      	bne.n	8009e6a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	f023 0201 	bic.w	r2, r3, #1
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	611a      	str	r2, [r3, #16]
  }
}
 8009e6a:	bf00      	nop
 8009e6c:	3714      	adds	r7, #20
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	40012c00 	.word	0x40012c00
 8009e7c:	40000400 	.word	0x40000400
 8009e80:	40000800 	.word	0x40000800
 8009e84:	40013400 	.word	0x40013400
 8009e88:	40014000 	.word	0x40014000
 8009e8c:	40014400 	.word	0x40014400
 8009e90:	40014800 	.word	0x40014800

08009e94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b087      	sub	sp, #28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a1b      	ldr	r3, [r3, #32]
 8009ea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6a1b      	ldr	r3, [r3, #32]
 8009ea8:	f023 0201 	bic.w	r2, r3, #1
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	699b      	ldr	r3, [r3, #24]
 8009eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f023 0303 	bic.w	r3, r3, #3
 8009ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68fa      	ldr	r2, [r7, #12]
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	f023 0302 	bic.w	r3, r3, #2
 8009ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	697a      	ldr	r2, [r7, #20]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a2c      	ldr	r2, [pc, #176]	@ (8009fa0 <TIM_OC1_SetConfig+0x10c>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d00f      	beq.n	8009f14 <TIM_OC1_SetConfig+0x80>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a2b      	ldr	r2, [pc, #172]	@ (8009fa4 <TIM_OC1_SetConfig+0x110>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d00b      	beq.n	8009f14 <TIM_OC1_SetConfig+0x80>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a2a      	ldr	r2, [pc, #168]	@ (8009fa8 <TIM_OC1_SetConfig+0x114>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d007      	beq.n	8009f14 <TIM_OC1_SetConfig+0x80>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a29      	ldr	r2, [pc, #164]	@ (8009fac <TIM_OC1_SetConfig+0x118>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d003      	beq.n	8009f14 <TIM_OC1_SetConfig+0x80>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a28      	ldr	r2, [pc, #160]	@ (8009fb0 <TIM_OC1_SetConfig+0x11c>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d10c      	bne.n	8009f2e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	f023 0308 	bic.w	r3, r3, #8
 8009f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	f023 0304 	bic.w	r3, r3, #4
 8009f2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a1b      	ldr	r2, [pc, #108]	@ (8009fa0 <TIM_OC1_SetConfig+0x10c>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d00f      	beq.n	8009f56 <TIM_OC1_SetConfig+0xc2>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a1a      	ldr	r2, [pc, #104]	@ (8009fa4 <TIM_OC1_SetConfig+0x110>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d00b      	beq.n	8009f56 <TIM_OC1_SetConfig+0xc2>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a19      	ldr	r2, [pc, #100]	@ (8009fa8 <TIM_OC1_SetConfig+0x114>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d007      	beq.n	8009f56 <TIM_OC1_SetConfig+0xc2>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a18      	ldr	r2, [pc, #96]	@ (8009fac <TIM_OC1_SetConfig+0x118>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d003      	beq.n	8009f56 <TIM_OC1_SetConfig+0xc2>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a17      	ldr	r2, [pc, #92]	@ (8009fb0 <TIM_OC1_SetConfig+0x11c>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d111      	bne.n	8009f7a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	695b      	ldr	r3, [r3, #20]
 8009f6a:	693a      	ldr	r2, [r7, #16]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	693a      	ldr	r2, [r7, #16]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	685a      	ldr	r2, [r3, #4]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	697a      	ldr	r2, [r7, #20]
 8009f92:	621a      	str	r2, [r3, #32]
}
 8009f94:	bf00      	nop
 8009f96:	371c      	adds	r7, #28
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	40012c00 	.word	0x40012c00
 8009fa4:	40013400 	.word	0x40013400
 8009fa8:	40014000 	.word	0x40014000
 8009fac:	40014400 	.word	0x40014400
 8009fb0:	40014800 	.word	0x40014800

08009fb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b087      	sub	sp, #28
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a1b      	ldr	r3, [r3, #32]
 8009fc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a1b      	ldr	r3, [r3, #32]
 8009fc8:	f023 0210 	bic.w	r2, r3, #16
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	699b      	ldr	r3, [r3, #24]
 8009fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009fe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	021b      	lsls	r3, r3, #8
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	f023 0320 	bic.w	r3, r3, #32
 800a002:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	011b      	lsls	r3, r3, #4
 800a00a:	697a      	ldr	r2, [r7, #20]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a28      	ldr	r2, [pc, #160]	@ (800a0b4 <TIM_OC2_SetConfig+0x100>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d003      	beq.n	800a020 <TIM_OC2_SetConfig+0x6c>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a27      	ldr	r2, [pc, #156]	@ (800a0b8 <TIM_OC2_SetConfig+0x104>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d10d      	bne.n	800a03c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	011b      	lsls	r3, r3, #4
 800a02e:	697a      	ldr	r2, [r7, #20]
 800a030:	4313      	orrs	r3, r2
 800a032:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a03a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	4a1d      	ldr	r2, [pc, #116]	@ (800a0b4 <TIM_OC2_SetConfig+0x100>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d00f      	beq.n	800a064 <TIM_OC2_SetConfig+0xb0>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a1c      	ldr	r2, [pc, #112]	@ (800a0b8 <TIM_OC2_SetConfig+0x104>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d00b      	beq.n	800a064 <TIM_OC2_SetConfig+0xb0>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a1b      	ldr	r2, [pc, #108]	@ (800a0bc <TIM_OC2_SetConfig+0x108>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d007      	beq.n	800a064 <TIM_OC2_SetConfig+0xb0>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a1a      	ldr	r2, [pc, #104]	@ (800a0c0 <TIM_OC2_SetConfig+0x10c>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d003      	beq.n	800a064 <TIM_OC2_SetConfig+0xb0>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4a19      	ldr	r2, [pc, #100]	@ (800a0c4 <TIM_OC2_SetConfig+0x110>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d113      	bne.n	800a08c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a06a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a072:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	695b      	ldr	r3, [r3, #20]
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	693a      	ldr	r2, [r7, #16]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	699b      	ldr	r3, [r3, #24]
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	4313      	orrs	r3, r2
 800a08a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	693a      	ldr	r2, [r7, #16]
 800a090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	685a      	ldr	r2, [r3, #4]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	697a      	ldr	r2, [r7, #20]
 800a0a4:	621a      	str	r2, [r3, #32]
}
 800a0a6:	bf00      	nop
 800a0a8:	371c      	adds	r7, #28
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	40012c00 	.word	0x40012c00
 800a0b8:	40013400 	.word	0x40013400
 800a0bc:	40014000 	.word	0x40014000
 800a0c0:	40014400 	.word	0x40014400
 800a0c4:	40014800 	.word	0x40014800

0800a0c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b087      	sub	sp, #28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a1b      	ldr	r3, [r3, #32]
 800a0d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6a1b      	ldr	r3, [r3, #32]
 800a0dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	69db      	ldr	r3, [r3, #28]
 800a0ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f023 0303 	bic.w	r3, r3, #3
 800a102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	021b      	lsls	r3, r3, #8
 800a11c:	697a      	ldr	r2, [r7, #20]
 800a11e:	4313      	orrs	r3, r2
 800a120:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a27      	ldr	r2, [pc, #156]	@ (800a1c4 <TIM_OC3_SetConfig+0xfc>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d003      	beq.n	800a132 <TIM_OC3_SetConfig+0x6a>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a26      	ldr	r2, [pc, #152]	@ (800a1c8 <TIM_OC3_SetConfig+0x100>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d10d      	bne.n	800a14e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a138:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	021b      	lsls	r3, r3, #8
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	4313      	orrs	r3, r2
 800a144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a14c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a1c      	ldr	r2, [pc, #112]	@ (800a1c4 <TIM_OC3_SetConfig+0xfc>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d00f      	beq.n	800a176 <TIM_OC3_SetConfig+0xae>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a1b      	ldr	r2, [pc, #108]	@ (800a1c8 <TIM_OC3_SetConfig+0x100>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d00b      	beq.n	800a176 <TIM_OC3_SetConfig+0xae>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a1a      	ldr	r2, [pc, #104]	@ (800a1cc <TIM_OC3_SetConfig+0x104>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d007      	beq.n	800a176 <TIM_OC3_SetConfig+0xae>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a19      	ldr	r2, [pc, #100]	@ (800a1d0 <TIM_OC3_SetConfig+0x108>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d003      	beq.n	800a176 <TIM_OC3_SetConfig+0xae>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4a18      	ldr	r2, [pc, #96]	@ (800a1d4 <TIM_OC3_SetConfig+0x10c>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d113      	bne.n	800a19e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a17c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	011b      	lsls	r3, r3, #4
 800a18c:	693a      	ldr	r2, [r7, #16]
 800a18e:	4313      	orrs	r3, r2
 800a190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	699b      	ldr	r3, [r3, #24]
 800a196:	011b      	lsls	r3, r3, #4
 800a198:	693a      	ldr	r2, [r7, #16]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	68fa      	ldr	r2, [r7, #12]
 800a1a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	685a      	ldr	r2, [r3, #4]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	697a      	ldr	r2, [r7, #20]
 800a1b6:	621a      	str	r2, [r3, #32]
}
 800a1b8:	bf00      	nop
 800a1ba:	371c      	adds	r7, #28
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr
 800a1c4:	40012c00 	.word	0x40012c00
 800a1c8:	40013400 	.word	0x40013400
 800a1cc:	40014000 	.word	0x40014000
 800a1d0:	40014400 	.word	0x40014400
 800a1d4:	40014800 	.word	0x40014800

0800a1d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b087      	sub	sp, #28
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a1b      	ldr	r3, [r3, #32]
 800a1e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6a1b      	ldr	r3, [r3, #32]
 800a1ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	69db      	ldr	r3, [r3, #28]
 800a1fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a20a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	021b      	lsls	r3, r3, #8
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	031b      	lsls	r3, r3, #12
 800a22e:	697a      	ldr	r2, [r7, #20]
 800a230:	4313      	orrs	r3, r2
 800a232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a28      	ldr	r2, [pc, #160]	@ (800a2d8 <TIM_OC4_SetConfig+0x100>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d003      	beq.n	800a244 <TIM_OC4_SetConfig+0x6c>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a27      	ldr	r2, [pc, #156]	@ (800a2dc <TIM_OC4_SetConfig+0x104>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d10d      	bne.n	800a260 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a24a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	031b      	lsls	r3, r3, #12
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	4313      	orrs	r3, r2
 800a256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a25e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	4a1d      	ldr	r2, [pc, #116]	@ (800a2d8 <TIM_OC4_SetConfig+0x100>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d00f      	beq.n	800a288 <TIM_OC4_SetConfig+0xb0>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4a1c      	ldr	r2, [pc, #112]	@ (800a2dc <TIM_OC4_SetConfig+0x104>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d00b      	beq.n	800a288 <TIM_OC4_SetConfig+0xb0>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4a1b      	ldr	r2, [pc, #108]	@ (800a2e0 <TIM_OC4_SetConfig+0x108>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d007      	beq.n	800a288 <TIM_OC4_SetConfig+0xb0>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4a1a      	ldr	r2, [pc, #104]	@ (800a2e4 <TIM_OC4_SetConfig+0x10c>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d003      	beq.n	800a288 <TIM_OC4_SetConfig+0xb0>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4a19      	ldr	r2, [pc, #100]	@ (800a2e8 <TIM_OC4_SetConfig+0x110>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d113      	bne.n	800a2b0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a28e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a296:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	695b      	ldr	r3, [r3, #20]
 800a29c:	019b      	lsls	r3, r3, #6
 800a29e:	693a      	ldr	r2, [r7, #16]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	019b      	lsls	r3, r3, #6
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	685a      	ldr	r2, [r3, #4]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	697a      	ldr	r2, [r7, #20]
 800a2c8:	621a      	str	r2, [r3, #32]
}
 800a2ca:	bf00      	nop
 800a2cc:	371c      	adds	r7, #28
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	40012c00 	.word	0x40012c00
 800a2dc:	40013400 	.word	0x40013400
 800a2e0:	40014000 	.word	0x40014000
 800a2e4:	40014400 	.word	0x40014400
 800a2e8:	40014800 	.word	0x40014800

0800a2ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b087      	sub	sp, #28
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a1b      	ldr	r3, [r3, #32]
 800a2fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a1b      	ldr	r3, [r3, #32]
 800a300:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a31a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a31e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	4313      	orrs	r3, r2
 800a328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a330:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	041b      	lsls	r3, r3, #16
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a17      	ldr	r2, [pc, #92]	@ (800a3a0 <TIM_OC5_SetConfig+0xb4>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d00f      	beq.n	800a366 <TIM_OC5_SetConfig+0x7a>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4a16      	ldr	r2, [pc, #88]	@ (800a3a4 <TIM_OC5_SetConfig+0xb8>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d00b      	beq.n	800a366 <TIM_OC5_SetConfig+0x7a>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4a15      	ldr	r2, [pc, #84]	@ (800a3a8 <TIM_OC5_SetConfig+0xbc>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d007      	beq.n	800a366 <TIM_OC5_SetConfig+0x7a>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a14      	ldr	r2, [pc, #80]	@ (800a3ac <TIM_OC5_SetConfig+0xc0>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d003      	beq.n	800a366 <TIM_OC5_SetConfig+0x7a>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	4a13      	ldr	r2, [pc, #76]	@ (800a3b0 <TIM_OC5_SetConfig+0xc4>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d109      	bne.n	800a37a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a36c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	695b      	ldr	r3, [r3, #20]
 800a372:	021b      	lsls	r3, r3, #8
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	4313      	orrs	r3, r2
 800a378:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	697a      	ldr	r2, [r7, #20]
 800a37e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	685a      	ldr	r2, [r3, #4]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	693a      	ldr	r2, [r7, #16]
 800a392:	621a      	str	r2, [r3, #32]
}
 800a394:	bf00      	nop
 800a396:	371c      	adds	r7, #28
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	40012c00 	.word	0x40012c00
 800a3a4:	40013400 	.word	0x40013400
 800a3a8:	40014000 	.word	0x40014000
 800a3ac:	40014400 	.word	0x40014400
 800a3b0:	40014800 	.word	0x40014800

0800a3b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b087      	sub	sp, #28
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6a1b      	ldr	r3, [r3, #32]
 800a3c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a1b      	ldr	r3, [r3, #32]
 800a3c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a3e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	021b      	lsls	r3, r3, #8
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a3fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	051b      	lsls	r3, r3, #20
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	4313      	orrs	r3, r2
 800a406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a18      	ldr	r2, [pc, #96]	@ (800a46c <TIM_OC6_SetConfig+0xb8>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d00f      	beq.n	800a430 <TIM_OC6_SetConfig+0x7c>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a17      	ldr	r2, [pc, #92]	@ (800a470 <TIM_OC6_SetConfig+0xbc>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d00b      	beq.n	800a430 <TIM_OC6_SetConfig+0x7c>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a16      	ldr	r2, [pc, #88]	@ (800a474 <TIM_OC6_SetConfig+0xc0>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d007      	beq.n	800a430 <TIM_OC6_SetConfig+0x7c>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4a15      	ldr	r2, [pc, #84]	@ (800a478 <TIM_OC6_SetConfig+0xc4>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d003      	beq.n	800a430 <TIM_OC6_SetConfig+0x7c>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	4a14      	ldr	r2, [pc, #80]	@ (800a47c <TIM_OC6_SetConfig+0xc8>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d109      	bne.n	800a444 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a436:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	695b      	ldr	r3, [r3, #20]
 800a43c:	029b      	lsls	r3, r3, #10
 800a43e:	697a      	ldr	r2, [r7, #20]
 800a440:	4313      	orrs	r3, r2
 800a442:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	697a      	ldr	r2, [r7, #20]
 800a448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	685a      	ldr	r2, [r3, #4]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	693a      	ldr	r2, [r7, #16]
 800a45c:	621a      	str	r2, [r3, #32]
}
 800a45e:	bf00      	nop
 800a460:	371c      	adds	r7, #28
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	40012c00 	.word	0x40012c00
 800a470:	40013400 	.word	0x40013400
 800a474:	40014000 	.word	0x40014000
 800a478:	40014400 	.word	0x40014400
 800a47c:	40014800 	.word	0x40014800

0800a480 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a480:	b480      	push	{r7}
 800a482:	b087      	sub	sp, #28
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
 800a48c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6a1b      	ldr	r3, [r3, #32]
 800a498:	f023 0201 	bic.w	r2, r3, #1
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	699b      	ldr	r3, [r3, #24]
 800a4a4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	4a24      	ldr	r2, [pc, #144]	@ (800a53c <TIM_TI1_SetConfig+0xbc>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d013      	beq.n	800a4d6 <TIM_TI1_SetConfig+0x56>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4b4:	d00f      	beq.n	800a4d6 <TIM_TI1_SetConfig+0x56>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	4a21      	ldr	r2, [pc, #132]	@ (800a540 <TIM_TI1_SetConfig+0xc0>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d00b      	beq.n	800a4d6 <TIM_TI1_SetConfig+0x56>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	4a20      	ldr	r2, [pc, #128]	@ (800a544 <TIM_TI1_SetConfig+0xc4>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d007      	beq.n	800a4d6 <TIM_TI1_SetConfig+0x56>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	4a1f      	ldr	r2, [pc, #124]	@ (800a548 <TIM_TI1_SetConfig+0xc8>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d003      	beq.n	800a4d6 <TIM_TI1_SetConfig+0x56>
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	4a1e      	ldr	r2, [pc, #120]	@ (800a54c <TIM_TI1_SetConfig+0xcc>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d101      	bne.n	800a4da <TIM_TI1_SetConfig+0x5a>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e000      	b.n	800a4dc <TIM_TI1_SetConfig+0x5c>
 800a4da:	2300      	movs	r3, #0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d008      	beq.n	800a4f2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	f023 0303 	bic.w	r3, r3, #3
 800a4e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	617b      	str	r3, [r7, #20]
 800a4f0:	e003      	b.n	800a4fa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	f043 0301 	orr.w	r3, r3, #1
 800a4f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a500:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	011b      	lsls	r3, r3, #4
 800a506:	b2db      	uxtb	r3, r3
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	f023 030a 	bic.w	r3, r3, #10
 800a514:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	f003 030a 	and.w	r3, r3, #10
 800a51c:	693a      	ldr	r2, [r7, #16]
 800a51e:	4313      	orrs	r3, r2
 800a520:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	697a      	ldr	r2, [r7, #20]
 800a526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	693a      	ldr	r2, [r7, #16]
 800a52c:	621a      	str	r2, [r3, #32]
}
 800a52e:	bf00      	nop
 800a530:	371c      	adds	r7, #28
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	40012c00 	.word	0x40012c00
 800a540:	40000400 	.word	0x40000400
 800a544:	40000800 	.word	0x40000800
 800a548:	40013400 	.word	0x40013400
 800a54c:	40014000 	.word	0x40014000

0800a550 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a550:	b480      	push	{r7}
 800a552:	b087      	sub	sp, #28
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6a1b      	ldr	r3, [r3, #32]
 800a560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6a1b      	ldr	r3, [r3, #32]
 800a566:	f023 0201 	bic.w	r2, r3, #1
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	699b      	ldr	r3, [r3, #24]
 800a572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a57a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	011b      	lsls	r3, r3, #4
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	4313      	orrs	r3, r2
 800a584:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	f023 030a 	bic.w	r3, r3, #10
 800a58c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a58e:	697a      	ldr	r2, [r7, #20]
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	4313      	orrs	r3, r2
 800a594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	693a      	ldr	r2, [r7, #16]
 800a59a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	697a      	ldr	r2, [r7, #20]
 800a5a0:	621a      	str	r2, [r3, #32]
}
 800a5a2:	bf00      	nop
 800a5a4:	371c      	adds	r7, #28
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr

0800a5ae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	b087      	sub	sp, #28
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	60f8      	str	r0, [r7, #12]
 800a5b6:	60b9      	str	r1, [r7, #8]
 800a5b8:	607a      	str	r2, [r7, #4]
 800a5ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6a1b      	ldr	r3, [r3, #32]
 800a5c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6a1b      	ldr	r3, [r3, #32]
 800a5c6:	f023 0210 	bic.w	r2, r3, #16
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	699b      	ldr	r3, [r3, #24]
 800a5d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	021b      	lsls	r3, r3, #8
 800a5e0:	693a      	ldr	r2, [r7, #16]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a5ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	031b      	lsls	r3, r3, #12
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	693a      	ldr	r2, [r7, #16]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a600:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	011b      	lsls	r3, r3, #4
 800a606:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	693a      	ldr	r2, [r7, #16]
 800a614:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	697a      	ldr	r2, [r7, #20]
 800a61a:	621a      	str	r2, [r3, #32]
}
 800a61c:	bf00      	nop
 800a61e:	371c      	adds	r7, #28
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a628:	b480      	push	{r7}
 800a62a:	b087      	sub	sp, #28
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6a1b      	ldr	r3, [r3, #32]
 800a638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6a1b      	ldr	r3, [r3, #32]
 800a63e:	f023 0210 	bic.w	r2, r3, #16
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	699b      	ldr	r3, [r3, #24]
 800a64a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	031b      	lsls	r3, r3, #12
 800a658:	693a      	ldr	r2, [r7, #16]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a664:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	011b      	lsls	r3, r3, #4
 800a66a:	697a      	ldr	r2, [r7, #20]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	693a      	ldr	r2, [r7, #16]
 800a674:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	697a      	ldr	r2, [r7, #20]
 800a67a:	621a      	str	r2, [r3, #32]
}
 800a67c:	bf00      	nop
 800a67e:	371c      	adds	r7, #28
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a688:	b480      	push	{r7}
 800a68a:	b087      	sub	sp, #28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
 800a694:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6a1b      	ldr	r3, [r3, #32]
 800a69a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6a1b      	ldr	r3, [r3, #32]
 800a6a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	69db      	ldr	r3, [r3, #28]
 800a6ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	f023 0303 	bic.w	r3, r3, #3
 800a6b4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a6b6:	693a      	ldr	r2, [r7, #16]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a6c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	011b      	lsls	r3, r3, #4
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	693a      	ldr	r2, [r7, #16]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a6d8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	021b      	lsls	r3, r3, #8
 800a6de:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a6e2:	697a      	ldr	r2, [r7, #20]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	693a      	ldr	r2, [r7, #16]
 800a6ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	697a      	ldr	r2, [r7, #20]
 800a6f2:	621a      	str	r2, [r3, #32]
}
 800a6f4:	bf00      	nop
 800a6f6:	371c      	adds	r7, #28
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a700:	b480      	push	{r7}
 800a702:	b087      	sub	sp, #28
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6a1b      	ldr	r3, [r3, #32]
 800a712:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6a1b      	ldr	r3, [r3, #32]
 800a718:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	69db      	ldr	r3, [r3, #28]
 800a724:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a72c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	021b      	lsls	r3, r3, #8
 800a732:	693a      	ldr	r2, [r7, #16]
 800a734:	4313      	orrs	r3, r2
 800a736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a73e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	031b      	lsls	r3, r3, #12
 800a744:	b29b      	uxth	r3, r3
 800a746:	693a      	ldr	r2, [r7, #16]
 800a748:	4313      	orrs	r3, r2
 800a74a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a752:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	031b      	lsls	r3, r3, #12
 800a758:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a75c:	697a      	ldr	r2, [r7, #20]
 800a75e:	4313      	orrs	r3, r2
 800a760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	697a      	ldr	r2, [r7, #20]
 800a76c:	621a      	str	r2, [r3, #32]
}
 800a76e:	bf00      	nop
 800a770:	371c      	adds	r7, #28
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr

0800a77a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a77a:	b480      	push	{r7}
 800a77c:	b085      	sub	sp, #20
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
 800a782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a794:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a796:	683a      	ldr	r2, [r7, #0]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	f043 0307 	orr.w	r3, r3, #7
 800a7a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	609a      	str	r2, [r3, #8]
}
 800a7a8:	bf00      	nop
 800a7aa:	3714      	adds	r7, #20
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b087      	sub	sp, #28
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
 800a7c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a7ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	021a      	lsls	r2, r3, #8
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	431a      	orrs	r2, r3
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	697a      	ldr	r2, [r7, #20]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	697a      	ldr	r2, [r7, #20]
 800a7e6:	609a      	str	r2, [r3, #8]
}
 800a7e8:	bf00      	nop
 800a7ea:	371c      	adds	r7, #28
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b087      	sub	sp, #28
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	f003 031f 	and.w	r3, r3, #31
 800a806:	2201      	movs	r2, #1
 800a808:	fa02 f303 	lsl.w	r3, r2, r3
 800a80c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6a1a      	ldr	r2, [r3, #32]
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	43db      	mvns	r3, r3
 800a816:	401a      	ands	r2, r3
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6a1a      	ldr	r2, [r3, #32]
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	f003 031f 	and.w	r3, r3, #31
 800a826:	6879      	ldr	r1, [r7, #4]
 800a828:	fa01 f303 	lsl.w	r3, r1, r3
 800a82c:	431a      	orrs	r2, r3
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	621a      	str	r2, [r3, #32]
}
 800a832:	bf00      	nop
 800a834:	371c      	adds	r7, #28
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr
	...

0800a840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a850:	2b01      	cmp	r3, #1
 800a852:	d101      	bne.n	800a858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a854:	2302      	movs	r3, #2
 800a856:	e065      	b.n	800a924 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2202      	movs	r2, #2
 800a864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a2c      	ldr	r2, [pc, #176]	@ (800a930 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d004      	beq.n	800a88c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a2b      	ldr	r2, [pc, #172]	@ (800a934 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d108      	bne.n	800a89e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a892:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a8a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a1b      	ldr	r2, [pc, #108]	@ (800a930 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d018      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8ce:	d013      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a18      	ldr	r2, [pc, #96]	@ (800a938 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d00e      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a17      	ldr	r2, [pc, #92]	@ (800a93c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d009      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a12      	ldr	r2, [pc, #72]	@ (800a934 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d004      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a13      	ldr	r2, [pc, #76]	@ (800a940 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d10c      	bne.n	800a912 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	4313      	orrs	r3, r2
 800a908:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2201      	movs	r2, #1
 800a916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	3714      	adds	r7, #20
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr
 800a930:	40012c00 	.word	0x40012c00
 800a934:	40013400 	.word	0x40013400
 800a938:	40000400 	.word	0x40000400
 800a93c:	40000800 	.word	0x40000800
 800a940:	40014000 	.word	0x40014000

0800a944 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a94c:	bf00      	nop
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a9b0:	bf00      	nop
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d101      	bne.n	800a9e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e042      	b.n	800aa68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d106      	bne.n	800a9fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f7f8 fedf 	bl	80037b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2224      	movs	r2, #36	@ 0x24
 800a9fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f022 0201 	bic.w	r2, r2, #1
 800aa10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d002      	beq.n	800aa20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 fb82 	bl	800b124 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 f8b3 	bl	800ab8c <UART_SetConfig>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d101      	bne.n	800aa30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e01b      	b.n	800aa68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	685a      	ldr	r2, [r3, #4]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aa3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	689a      	ldr	r2, [r3, #8]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aa4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f042 0201 	orr.w	r2, r2, #1
 800aa5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 fc01 	bl	800b268 <UART_CheckIdleState>
 800aa66:	4603      	mov	r3, r0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3708      	adds	r7, #8
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b08a      	sub	sp, #40	@ 0x28
 800aa74:	af02      	add	r7, sp, #8
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	603b      	str	r3, [r7, #0]
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa86:	2b20      	cmp	r3, #32
 800aa88:	d17b      	bne.n	800ab82 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d002      	beq.n	800aa96 <HAL_UART_Transmit+0x26>
 800aa90:	88fb      	ldrh	r3, [r7, #6]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d101      	bne.n	800aa9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800aa96:	2301      	movs	r3, #1
 800aa98:	e074      	b.n	800ab84 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2221      	movs	r2, #33	@ 0x21
 800aaa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aaaa:	f7f9 fa93 	bl	8003fd4 <HAL_GetTick>
 800aaae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	88fa      	ldrh	r2, [r7, #6]
 800aab4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	88fa      	ldrh	r2, [r7, #6]
 800aabc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aac8:	d108      	bne.n	800aadc <HAL_UART_Transmit+0x6c>
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d104      	bne.n	800aadc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800aad2:	2300      	movs	r3, #0
 800aad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	61bb      	str	r3, [r7, #24]
 800aada:	e003      	b.n	800aae4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aae0:	2300      	movs	r3, #0
 800aae2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800aae4:	e030      	b.n	800ab48 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	2200      	movs	r2, #0
 800aaee:	2180      	movs	r1, #128	@ 0x80
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f000 fc63 	bl	800b3bc <UART_WaitOnFlagUntilTimeout>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d005      	beq.n	800ab08 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2220      	movs	r2, #32
 800ab00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ab04:	2303      	movs	r3, #3
 800ab06:	e03d      	b.n	800ab84 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d10b      	bne.n	800ab26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	881b      	ldrh	r3, [r3, #0]
 800ab12:	461a      	mov	r2, r3
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab1c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	3302      	adds	r3, #2
 800ab22:	61bb      	str	r3, [r7, #24]
 800ab24:	e007      	b.n	800ab36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	781a      	ldrb	r2, [r3, #0]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	3301      	adds	r3, #1
 800ab34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1c8      	bne.n	800aae6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	2140      	movs	r1, #64	@ 0x40
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f000 fc2c 	bl	800b3bc <UART_WaitOnFlagUntilTimeout>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d005      	beq.n	800ab76 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2220      	movs	r2, #32
 800ab6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ab72:	2303      	movs	r3, #3
 800ab74:	e006      	b.n	800ab84 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2220      	movs	r2, #32
 800ab7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	e000      	b.n	800ab84 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ab82:	2302      	movs	r3, #2
  }
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3720      	adds	r7, #32
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab90:	b08c      	sub	sp, #48	@ 0x30
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab96:	2300      	movs	r3, #0
 800ab98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	689a      	ldr	r2, [r3, #8]
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	431a      	orrs	r2, r3
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	695b      	ldr	r3, [r3, #20]
 800abaa:	431a      	orrs	r2, r3
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	69db      	ldr	r3, [r3, #28]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	4bab      	ldr	r3, [pc, #684]	@ (800ae68 <UART_SetConfig+0x2dc>)
 800abbc:	4013      	ands	r3, r2
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	6812      	ldr	r2, [r2, #0]
 800abc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abc4:	430b      	orrs	r3, r1
 800abc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	68da      	ldr	r2, [r3, #12]
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	430a      	orrs	r2, r1
 800abdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	699b      	ldr	r3, [r3, #24]
 800abe2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4aa0      	ldr	r2, [pc, #640]	@ (800ae6c <UART_SetConfig+0x2e0>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d004      	beq.n	800abf8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	6a1b      	ldr	r3, [r3, #32]
 800abf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abf4:	4313      	orrs	r3, r2
 800abf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ac02:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	6812      	ldr	r2, [r2, #0]
 800ac0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac0c:	430b      	orrs	r3, r1
 800ac0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac16:	f023 010f 	bic.w	r1, r3, #15
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	430a      	orrs	r2, r1
 800ac24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a91      	ldr	r2, [pc, #580]	@ (800ae70 <UART_SetConfig+0x2e4>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d125      	bne.n	800ac7c <UART_SetConfig+0xf0>
 800ac30:	4b90      	ldr	r3, [pc, #576]	@ (800ae74 <UART_SetConfig+0x2e8>)
 800ac32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac36:	f003 0303 	and.w	r3, r3, #3
 800ac3a:	2b03      	cmp	r3, #3
 800ac3c:	d81a      	bhi.n	800ac74 <UART_SetConfig+0xe8>
 800ac3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac44 <UART_SetConfig+0xb8>)
 800ac40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac44:	0800ac55 	.word	0x0800ac55
 800ac48:	0800ac65 	.word	0x0800ac65
 800ac4c:	0800ac5d 	.word	0x0800ac5d
 800ac50:	0800ac6d 	.word	0x0800ac6d
 800ac54:	2301      	movs	r3, #1
 800ac56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac5a:	e0d6      	b.n	800ae0a <UART_SetConfig+0x27e>
 800ac5c:	2302      	movs	r3, #2
 800ac5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac62:	e0d2      	b.n	800ae0a <UART_SetConfig+0x27e>
 800ac64:	2304      	movs	r3, #4
 800ac66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac6a:	e0ce      	b.n	800ae0a <UART_SetConfig+0x27e>
 800ac6c:	2308      	movs	r3, #8
 800ac6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac72:	e0ca      	b.n	800ae0a <UART_SetConfig+0x27e>
 800ac74:	2310      	movs	r3, #16
 800ac76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac7a:	e0c6      	b.n	800ae0a <UART_SetConfig+0x27e>
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a7d      	ldr	r2, [pc, #500]	@ (800ae78 <UART_SetConfig+0x2ec>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d138      	bne.n	800acf8 <UART_SetConfig+0x16c>
 800ac86:	4b7b      	ldr	r3, [pc, #492]	@ (800ae74 <UART_SetConfig+0x2e8>)
 800ac88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac8c:	f003 030c 	and.w	r3, r3, #12
 800ac90:	2b0c      	cmp	r3, #12
 800ac92:	d82d      	bhi.n	800acf0 <UART_SetConfig+0x164>
 800ac94:	a201      	add	r2, pc, #4	@ (adr r2, 800ac9c <UART_SetConfig+0x110>)
 800ac96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac9a:	bf00      	nop
 800ac9c:	0800acd1 	.word	0x0800acd1
 800aca0:	0800acf1 	.word	0x0800acf1
 800aca4:	0800acf1 	.word	0x0800acf1
 800aca8:	0800acf1 	.word	0x0800acf1
 800acac:	0800ace1 	.word	0x0800ace1
 800acb0:	0800acf1 	.word	0x0800acf1
 800acb4:	0800acf1 	.word	0x0800acf1
 800acb8:	0800acf1 	.word	0x0800acf1
 800acbc:	0800acd9 	.word	0x0800acd9
 800acc0:	0800acf1 	.word	0x0800acf1
 800acc4:	0800acf1 	.word	0x0800acf1
 800acc8:	0800acf1 	.word	0x0800acf1
 800accc:	0800ace9 	.word	0x0800ace9
 800acd0:	2300      	movs	r3, #0
 800acd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acd6:	e098      	b.n	800ae0a <UART_SetConfig+0x27e>
 800acd8:	2302      	movs	r3, #2
 800acda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acde:	e094      	b.n	800ae0a <UART_SetConfig+0x27e>
 800ace0:	2304      	movs	r3, #4
 800ace2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ace6:	e090      	b.n	800ae0a <UART_SetConfig+0x27e>
 800ace8:	2308      	movs	r3, #8
 800acea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acee:	e08c      	b.n	800ae0a <UART_SetConfig+0x27e>
 800acf0:	2310      	movs	r3, #16
 800acf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acf6:	e088      	b.n	800ae0a <UART_SetConfig+0x27e>
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a5f      	ldr	r2, [pc, #380]	@ (800ae7c <UART_SetConfig+0x2f0>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d125      	bne.n	800ad4e <UART_SetConfig+0x1c2>
 800ad02:	4b5c      	ldr	r3, [pc, #368]	@ (800ae74 <UART_SetConfig+0x2e8>)
 800ad04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad08:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ad0c:	2b30      	cmp	r3, #48	@ 0x30
 800ad0e:	d016      	beq.n	800ad3e <UART_SetConfig+0x1b2>
 800ad10:	2b30      	cmp	r3, #48	@ 0x30
 800ad12:	d818      	bhi.n	800ad46 <UART_SetConfig+0x1ba>
 800ad14:	2b20      	cmp	r3, #32
 800ad16:	d00a      	beq.n	800ad2e <UART_SetConfig+0x1a2>
 800ad18:	2b20      	cmp	r3, #32
 800ad1a:	d814      	bhi.n	800ad46 <UART_SetConfig+0x1ba>
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d002      	beq.n	800ad26 <UART_SetConfig+0x19a>
 800ad20:	2b10      	cmp	r3, #16
 800ad22:	d008      	beq.n	800ad36 <UART_SetConfig+0x1aa>
 800ad24:	e00f      	b.n	800ad46 <UART_SetConfig+0x1ba>
 800ad26:	2300      	movs	r3, #0
 800ad28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad2c:	e06d      	b.n	800ae0a <UART_SetConfig+0x27e>
 800ad2e:	2302      	movs	r3, #2
 800ad30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad34:	e069      	b.n	800ae0a <UART_SetConfig+0x27e>
 800ad36:	2304      	movs	r3, #4
 800ad38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad3c:	e065      	b.n	800ae0a <UART_SetConfig+0x27e>
 800ad3e:	2308      	movs	r3, #8
 800ad40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad44:	e061      	b.n	800ae0a <UART_SetConfig+0x27e>
 800ad46:	2310      	movs	r3, #16
 800ad48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad4c:	e05d      	b.n	800ae0a <UART_SetConfig+0x27e>
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a4b      	ldr	r2, [pc, #300]	@ (800ae80 <UART_SetConfig+0x2f4>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d125      	bne.n	800ada4 <UART_SetConfig+0x218>
 800ad58:	4b46      	ldr	r3, [pc, #280]	@ (800ae74 <UART_SetConfig+0x2e8>)
 800ad5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ad62:	2bc0      	cmp	r3, #192	@ 0xc0
 800ad64:	d016      	beq.n	800ad94 <UART_SetConfig+0x208>
 800ad66:	2bc0      	cmp	r3, #192	@ 0xc0
 800ad68:	d818      	bhi.n	800ad9c <UART_SetConfig+0x210>
 800ad6a:	2b80      	cmp	r3, #128	@ 0x80
 800ad6c:	d00a      	beq.n	800ad84 <UART_SetConfig+0x1f8>
 800ad6e:	2b80      	cmp	r3, #128	@ 0x80
 800ad70:	d814      	bhi.n	800ad9c <UART_SetConfig+0x210>
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d002      	beq.n	800ad7c <UART_SetConfig+0x1f0>
 800ad76:	2b40      	cmp	r3, #64	@ 0x40
 800ad78:	d008      	beq.n	800ad8c <UART_SetConfig+0x200>
 800ad7a:	e00f      	b.n	800ad9c <UART_SetConfig+0x210>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad82:	e042      	b.n	800ae0a <UART_SetConfig+0x27e>
 800ad84:	2302      	movs	r3, #2
 800ad86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad8a:	e03e      	b.n	800ae0a <UART_SetConfig+0x27e>
 800ad8c:	2304      	movs	r3, #4
 800ad8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad92:	e03a      	b.n	800ae0a <UART_SetConfig+0x27e>
 800ad94:	2308      	movs	r3, #8
 800ad96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad9a:	e036      	b.n	800ae0a <UART_SetConfig+0x27e>
 800ad9c:	2310      	movs	r3, #16
 800ad9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ada2:	e032      	b.n	800ae0a <UART_SetConfig+0x27e>
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a30      	ldr	r2, [pc, #192]	@ (800ae6c <UART_SetConfig+0x2e0>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d12a      	bne.n	800ae04 <UART_SetConfig+0x278>
 800adae:	4b31      	ldr	r3, [pc, #196]	@ (800ae74 <UART_SetConfig+0x2e8>)
 800adb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adb4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800adb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800adbc:	d01a      	beq.n	800adf4 <UART_SetConfig+0x268>
 800adbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800adc2:	d81b      	bhi.n	800adfc <UART_SetConfig+0x270>
 800adc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800adc8:	d00c      	beq.n	800ade4 <UART_SetConfig+0x258>
 800adca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800adce:	d815      	bhi.n	800adfc <UART_SetConfig+0x270>
 800add0:	2b00      	cmp	r3, #0
 800add2:	d003      	beq.n	800addc <UART_SetConfig+0x250>
 800add4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800add8:	d008      	beq.n	800adec <UART_SetConfig+0x260>
 800adda:	e00f      	b.n	800adfc <UART_SetConfig+0x270>
 800addc:	2300      	movs	r3, #0
 800adde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ade2:	e012      	b.n	800ae0a <UART_SetConfig+0x27e>
 800ade4:	2302      	movs	r3, #2
 800ade6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adea:	e00e      	b.n	800ae0a <UART_SetConfig+0x27e>
 800adec:	2304      	movs	r3, #4
 800adee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adf2:	e00a      	b.n	800ae0a <UART_SetConfig+0x27e>
 800adf4:	2308      	movs	r3, #8
 800adf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adfa:	e006      	b.n	800ae0a <UART_SetConfig+0x27e>
 800adfc:	2310      	movs	r3, #16
 800adfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae02:	e002      	b.n	800ae0a <UART_SetConfig+0x27e>
 800ae04:	2310      	movs	r3, #16
 800ae06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a17      	ldr	r2, [pc, #92]	@ (800ae6c <UART_SetConfig+0x2e0>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	f040 80a8 	bne.w	800af66 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ae16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae1a:	2b08      	cmp	r3, #8
 800ae1c:	d834      	bhi.n	800ae88 <UART_SetConfig+0x2fc>
 800ae1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ae24 <UART_SetConfig+0x298>)
 800ae20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae24:	0800ae49 	.word	0x0800ae49
 800ae28:	0800ae89 	.word	0x0800ae89
 800ae2c:	0800ae51 	.word	0x0800ae51
 800ae30:	0800ae89 	.word	0x0800ae89
 800ae34:	0800ae57 	.word	0x0800ae57
 800ae38:	0800ae89 	.word	0x0800ae89
 800ae3c:	0800ae89 	.word	0x0800ae89
 800ae40:	0800ae89 	.word	0x0800ae89
 800ae44:	0800ae5f 	.word	0x0800ae5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae48:	f7fc fe2e 	bl	8007aa8 <HAL_RCC_GetPCLK1Freq>
 800ae4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae4e:	e021      	b.n	800ae94 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae50:	4b0c      	ldr	r3, [pc, #48]	@ (800ae84 <UART_SetConfig+0x2f8>)
 800ae52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae54:	e01e      	b.n	800ae94 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae56:	f7fc fdb9 	bl	80079cc <HAL_RCC_GetSysClockFreq>
 800ae5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae5c:	e01a      	b.n	800ae94 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae64:	e016      	b.n	800ae94 <UART_SetConfig+0x308>
 800ae66:	bf00      	nop
 800ae68:	cfff69f3 	.word	0xcfff69f3
 800ae6c:	40008000 	.word	0x40008000
 800ae70:	40013800 	.word	0x40013800
 800ae74:	40021000 	.word	0x40021000
 800ae78:	40004400 	.word	0x40004400
 800ae7c:	40004800 	.word	0x40004800
 800ae80:	40004c00 	.word	0x40004c00
 800ae84:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ae92:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ae94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	f000 812a 	beq.w	800b0f0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aea0:	4a9e      	ldr	r2, [pc, #632]	@ (800b11c <UART_SetConfig+0x590>)
 800aea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aea6:	461a      	mov	r2, r3
 800aea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeaa:	fbb3 f3f2 	udiv	r3, r3, r2
 800aeae:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	685a      	ldr	r2, [r3, #4]
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	005b      	lsls	r3, r3, #1
 800aeb8:	4413      	add	r3, r2
 800aeba:	69ba      	ldr	r2, [r7, #24]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d305      	bcc.n	800aecc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aec6:	69ba      	ldr	r2, [r7, #24]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d903      	bls.n	800aed4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aed2:	e10d      	b.n	800b0f0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed6:	2200      	movs	r2, #0
 800aed8:	60bb      	str	r3, [r7, #8]
 800aeda:	60fa      	str	r2, [r7, #12]
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aee0:	4a8e      	ldr	r2, [pc, #568]	@ (800b11c <UART_SetConfig+0x590>)
 800aee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	2200      	movs	r2, #0
 800aeea:	603b      	str	r3, [r7, #0]
 800aeec:	607a      	str	r2, [r7, #4]
 800aeee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aef2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aef6:	f7f5 fde1 	bl	8000abc <__aeabi_uldivmod>
 800aefa:	4602      	mov	r2, r0
 800aefc:	460b      	mov	r3, r1
 800aefe:	4610      	mov	r0, r2
 800af00:	4619      	mov	r1, r3
 800af02:	f04f 0200 	mov.w	r2, #0
 800af06:	f04f 0300 	mov.w	r3, #0
 800af0a:	020b      	lsls	r3, r1, #8
 800af0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af10:	0202      	lsls	r2, r0, #8
 800af12:	6979      	ldr	r1, [r7, #20]
 800af14:	6849      	ldr	r1, [r1, #4]
 800af16:	0849      	lsrs	r1, r1, #1
 800af18:	2000      	movs	r0, #0
 800af1a:	460c      	mov	r4, r1
 800af1c:	4605      	mov	r5, r0
 800af1e:	eb12 0804 	adds.w	r8, r2, r4
 800af22:	eb43 0905 	adc.w	r9, r3, r5
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	469a      	mov	sl, r3
 800af2e:	4693      	mov	fp, r2
 800af30:	4652      	mov	r2, sl
 800af32:	465b      	mov	r3, fp
 800af34:	4640      	mov	r0, r8
 800af36:	4649      	mov	r1, r9
 800af38:	f7f5 fdc0 	bl	8000abc <__aeabi_uldivmod>
 800af3c:	4602      	mov	r2, r0
 800af3e:	460b      	mov	r3, r1
 800af40:	4613      	mov	r3, r2
 800af42:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800af44:	6a3b      	ldr	r3, [r7, #32]
 800af46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af4a:	d308      	bcc.n	800af5e <UART_SetConfig+0x3d2>
 800af4c:	6a3b      	ldr	r3, [r7, #32]
 800af4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af52:	d204      	bcs.n	800af5e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	6a3a      	ldr	r2, [r7, #32]
 800af5a:	60da      	str	r2, [r3, #12]
 800af5c:	e0c8      	b.n	800b0f0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800af64:	e0c4      	b.n	800b0f0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	69db      	ldr	r3, [r3, #28]
 800af6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af6e:	d167      	bne.n	800b040 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800af70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800af74:	2b08      	cmp	r3, #8
 800af76:	d828      	bhi.n	800afca <UART_SetConfig+0x43e>
 800af78:	a201      	add	r2, pc, #4	@ (adr r2, 800af80 <UART_SetConfig+0x3f4>)
 800af7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af7e:	bf00      	nop
 800af80:	0800afa5 	.word	0x0800afa5
 800af84:	0800afad 	.word	0x0800afad
 800af88:	0800afb5 	.word	0x0800afb5
 800af8c:	0800afcb 	.word	0x0800afcb
 800af90:	0800afbb 	.word	0x0800afbb
 800af94:	0800afcb 	.word	0x0800afcb
 800af98:	0800afcb 	.word	0x0800afcb
 800af9c:	0800afcb 	.word	0x0800afcb
 800afa0:	0800afc3 	.word	0x0800afc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afa4:	f7fc fd80 	bl	8007aa8 <HAL_RCC_GetPCLK1Freq>
 800afa8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800afaa:	e014      	b.n	800afd6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afac:	f7fc fd92 	bl	8007ad4 <HAL_RCC_GetPCLK2Freq>
 800afb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800afb2:	e010      	b.n	800afd6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800afb4:	4b5a      	ldr	r3, [pc, #360]	@ (800b120 <UART_SetConfig+0x594>)
 800afb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800afb8:	e00d      	b.n	800afd6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afba:	f7fc fd07 	bl	80079cc <HAL_RCC_GetSysClockFreq>
 800afbe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800afc0:	e009      	b.n	800afd6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800afc8:	e005      	b.n	800afd6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800afca:	2300      	movs	r3, #0
 800afcc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800afd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800afd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd8:	2b00      	cmp	r3, #0
 800afda:	f000 8089 	beq.w	800b0f0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afe2:	4a4e      	ldr	r2, [pc, #312]	@ (800b11c <UART_SetConfig+0x590>)
 800afe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afe8:	461a      	mov	r2, r3
 800afea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afec:	fbb3 f3f2 	udiv	r3, r3, r2
 800aff0:	005a      	lsls	r2, r3, #1
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	085b      	lsrs	r3, r3, #1
 800aff8:	441a      	add	r2, r3
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b002:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b004:	6a3b      	ldr	r3, [r7, #32]
 800b006:	2b0f      	cmp	r3, #15
 800b008:	d916      	bls.n	800b038 <UART_SetConfig+0x4ac>
 800b00a:	6a3b      	ldr	r3, [r7, #32]
 800b00c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b010:	d212      	bcs.n	800b038 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b012:	6a3b      	ldr	r3, [r7, #32]
 800b014:	b29b      	uxth	r3, r3
 800b016:	f023 030f 	bic.w	r3, r3, #15
 800b01a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b01c:	6a3b      	ldr	r3, [r7, #32]
 800b01e:	085b      	lsrs	r3, r3, #1
 800b020:	b29b      	uxth	r3, r3
 800b022:	f003 0307 	and.w	r3, r3, #7
 800b026:	b29a      	uxth	r2, r3
 800b028:	8bfb      	ldrh	r3, [r7, #30]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	8bfa      	ldrh	r2, [r7, #30]
 800b034:	60da      	str	r2, [r3, #12]
 800b036:	e05b      	b.n	800b0f0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b03e:	e057      	b.n	800b0f0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b040:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b044:	2b08      	cmp	r3, #8
 800b046:	d828      	bhi.n	800b09a <UART_SetConfig+0x50e>
 800b048:	a201      	add	r2, pc, #4	@ (adr r2, 800b050 <UART_SetConfig+0x4c4>)
 800b04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b04e:	bf00      	nop
 800b050:	0800b075 	.word	0x0800b075
 800b054:	0800b07d 	.word	0x0800b07d
 800b058:	0800b085 	.word	0x0800b085
 800b05c:	0800b09b 	.word	0x0800b09b
 800b060:	0800b08b 	.word	0x0800b08b
 800b064:	0800b09b 	.word	0x0800b09b
 800b068:	0800b09b 	.word	0x0800b09b
 800b06c:	0800b09b 	.word	0x0800b09b
 800b070:	0800b093 	.word	0x0800b093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b074:	f7fc fd18 	bl	8007aa8 <HAL_RCC_GetPCLK1Freq>
 800b078:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b07a:	e014      	b.n	800b0a6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b07c:	f7fc fd2a 	bl	8007ad4 <HAL_RCC_GetPCLK2Freq>
 800b080:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b082:	e010      	b.n	800b0a6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b084:	4b26      	ldr	r3, [pc, #152]	@ (800b120 <UART_SetConfig+0x594>)
 800b086:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b088:	e00d      	b.n	800b0a6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b08a:	f7fc fc9f 	bl	80079cc <HAL_RCC_GetSysClockFreq>
 800b08e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b090:	e009      	b.n	800b0a6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b092:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b096:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b098:	e005      	b.n	800b0a6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800b09a:	2300      	movs	r3, #0
 800b09c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b0a4:	bf00      	nop
    }

    if (pclk != 0U)
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d021      	beq.n	800b0f0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0b0:	4a1a      	ldr	r2, [pc, #104]	@ (800b11c <UART_SetConfig+0x590>)
 800b0b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ba:	fbb3 f2f2 	udiv	r2, r3, r2
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	085b      	lsrs	r3, r3, #1
 800b0c4:	441a      	add	r2, r3
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0d0:	6a3b      	ldr	r3, [r7, #32]
 800b0d2:	2b0f      	cmp	r3, #15
 800b0d4:	d909      	bls.n	800b0ea <UART_SetConfig+0x55e>
 800b0d6:	6a3b      	ldr	r3, [r7, #32]
 800b0d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0dc:	d205      	bcs.n	800b0ea <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b0de:	6a3b      	ldr	r3, [r7, #32]
 800b0e0:	b29a      	uxth	r2, r3
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	60da      	str	r2, [r3, #12]
 800b0e8:	e002      	b.n	800b0f0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	2200      	movs	r2, #0
 800b104:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	2200      	movs	r2, #0
 800b10a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b10c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b110:	4618      	mov	r0, r3
 800b112:	3730      	adds	r7, #48	@ 0x30
 800b114:	46bd      	mov	sp, r7
 800b116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b11a:	bf00      	nop
 800b11c:	0800c8d0 	.word	0x0800c8d0
 800b120:	00f42400 	.word	0x00f42400

0800b124 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b130:	f003 0308 	and.w	r3, r3, #8
 800b134:	2b00      	cmp	r3, #0
 800b136:	d00a      	beq.n	800b14e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	430a      	orrs	r2, r1
 800b14c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b152:	f003 0301 	and.w	r3, r3, #1
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00a      	beq.n	800b170 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	430a      	orrs	r2, r1
 800b16e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b174:	f003 0302 	and.w	r3, r3, #2
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d00a      	beq.n	800b192 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	430a      	orrs	r2, r1
 800b190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b196:	f003 0304 	and.w	r3, r3, #4
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00a      	beq.n	800b1b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	430a      	orrs	r2, r1
 800b1b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1b8:	f003 0310 	and.w	r3, r3, #16
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d00a      	beq.n	800b1d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	430a      	orrs	r2, r1
 800b1d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1da:	f003 0320 	and.w	r3, r3, #32
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d00a      	beq.n	800b1f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	430a      	orrs	r2, r1
 800b1f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b200:	2b00      	cmp	r3, #0
 800b202:	d01a      	beq.n	800b23a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	430a      	orrs	r2, r1
 800b218:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b21e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b222:	d10a      	bne.n	800b23a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	430a      	orrs	r2, r1
 800b238:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b23e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00a      	beq.n	800b25c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	430a      	orrs	r2, r1
 800b25a:	605a      	str	r2, [r3, #4]
  }
}
 800b25c:	bf00      	nop
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b098      	sub	sp, #96	@ 0x60
 800b26c:	af02      	add	r7, sp, #8
 800b26e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b278:	f7f8 feac 	bl	8003fd4 <HAL_GetTick>
 800b27c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f003 0308 	and.w	r3, r3, #8
 800b288:	2b08      	cmp	r3, #8
 800b28a:	d12f      	bne.n	800b2ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b28c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b294:	2200      	movs	r2, #0
 800b296:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 f88e 	bl	800b3bc <UART_WaitOnFlagUntilTimeout>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d022      	beq.n	800b2ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ae:	e853 3f00 	ldrex	r3, [r3]
 800b2b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b2b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b2ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b2ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b2cc:	e841 2300 	strex	r3, r2, [r1]
 800b2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b2d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1e6      	bne.n	800b2a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2220      	movs	r2, #32
 800b2dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	e063      	b.n	800b3b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f003 0304 	and.w	r3, r3, #4
 800b2f6:	2b04      	cmp	r3, #4
 800b2f8:	d149      	bne.n	800b38e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b2fe:	9300      	str	r3, [sp, #0]
 800b300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b302:	2200      	movs	r2, #0
 800b304:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 f857 	bl	800b3bc <UART_WaitOnFlagUntilTimeout>
 800b30e:	4603      	mov	r3, r0
 800b310:	2b00      	cmp	r3, #0
 800b312:	d03c      	beq.n	800b38e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b31c:	e853 3f00 	ldrex	r3, [r3]
 800b320:	623b      	str	r3, [r7, #32]
   return(result);
 800b322:	6a3b      	ldr	r3, [r7, #32]
 800b324:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b328:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	461a      	mov	r2, r3
 800b330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b332:	633b      	str	r3, [r7, #48]	@ 0x30
 800b334:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b336:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b33a:	e841 2300 	strex	r3, r2, [r1]
 800b33e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1e6      	bne.n	800b314 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	3308      	adds	r3, #8
 800b34c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	e853 3f00 	ldrex	r3, [r3]
 800b354:	60fb      	str	r3, [r7, #12]
   return(result);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f023 0301 	bic.w	r3, r3, #1
 800b35c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	3308      	adds	r3, #8
 800b364:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b366:	61fa      	str	r2, [r7, #28]
 800b368:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36a:	69b9      	ldr	r1, [r7, #24]
 800b36c:	69fa      	ldr	r2, [r7, #28]
 800b36e:	e841 2300 	strex	r3, r2, [r1]
 800b372:	617b      	str	r3, [r7, #20]
   return(result);
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d1e5      	bne.n	800b346 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2220      	movs	r2, #32
 800b37e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b38a:	2303      	movs	r3, #3
 800b38c:	e012      	b.n	800b3b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2220      	movs	r2, #32
 800b392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2220      	movs	r2, #32
 800b39a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b3b2:	2300      	movs	r3, #0
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3758      	adds	r7, #88	@ 0x58
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	603b      	str	r3, [r7, #0]
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3cc:	e04f      	b.n	800b46e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3d4:	d04b      	beq.n	800b46e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3d6:	f7f8 fdfd 	bl	8003fd4 <HAL_GetTick>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	1ad3      	subs	r3, r2, r3
 800b3e0:	69ba      	ldr	r2, [r7, #24]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d302      	bcc.n	800b3ec <UART_WaitOnFlagUntilTimeout+0x30>
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d101      	bne.n	800b3f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b3ec:	2303      	movs	r3, #3
 800b3ee:	e04e      	b.n	800b48e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f003 0304 	and.w	r3, r3, #4
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d037      	beq.n	800b46e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	2b80      	cmp	r3, #128	@ 0x80
 800b402:	d034      	beq.n	800b46e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	2b40      	cmp	r3, #64	@ 0x40
 800b408:	d031      	beq.n	800b46e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	69db      	ldr	r3, [r3, #28]
 800b410:	f003 0308 	and.w	r3, r3, #8
 800b414:	2b08      	cmp	r3, #8
 800b416:	d110      	bne.n	800b43a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2208      	movs	r2, #8
 800b41e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	f000 f838 	bl	800b496 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2208      	movs	r2, #8
 800b42a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	e029      	b.n	800b48e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	69db      	ldr	r3, [r3, #28]
 800b440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b444:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b448:	d111      	bne.n	800b46e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b452:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f000 f81e 	bl	800b496 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2220      	movs	r2, #32
 800b45e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2200      	movs	r2, #0
 800b466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b46a:	2303      	movs	r3, #3
 800b46c:	e00f      	b.n	800b48e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	69da      	ldr	r2, [r3, #28]
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	4013      	ands	r3, r2
 800b478:	68ba      	ldr	r2, [r7, #8]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	bf0c      	ite	eq
 800b47e:	2301      	moveq	r3, #1
 800b480:	2300      	movne	r3, #0
 800b482:	b2db      	uxtb	r3, r3
 800b484:	461a      	mov	r2, r3
 800b486:	79fb      	ldrb	r3, [r7, #7]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d0a0      	beq.n	800b3ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b496:	b480      	push	{r7}
 800b498:	b095      	sub	sp, #84	@ 0x54
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4a6:	e853 3f00 	ldrex	r3, [r3]
 800b4aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4bc:	643b      	str	r3, [r7, #64]	@ 0x40
 800b4be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b4c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b4c4:	e841 2300 	strex	r3, r2, [r1]
 800b4c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1e6      	bne.n	800b49e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	3308      	adds	r3, #8
 800b4d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d8:	6a3b      	ldr	r3, [r7, #32]
 800b4da:	e853 3f00 	ldrex	r3, [r3]
 800b4de:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b4e6:	f023 0301 	bic.w	r3, r3, #1
 800b4ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	3308      	adds	r3, #8
 800b4f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b4f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4fc:	e841 2300 	strex	r3, r2, [r1]
 800b500:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1e3      	bne.n	800b4d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d118      	bne.n	800b542 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	e853 3f00 	ldrex	r3, [r3]
 800b51c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	f023 0310 	bic.w	r3, r3, #16
 800b524:	647b      	str	r3, [r7, #68]	@ 0x44
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	461a      	mov	r2, r3
 800b52c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b52e:	61bb      	str	r3, [r7, #24]
 800b530:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b532:	6979      	ldr	r1, [r7, #20]
 800b534:	69ba      	ldr	r2, [r7, #24]
 800b536:	e841 2300 	strex	r3, r2, [r1]
 800b53a:	613b      	str	r3, [r7, #16]
   return(result);
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d1e6      	bne.n	800b510 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2220      	movs	r2, #32
 800b546:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2200      	movs	r2, #0
 800b54e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b556:	bf00      	nop
 800b558:	3754      	adds	r7, #84	@ 0x54
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr

0800b562 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b562:	b480      	push	{r7}
 800b564:	b085      	sub	sp, #20
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b570:	2b01      	cmp	r3, #1
 800b572:	d101      	bne.n	800b578 <HAL_UARTEx_DisableFifoMode+0x16>
 800b574:	2302      	movs	r3, #2
 800b576:	e027      	b.n	800b5c8 <HAL_UARTEx_DisableFifoMode+0x66>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2224      	movs	r2, #36	@ 0x24
 800b584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f022 0201 	bic.w	r2, r2, #1
 800b59e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b5a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2220      	movs	r2, #32
 800b5ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5c6:	2300      	movs	r3, #0
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3714      	adds	r7, #20
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d101      	bne.n	800b5ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b5e8:	2302      	movs	r3, #2
 800b5ea:	e02d      	b.n	800b648 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2224      	movs	r2, #36	@ 0x24
 800b5f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f022 0201 	bic.w	r2, r2, #1
 800b612:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	689b      	ldr	r3, [r3, #8]
 800b61a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	683a      	ldr	r2, [r7, #0]
 800b624:	430a      	orrs	r2, r1
 800b626:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f84f 	bl	800b6cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	68fa      	ldr	r2, [r7, #12]
 800b634:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2220      	movs	r2, #32
 800b63a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b646:	2300      	movs	r3, #0
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b660:	2b01      	cmp	r3, #1
 800b662:	d101      	bne.n	800b668 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b664:	2302      	movs	r3, #2
 800b666:	e02d      	b.n	800b6c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2224      	movs	r2, #36	@ 0x24
 800b674:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f022 0201 	bic.w	r2, r2, #1
 800b68e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	689b      	ldr	r3, [r3, #8]
 800b696:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	683a      	ldr	r2, [r7, #0]
 800b6a0:	430a      	orrs	r2, r1
 800b6a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 f811 	bl	800b6cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2220      	movs	r2, #32
 800b6b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b6c2:	2300      	movs	r3, #0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b085      	sub	sp, #20
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d108      	bne.n	800b6ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b6ec:	e031      	b.n	800b752 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b6ee:	2308      	movs	r3, #8
 800b6f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b6f2:	2308      	movs	r3, #8
 800b6f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	0e5b      	lsrs	r3, r3, #25
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	f003 0307 	and.w	r3, r3, #7
 800b704:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	0f5b      	lsrs	r3, r3, #29
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	f003 0307 	and.w	r3, r3, #7
 800b714:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b716:	7bbb      	ldrb	r3, [r7, #14]
 800b718:	7b3a      	ldrb	r2, [r7, #12]
 800b71a:	4911      	ldr	r1, [pc, #68]	@ (800b760 <UARTEx_SetNbDataToProcess+0x94>)
 800b71c:	5c8a      	ldrb	r2, [r1, r2]
 800b71e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b722:	7b3a      	ldrb	r2, [r7, #12]
 800b724:	490f      	ldr	r1, [pc, #60]	@ (800b764 <UARTEx_SetNbDataToProcess+0x98>)
 800b726:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b728:	fb93 f3f2 	sdiv	r3, r3, r2
 800b72c:	b29a      	uxth	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b734:	7bfb      	ldrb	r3, [r7, #15]
 800b736:	7b7a      	ldrb	r2, [r7, #13]
 800b738:	4909      	ldr	r1, [pc, #36]	@ (800b760 <UARTEx_SetNbDataToProcess+0x94>)
 800b73a:	5c8a      	ldrb	r2, [r1, r2]
 800b73c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b740:	7b7a      	ldrb	r2, [r7, #13]
 800b742:	4908      	ldr	r1, [pc, #32]	@ (800b764 <UARTEx_SetNbDataToProcess+0x98>)
 800b744:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b746:	fb93 f3f2 	sdiv	r3, r3, r2
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b752:	bf00      	nop
 800b754:	3714      	adds	r7, #20
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	0800c8e8 	.word	0x0800c8e8
 800b764:	0800c8f0 	.word	0x0800c8f0

0800b768 <siprintf>:
 800b768:	b40e      	push	{r1, r2, r3}
 800b76a:	b500      	push	{lr}
 800b76c:	b09c      	sub	sp, #112	@ 0x70
 800b76e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b770:	9002      	str	r0, [sp, #8]
 800b772:	9006      	str	r0, [sp, #24]
 800b774:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b778:	4809      	ldr	r0, [pc, #36]	@ (800b7a0 <siprintf+0x38>)
 800b77a:	9107      	str	r1, [sp, #28]
 800b77c:	9104      	str	r1, [sp, #16]
 800b77e:	4909      	ldr	r1, [pc, #36]	@ (800b7a4 <siprintf+0x3c>)
 800b780:	f853 2b04 	ldr.w	r2, [r3], #4
 800b784:	9105      	str	r1, [sp, #20]
 800b786:	6800      	ldr	r0, [r0, #0]
 800b788:	9301      	str	r3, [sp, #4]
 800b78a:	a902      	add	r1, sp, #8
 800b78c:	f000 f994 	bl	800bab8 <_svfiprintf_r>
 800b790:	9b02      	ldr	r3, [sp, #8]
 800b792:	2200      	movs	r2, #0
 800b794:	701a      	strb	r2, [r3, #0]
 800b796:	b01c      	add	sp, #112	@ 0x70
 800b798:	f85d eb04 	ldr.w	lr, [sp], #4
 800b79c:	b003      	add	sp, #12
 800b79e:	4770      	bx	lr
 800b7a0:	20000024 	.word	0x20000024
 800b7a4:	ffff0208 	.word	0xffff0208

0800b7a8 <memset>:
 800b7a8:	4402      	add	r2, r0
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d100      	bne.n	800b7b2 <memset+0xa>
 800b7b0:	4770      	bx	lr
 800b7b2:	f803 1b01 	strb.w	r1, [r3], #1
 800b7b6:	e7f9      	b.n	800b7ac <memset+0x4>

0800b7b8 <__errno>:
 800b7b8:	4b01      	ldr	r3, [pc, #4]	@ (800b7c0 <__errno+0x8>)
 800b7ba:	6818      	ldr	r0, [r3, #0]
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop
 800b7c0:	20000024 	.word	0x20000024

0800b7c4 <__libc_init_array>:
 800b7c4:	b570      	push	{r4, r5, r6, lr}
 800b7c6:	4d0d      	ldr	r5, [pc, #52]	@ (800b7fc <__libc_init_array+0x38>)
 800b7c8:	4c0d      	ldr	r4, [pc, #52]	@ (800b800 <__libc_init_array+0x3c>)
 800b7ca:	1b64      	subs	r4, r4, r5
 800b7cc:	10a4      	asrs	r4, r4, #2
 800b7ce:	2600      	movs	r6, #0
 800b7d0:	42a6      	cmp	r6, r4
 800b7d2:	d109      	bne.n	800b7e8 <__libc_init_array+0x24>
 800b7d4:	4d0b      	ldr	r5, [pc, #44]	@ (800b804 <__libc_init_array+0x40>)
 800b7d6:	4c0c      	ldr	r4, [pc, #48]	@ (800b808 <__libc_init_array+0x44>)
 800b7d8:	f000 fc66 	bl	800c0a8 <_init>
 800b7dc:	1b64      	subs	r4, r4, r5
 800b7de:	10a4      	asrs	r4, r4, #2
 800b7e0:	2600      	movs	r6, #0
 800b7e2:	42a6      	cmp	r6, r4
 800b7e4:	d105      	bne.n	800b7f2 <__libc_init_array+0x2e>
 800b7e6:	bd70      	pop	{r4, r5, r6, pc}
 800b7e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7ec:	4798      	blx	r3
 800b7ee:	3601      	adds	r6, #1
 800b7f0:	e7ee      	b.n	800b7d0 <__libc_init_array+0xc>
 800b7f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7f6:	4798      	blx	r3
 800b7f8:	3601      	adds	r6, #1
 800b7fa:	e7f2      	b.n	800b7e2 <__libc_init_array+0x1e>
 800b7fc:	0800c934 	.word	0x0800c934
 800b800:	0800c934 	.word	0x0800c934
 800b804:	0800c934 	.word	0x0800c934
 800b808:	0800c938 	.word	0x0800c938

0800b80c <__retarget_lock_acquire_recursive>:
 800b80c:	4770      	bx	lr

0800b80e <__retarget_lock_release_recursive>:
 800b80e:	4770      	bx	lr

0800b810 <_free_r>:
 800b810:	b538      	push	{r3, r4, r5, lr}
 800b812:	4605      	mov	r5, r0
 800b814:	2900      	cmp	r1, #0
 800b816:	d041      	beq.n	800b89c <_free_r+0x8c>
 800b818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b81c:	1f0c      	subs	r4, r1, #4
 800b81e:	2b00      	cmp	r3, #0
 800b820:	bfb8      	it	lt
 800b822:	18e4      	addlt	r4, r4, r3
 800b824:	f000 f8e0 	bl	800b9e8 <__malloc_lock>
 800b828:	4a1d      	ldr	r2, [pc, #116]	@ (800b8a0 <_free_r+0x90>)
 800b82a:	6813      	ldr	r3, [r2, #0]
 800b82c:	b933      	cbnz	r3, 800b83c <_free_r+0x2c>
 800b82e:	6063      	str	r3, [r4, #4]
 800b830:	6014      	str	r4, [r2, #0]
 800b832:	4628      	mov	r0, r5
 800b834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b838:	f000 b8dc 	b.w	800b9f4 <__malloc_unlock>
 800b83c:	42a3      	cmp	r3, r4
 800b83e:	d908      	bls.n	800b852 <_free_r+0x42>
 800b840:	6820      	ldr	r0, [r4, #0]
 800b842:	1821      	adds	r1, r4, r0
 800b844:	428b      	cmp	r3, r1
 800b846:	bf01      	itttt	eq
 800b848:	6819      	ldreq	r1, [r3, #0]
 800b84a:	685b      	ldreq	r3, [r3, #4]
 800b84c:	1809      	addeq	r1, r1, r0
 800b84e:	6021      	streq	r1, [r4, #0]
 800b850:	e7ed      	b.n	800b82e <_free_r+0x1e>
 800b852:	461a      	mov	r2, r3
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	b10b      	cbz	r3, 800b85c <_free_r+0x4c>
 800b858:	42a3      	cmp	r3, r4
 800b85a:	d9fa      	bls.n	800b852 <_free_r+0x42>
 800b85c:	6811      	ldr	r1, [r2, #0]
 800b85e:	1850      	adds	r0, r2, r1
 800b860:	42a0      	cmp	r0, r4
 800b862:	d10b      	bne.n	800b87c <_free_r+0x6c>
 800b864:	6820      	ldr	r0, [r4, #0]
 800b866:	4401      	add	r1, r0
 800b868:	1850      	adds	r0, r2, r1
 800b86a:	4283      	cmp	r3, r0
 800b86c:	6011      	str	r1, [r2, #0]
 800b86e:	d1e0      	bne.n	800b832 <_free_r+0x22>
 800b870:	6818      	ldr	r0, [r3, #0]
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	6053      	str	r3, [r2, #4]
 800b876:	4408      	add	r0, r1
 800b878:	6010      	str	r0, [r2, #0]
 800b87a:	e7da      	b.n	800b832 <_free_r+0x22>
 800b87c:	d902      	bls.n	800b884 <_free_r+0x74>
 800b87e:	230c      	movs	r3, #12
 800b880:	602b      	str	r3, [r5, #0]
 800b882:	e7d6      	b.n	800b832 <_free_r+0x22>
 800b884:	6820      	ldr	r0, [r4, #0]
 800b886:	1821      	adds	r1, r4, r0
 800b888:	428b      	cmp	r3, r1
 800b88a:	bf04      	itt	eq
 800b88c:	6819      	ldreq	r1, [r3, #0]
 800b88e:	685b      	ldreq	r3, [r3, #4]
 800b890:	6063      	str	r3, [r4, #4]
 800b892:	bf04      	itt	eq
 800b894:	1809      	addeq	r1, r1, r0
 800b896:	6021      	streq	r1, [r4, #0]
 800b898:	6054      	str	r4, [r2, #4]
 800b89a:	e7ca      	b.n	800b832 <_free_r+0x22>
 800b89c:	bd38      	pop	{r3, r4, r5, pc}
 800b89e:	bf00      	nop
 800b8a0:	200010f8 	.word	0x200010f8

0800b8a4 <sbrk_aligned>:
 800b8a4:	b570      	push	{r4, r5, r6, lr}
 800b8a6:	4e0f      	ldr	r6, [pc, #60]	@ (800b8e4 <sbrk_aligned+0x40>)
 800b8a8:	460c      	mov	r4, r1
 800b8aa:	6831      	ldr	r1, [r6, #0]
 800b8ac:	4605      	mov	r5, r0
 800b8ae:	b911      	cbnz	r1, 800b8b6 <sbrk_aligned+0x12>
 800b8b0:	f000 fba6 	bl	800c000 <_sbrk_r>
 800b8b4:	6030      	str	r0, [r6, #0]
 800b8b6:	4621      	mov	r1, r4
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	f000 fba1 	bl	800c000 <_sbrk_r>
 800b8be:	1c43      	adds	r3, r0, #1
 800b8c0:	d103      	bne.n	800b8ca <sbrk_aligned+0x26>
 800b8c2:	f04f 34ff 	mov.w	r4, #4294967295
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	bd70      	pop	{r4, r5, r6, pc}
 800b8ca:	1cc4      	adds	r4, r0, #3
 800b8cc:	f024 0403 	bic.w	r4, r4, #3
 800b8d0:	42a0      	cmp	r0, r4
 800b8d2:	d0f8      	beq.n	800b8c6 <sbrk_aligned+0x22>
 800b8d4:	1a21      	subs	r1, r4, r0
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	f000 fb92 	bl	800c000 <_sbrk_r>
 800b8dc:	3001      	adds	r0, #1
 800b8de:	d1f2      	bne.n	800b8c6 <sbrk_aligned+0x22>
 800b8e0:	e7ef      	b.n	800b8c2 <sbrk_aligned+0x1e>
 800b8e2:	bf00      	nop
 800b8e4:	200010f4 	.word	0x200010f4

0800b8e8 <_malloc_r>:
 800b8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8ec:	1ccd      	adds	r5, r1, #3
 800b8ee:	f025 0503 	bic.w	r5, r5, #3
 800b8f2:	3508      	adds	r5, #8
 800b8f4:	2d0c      	cmp	r5, #12
 800b8f6:	bf38      	it	cc
 800b8f8:	250c      	movcc	r5, #12
 800b8fa:	2d00      	cmp	r5, #0
 800b8fc:	4606      	mov	r6, r0
 800b8fe:	db01      	blt.n	800b904 <_malloc_r+0x1c>
 800b900:	42a9      	cmp	r1, r5
 800b902:	d904      	bls.n	800b90e <_malloc_r+0x26>
 800b904:	230c      	movs	r3, #12
 800b906:	6033      	str	r3, [r6, #0]
 800b908:	2000      	movs	r0, #0
 800b90a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b90e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b9e4 <_malloc_r+0xfc>
 800b912:	f000 f869 	bl	800b9e8 <__malloc_lock>
 800b916:	f8d8 3000 	ldr.w	r3, [r8]
 800b91a:	461c      	mov	r4, r3
 800b91c:	bb44      	cbnz	r4, 800b970 <_malloc_r+0x88>
 800b91e:	4629      	mov	r1, r5
 800b920:	4630      	mov	r0, r6
 800b922:	f7ff ffbf 	bl	800b8a4 <sbrk_aligned>
 800b926:	1c43      	adds	r3, r0, #1
 800b928:	4604      	mov	r4, r0
 800b92a:	d158      	bne.n	800b9de <_malloc_r+0xf6>
 800b92c:	f8d8 4000 	ldr.w	r4, [r8]
 800b930:	4627      	mov	r7, r4
 800b932:	2f00      	cmp	r7, #0
 800b934:	d143      	bne.n	800b9be <_malloc_r+0xd6>
 800b936:	2c00      	cmp	r4, #0
 800b938:	d04b      	beq.n	800b9d2 <_malloc_r+0xea>
 800b93a:	6823      	ldr	r3, [r4, #0]
 800b93c:	4639      	mov	r1, r7
 800b93e:	4630      	mov	r0, r6
 800b940:	eb04 0903 	add.w	r9, r4, r3
 800b944:	f000 fb5c 	bl	800c000 <_sbrk_r>
 800b948:	4581      	cmp	r9, r0
 800b94a:	d142      	bne.n	800b9d2 <_malloc_r+0xea>
 800b94c:	6821      	ldr	r1, [r4, #0]
 800b94e:	1a6d      	subs	r5, r5, r1
 800b950:	4629      	mov	r1, r5
 800b952:	4630      	mov	r0, r6
 800b954:	f7ff ffa6 	bl	800b8a4 <sbrk_aligned>
 800b958:	3001      	adds	r0, #1
 800b95a:	d03a      	beq.n	800b9d2 <_malloc_r+0xea>
 800b95c:	6823      	ldr	r3, [r4, #0]
 800b95e:	442b      	add	r3, r5
 800b960:	6023      	str	r3, [r4, #0]
 800b962:	f8d8 3000 	ldr.w	r3, [r8]
 800b966:	685a      	ldr	r2, [r3, #4]
 800b968:	bb62      	cbnz	r2, 800b9c4 <_malloc_r+0xdc>
 800b96a:	f8c8 7000 	str.w	r7, [r8]
 800b96e:	e00f      	b.n	800b990 <_malloc_r+0xa8>
 800b970:	6822      	ldr	r2, [r4, #0]
 800b972:	1b52      	subs	r2, r2, r5
 800b974:	d420      	bmi.n	800b9b8 <_malloc_r+0xd0>
 800b976:	2a0b      	cmp	r2, #11
 800b978:	d917      	bls.n	800b9aa <_malloc_r+0xc2>
 800b97a:	1961      	adds	r1, r4, r5
 800b97c:	42a3      	cmp	r3, r4
 800b97e:	6025      	str	r5, [r4, #0]
 800b980:	bf18      	it	ne
 800b982:	6059      	strne	r1, [r3, #4]
 800b984:	6863      	ldr	r3, [r4, #4]
 800b986:	bf08      	it	eq
 800b988:	f8c8 1000 	streq.w	r1, [r8]
 800b98c:	5162      	str	r2, [r4, r5]
 800b98e:	604b      	str	r3, [r1, #4]
 800b990:	4630      	mov	r0, r6
 800b992:	f000 f82f 	bl	800b9f4 <__malloc_unlock>
 800b996:	f104 000b 	add.w	r0, r4, #11
 800b99a:	1d23      	adds	r3, r4, #4
 800b99c:	f020 0007 	bic.w	r0, r0, #7
 800b9a0:	1ac2      	subs	r2, r0, r3
 800b9a2:	bf1c      	itt	ne
 800b9a4:	1a1b      	subne	r3, r3, r0
 800b9a6:	50a3      	strne	r3, [r4, r2]
 800b9a8:	e7af      	b.n	800b90a <_malloc_r+0x22>
 800b9aa:	6862      	ldr	r2, [r4, #4]
 800b9ac:	42a3      	cmp	r3, r4
 800b9ae:	bf0c      	ite	eq
 800b9b0:	f8c8 2000 	streq.w	r2, [r8]
 800b9b4:	605a      	strne	r2, [r3, #4]
 800b9b6:	e7eb      	b.n	800b990 <_malloc_r+0xa8>
 800b9b8:	4623      	mov	r3, r4
 800b9ba:	6864      	ldr	r4, [r4, #4]
 800b9bc:	e7ae      	b.n	800b91c <_malloc_r+0x34>
 800b9be:	463c      	mov	r4, r7
 800b9c0:	687f      	ldr	r7, [r7, #4]
 800b9c2:	e7b6      	b.n	800b932 <_malloc_r+0x4a>
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	42a3      	cmp	r3, r4
 800b9ca:	d1fb      	bne.n	800b9c4 <_malloc_r+0xdc>
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	6053      	str	r3, [r2, #4]
 800b9d0:	e7de      	b.n	800b990 <_malloc_r+0xa8>
 800b9d2:	230c      	movs	r3, #12
 800b9d4:	6033      	str	r3, [r6, #0]
 800b9d6:	4630      	mov	r0, r6
 800b9d8:	f000 f80c 	bl	800b9f4 <__malloc_unlock>
 800b9dc:	e794      	b.n	800b908 <_malloc_r+0x20>
 800b9de:	6005      	str	r5, [r0, #0]
 800b9e0:	e7d6      	b.n	800b990 <_malloc_r+0xa8>
 800b9e2:	bf00      	nop
 800b9e4:	200010f8 	.word	0x200010f8

0800b9e8 <__malloc_lock>:
 800b9e8:	4801      	ldr	r0, [pc, #4]	@ (800b9f0 <__malloc_lock+0x8>)
 800b9ea:	f7ff bf0f 	b.w	800b80c <__retarget_lock_acquire_recursive>
 800b9ee:	bf00      	nop
 800b9f0:	200010f0 	.word	0x200010f0

0800b9f4 <__malloc_unlock>:
 800b9f4:	4801      	ldr	r0, [pc, #4]	@ (800b9fc <__malloc_unlock+0x8>)
 800b9f6:	f7ff bf0a 	b.w	800b80e <__retarget_lock_release_recursive>
 800b9fa:	bf00      	nop
 800b9fc:	200010f0 	.word	0x200010f0

0800ba00 <__ssputs_r>:
 800ba00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba04:	688e      	ldr	r6, [r1, #8]
 800ba06:	461f      	mov	r7, r3
 800ba08:	42be      	cmp	r6, r7
 800ba0a:	680b      	ldr	r3, [r1, #0]
 800ba0c:	4682      	mov	sl, r0
 800ba0e:	460c      	mov	r4, r1
 800ba10:	4690      	mov	r8, r2
 800ba12:	d82d      	bhi.n	800ba70 <__ssputs_r+0x70>
 800ba14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ba1c:	d026      	beq.n	800ba6c <__ssputs_r+0x6c>
 800ba1e:	6965      	ldr	r5, [r4, #20]
 800ba20:	6909      	ldr	r1, [r1, #16]
 800ba22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba26:	eba3 0901 	sub.w	r9, r3, r1
 800ba2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba2e:	1c7b      	adds	r3, r7, #1
 800ba30:	444b      	add	r3, r9
 800ba32:	106d      	asrs	r5, r5, #1
 800ba34:	429d      	cmp	r5, r3
 800ba36:	bf38      	it	cc
 800ba38:	461d      	movcc	r5, r3
 800ba3a:	0553      	lsls	r3, r2, #21
 800ba3c:	d527      	bpl.n	800ba8e <__ssputs_r+0x8e>
 800ba3e:	4629      	mov	r1, r5
 800ba40:	f7ff ff52 	bl	800b8e8 <_malloc_r>
 800ba44:	4606      	mov	r6, r0
 800ba46:	b360      	cbz	r0, 800baa2 <__ssputs_r+0xa2>
 800ba48:	6921      	ldr	r1, [r4, #16]
 800ba4a:	464a      	mov	r2, r9
 800ba4c:	f000 fae8 	bl	800c020 <memcpy>
 800ba50:	89a3      	ldrh	r3, [r4, #12]
 800ba52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ba56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba5a:	81a3      	strh	r3, [r4, #12]
 800ba5c:	6126      	str	r6, [r4, #16]
 800ba5e:	6165      	str	r5, [r4, #20]
 800ba60:	444e      	add	r6, r9
 800ba62:	eba5 0509 	sub.w	r5, r5, r9
 800ba66:	6026      	str	r6, [r4, #0]
 800ba68:	60a5      	str	r5, [r4, #8]
 800ba6a:	463e      	mov	r6, r7
 800ba6c:	42be      	cmp	r6, r7
 800ba6e:	d900      	bls.n	800ba72 <__ssputs_r+0x72>
 800ba70:	463e      	mov	r6, r7
 800ba72:	6820      	ldr	r0, [r4, #0]
 800ba74:	4632      	mov	r2, r6
 800ba76:	4641      	mov	r1, r8
 800ba78:	f000 faa8 	bl	800bfcc <memmove>
 800ba7c:	68a3      	ldr	r3, [r4, #8]
 800ba7e:	1b9b      	subs	r3, r3, r6
 800ba80:	60a3      	str	r3, [r4, #8]
 800ba82:	6823      	ldr	r3, [r4, #0]
 800ba84:	4433      	add	r3, r6
 800ba86:	6023      	str	r3, [r4, #0]
 800ba88:	2000      	movs	r0, #0
 800ba8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba8e:	462a      	mov	r2, r5
 800ba90:	f000 fad4 	bl	800c03c <_realloc_r>
 800ba94:	4606      	mov	r6, r0
 800ba96:	2800      	cmp	r0, #0
 800ba98:	d1e0      	bne.n	800ba5c <__ssputs_r+0x5c>
 800ba9a:	6921      	ldr	r1, [r4, #16]
 800ba9c:	4650      	mov	r0, sl
 800ba9e:	f7ff feb7 	bl	800b810 <_free_r>
 800baa2:	230c      	movs	r3, #12
 800baa4:	f8ca 3000 	str.w	r3, [sl]
 800baa8:	89a3      	ldrh	r3, [r4, #12]
 800baaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800baae:	81a3      	strh	r3, [r4, #12]
 800bab0:	f04f 30ff 	mov.w	r0, #4294967295
 800bab4:	e7e9      	b.n	800ba8a <__ssputs_r+0x8a>
	...

0800bab8 <_svfiprintf_r>:
 800bab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800babc:	4698      	mov	r8, r3
 800babe:	898b      	ldrh	r3, [r1, #12]
 800bac0:	061b      	lsls	r3, r3, #24
 800bac2:	b09d      	sub	sp, #116	@ 0x74
 800bac4:	4607      	mov	r7, r0
 800bac6:	460d      	mov	r5, r1
 800bac8:	4614      	mov	r4, r2
 800baca:	d510      	bpl.n	800baee <_svfiprintf_r+0x36>
 800bacc:	690b      	ldr	r3, [r1, #16]
 800bace:	b973      	cbnz	r3, 800baee <_svfiprintf_r+0x36>
 800bad0:	2140      	movs	r1, #64	@ 0x40
 800bad2:	f7ff ff09 	bl	800b8e8 <_malloc_r>
 800bad6:	6028      	str	r0, [r5, #0]
 800bad8:	6128      	str	r0, [r5, #16]
 800bada:	b930      	cbnz	r0, 800baea <_svfiprintf_r+0x32>
 800badc:	230c      	movs	r3, #12
 800bade:	603b      	str	r3, [r7, #0]
 800bae0:	f04f 30ff 	mov.w	r0, #4294967295
 800bae4:	b01d      	add	sp, #116	@ 0x74
 800bae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baea:	2340      	movs	r3, #64	@ 0x40
 800baec:	616b      	str	r3, [r5, #20]
 800baee:	2300      	movs	r3, #0
 800baf0:	9309      	str	r3, [sp, #36]	@ 0x24
 800baf2:	2320      	movs	r3, #32
 800baf4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800baf8:	f8cd 800c 	str.w	r8, [sp, #12]
 800bafc:	2330      	movs	r3, #48	@ 0x30
 800bafe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bc9c <_svfiprintf_r+0x1e4>
 800bb02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb06:	f04f 0901 	mov.w	r9, #1
 800bb0a:	4623      	mov	r3, r4
 800bb0c:	469a      	mov	sl, r3
 800bb0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb12:	b10a      	cbz	r2, 800bb18 <_svfiprintf_r+0x60>
 800bb14:	2a25      	cmp	r2, #37	@ 0x25
 800bb16:	d1f9      	bne.n	800bb0c <_svfiprintf_r+0x54>
 800bb18:	ebba 0b04 	subs.w	fp, sl, r4
 800bb1c:	d00b      	beq.n	800bb36 <_svfiprintf_r+0x7e>
 800bb1e:	465b      	mov	r3, fp
 800bb20:	4622      	mov	r2, r4
 800bb22:	4629      	mov	r1, r5
 800bb24:	4638      	mov	r0, r7
 800bb26:	f7ff ff6b 	bl	800ba00 <__ssputs_r>
 800bb2a:	3001      	adds	r0, #1
 800bb2c:	f000 80a7 	beq.w	800bc7e <_svfiprintf_r+0x1c6>
 800bb30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb32:	445a      	add	r2, fp
 800bb34:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb36:	f89a 3000 	ldrb.w	r3, [sl]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	f000 809f 	beq.w	800bc7e <_svfiprintf_r+0x1c6>
 800bb40:	2300      	movs	r3, #0
 800bb42:	f04f 32ff 	mov.w	r2, #4294967295
 800bb46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb4a:	f10a 0a01 	add.w	sl, sl, #1
 800bb4e:	9304      	str	r3, [sp, #16]
 800bb50:	9307      	str	r3, [sp, #28]
 800bb52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb56:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb58:	4654      	mov	r4, sl
 800bb5a:	2205      	movs	r2, #5
 800bb5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb60:	484e      	ldr	r0, [pc, #312]	@ (800bc9c <_svfiprintf_r+0x1e4>)
 800bb62:	f7f4 fb65 	bl	8000230 <memchr>
 800bb66:	9a04      	ldr	r2, [sp, #16]
 800bb68:	b9d8      	cbnz	r0, 800bba2 <_svfiprintf_r+0xea>
 800bb6a:	06d0      	lsls	r0, r2, #27
 800bb6c:	bf44      	itt	mi
 800bb6e:	2320      	movmi	r3, #32
 800bb70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb74:	0711      	lsls	r1, r2, #28
 800bb76:	bf44      	itt	mi
 800bb78:	232b      	movmi	r3, #43	@ 0x2b
 800bb7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb7e:	f89a 3000 	ldrb.w	r3, [sl]
 800bb82:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb84:	d015      	beq.n	800bbb2 <_svfiprintf_r+0xfa>
 800bb86:	9a07      	ldr	r2, [sp, #28]
 800bb88:	4654      	mov	r4, sl
 800bb8a:	2000      	movs	r0, #0
 800bb8c:	f04f 0c0a 	mov.w	ip, #10
 800bb90:	4621      	mov	r1, r4
 800bb92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb96:	3b30      	subs	r3, #48	@ 0x30
 800bb98:	2b09      	cmp	r3, #9
 800bb9a:	d94b      	bls.n	800bc34 <_svfiprintf_r+0x17c>
 800bb9c:	b1b0      	cbz	r0, 800bbcc <_svfiprintf_r+0x114>
 800bb9e:	9207      	str	r2, [sp, #28]
 800bba0:	e014      	b.n	800bbcc <_svfiprintf_r+0x114>
 800bba2:	eba0 0308 	sub.w	r3, r0, r8
 800bba6:	fa09 f303 	lsl.w	r3, r9, r3
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	9304      	str	r3, [sp, #16]
 800bbae:	46a2      	mov	sl, r4
 800bbb0:	e7d2      	b.n	800bb58 <_svfiprintf_r+0xa0>
 800bbb2:	9b03      	ldr	r3, [sp, #12]
 800bbb4:	1d19      	adds	r1, r3, #4
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	9103      	str	r1, [sp, #12]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	bfbb      	ittet	lt
 800bbbe:	425b      	neglt	r3, r3
 800bbc0:	f042 0202 	orrlt.w	r2, r2, #2
 800bbc4:	9307      	strge	r3, [sp, #28]
 800bbc6:	9307      	strlt	r3, [sp, #28]
 800bbc8:	bfb8      	it	lt
 800bbca:	9204      	strlt	r2, [sp, #16]
 800bbcc:	7823      	ldrb	r3, [r4, #0]
 800bbce:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbd0:	d10a      	bne.n	800bbe8 <_svfiprintf_r+0x130>
 800bbd2:	7863      	ldrb	r3, [r4, #1]
 800bbd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbd6:	d132      	bne.n	800bc3e <_svfiprintf_r+0x186>
 800bbd8:	9b03      	ldr	r3, [sp, #12]
 800bbda:	1d1a      	adds	r2, r3, #4
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	9203      	str	r2, [sp, #12]
 800bbe0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbe4:	3402      	adds	r4, #2
 800bbe6:	9305      	str	r3, [sp, #20]
 800bbe8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bcac <_svfiprintf_r+0x1f4>
 800bbec:	7821      	ldrb	r1, [r4, #0]
 800bbee:	2203      	movs	r2, #3
 800bbf0:	4650      	mov	r0, sl
 800bbf2:	f7f4 fb1d 	bl	8000230 <memchr>
 800bbf6:	b138      	cbz	r0, 800bc08 <_svfiprintf_r+0x150>
 800bbf8:	9b04      	ldr	r3, [sp, #16]
 800bbfa:	eba0 000a 	sub.w	r0, r0, sl
 800bbfe:	2240      	movs	r2, #64	@ 0x40
 800bc00:	4082      	lsls	r2, r0
 800bc02:	4313      	orrs	r3, r2
 800bc04:	3401      	adds	r4, #1
 800bc06:	9304      	str	r3, [sp, #16]
 800bc08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc0c:	4824      	ldr	r0, [pc, #144]	@ (800bca0 <_svfiprintf_r+0x1e8>)
 800bc0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc12:	2206      	movs	r2, #6
 800bc14:	f7f4 fb0c 	bl	8000230 <memchr>
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d036      	beq.n	800bc8a <_svfiprintf_r+0x1d2>
 800bc1c:	4b21      	ldr	r3, [pc, #132]	@ (800bca4 <_svfiprintf_r+0x1ec>)
 800bc1e:	bb1b      	cbnz	r3, 800bc68 <_svfiprintf_r+0x1b0>
 800bc20:	9b03      	ldr	r3, [sp, #12]
 800bc22:	3307      	adds	r3, #7
 800bc24:	f023 0307 	bic.w	r3, r3, #7
 800bc28:	3308      	adds	r3, #8
 800bc2a:	9303      	str	r3, [sp, #12]
 800bc2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc2e:	4433      	add	r3, r6
 800bc30:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc32:	e76a      	b.n	800bb0a <_svfiprintf_r+0x52>
 800bc34:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc38:	460c      	mov	r4, r1
 800bc3a:	2001      	movs	r0, #1
 800bc3c:	e7a8      	b.n	800bb90 <_svfiprintf_r+0xd8>
 800bc3e:	2300      	movs	r3, #0
 800bc40:	3401      	adds	r4, #1
 800bc42:	9305      	str	r3, [sp, #20]
 800bc44:	4619      	mov	r1, r3
 800bc46:	f04f 0c0a 	mov.w	ip, #10
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc50:	3a30      	subs	r2, #48	@ 0x30
 800bc52:	2a09      	cmp	r2, #9
 800bc54:	d903      	bls.n	800bc5e <_svfiprintf_r+0x1a6>
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d0c6      	beq.n	800bbe8 <_svfiprintf_r+0x130>
 800bc5a:	9105      	str	r1, [sp, #20]
 800bc5c:	e7c4      	b.n	800bbe8 <_svfiprintf_r+0x130>
 800bc5e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc62:	4604      	mov	r4, r0
 800bc64:	2301      	movs	r3, #1
 800bc66:	e7f0      	b.n	800bc4a <_svfiprintf_r+0x192>
 800bc68:	ab03      	add	r3, sp, #12
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	462a      	mov	r2, r5
 800bc6e:	4b0e      	ldr	r3, [pc, #56]	@ (800bca8 <_svfiprintf_r+0x1f0>)
 800bc70:	a904      	add	r1, sp, #16
 800bc72:	4638      	mov	r0, r7
 800bc74:	f3af 8000 	nop.w
 800bc78:	1c42      	adds	r2, r0, #1
 800bc7a:	4606      	mov	r6, r0
 800bc7c:	d1d6      	bne.n	800bc2c <_svfiprintf_r+0x174>
 800bc7e:	89ab      	ldrh	r3, [r5, #12]
 800bc80:	065b      	lsls	r3, r3, #25
 800bc82:	f53f af2d 	bmi.w	800bae0 <_svfiprintf_r+0x28>
 800bc86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc88:	e72c      	b.n	800bae4 <_svfiprintf_r+0x2c>
 800bc8a:	ab03      	add	r3, sp, #12
 800bc8c:	9300      	str	r3, [sp, #0]
 800bc8e:	462a      	mov	r2, r5
 800bc90:	4b05      	ldr	r3, [pc, #20]	@ (800bca8 <_svfiprintf_r+0x1f0>)
 800bc92:	a904      	add	r1, sp, #16
 800bc94:	4638      	mov	r0, r7
 800bc96:	f000 f879 	bl	800bd8c <_printf_i>
 800bc9a:	e7ed      	b.n	800bc78 <_svfiprintf_r+0x1c0>
 800bc9c:	0800c8f8 	.word	0x0800c8f8
 800bca0:	0800c902 	.word	0x0800c902
 800bca4:	00000000 	.word	0x00000000
 800bca8:	0800ba01 	.word	0x0800ba01
 800bcac:	0800c8fe 	.word	0x0800c8fe

0800bcb0 <_printf_common>:
 800bcb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcb4:	4616      	mov	r6, r2
 800bcb6:	4698      	mov	r8, r3
 800bcb8:	688a      	ldr	r2, [r1, #8]
 800bcba:	690b      	ldr	r3, [r1, #16]
 800bcbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	bfb8      	it	lt
 800bcc4:	4613      	movlt	r3, r2
 800bcc6:	6033      	str	r3, [r6, #0]
 800bcc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bccc:	4607      	mov	r7, r0
 800bcce:	460c      	mov	r4, r1
 800bcd0:	b10a      	cbz	r2, 800bcd6 <_printf_common+0x26>
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	6033      	str	r3, [r6, #0]
 800bcd6:	6823      	ldr	r3, [r4, #0]
 800bcd8:	0699      	lsls	r1, r3, #26
 800bcda:	bf42      	ittt	mi
 800bcdc:	6833      	ldrmi	r3, [r6, #0]
 800bcde:	3302      	addmi	r3, #2
 800bce0:	6033      	strmi	r3, [r6, #0]
 800bce2:	6825      	ldr	r5, [r4, #0]
 800bce4:	f015 0506 	ands.w	r5, r5, #6
 800bce8:	d106      	bne.n	800bcf8 <_printf_common+0x48>
 800bcea:	f104 0a19 	add.w	sl, r4, #25
 800bcee:	68e3      	ldr	r3, [r4, #12]
 800bcf0:	6832      	ldr	r2, [r6, #0]
 800bcf2:	1a9b      	subs	r3, r3, r2
 800bcf4:	42ab      	cmp	r3, r5
 800bcf6:	dc26      	bgt.n	800bd46 <_printf_common+0x96>
 800bcf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bcfc:	6822      	ldr	r2, [r4, #0]
 800bcfe:	3b00      	subs	r3, #0
 800bd00:	bf18      	it	ne
 800bd02:	2301      	movne	r3, #1
 800bd04:	0692      	lsls	r2, r2, #26
 800bd06:	d42b      	bmi.n	800bd60 <_printf_common+0xb0>
 800bd08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bd0c:	4641      	mov	r1, r8
 800bd0e:	4638      	mov	r0, r7
 800bd10:	47c8      	blx	r9
 800bd12:	3001      	adds	r0, #1
 800bd14:	d01e      	beq.n	800bd54 <_printf_common+0xa4>
 800bd16:	6823      	ldr	r3, [r4, #0]
 800bd18:	6922      	ldr	r2, [r4, #16]
 800bd1a:	f003 0306 	and.w	r3, r3, #6
 800bd1e:	2b04      	cmp	r3, #4
 800bd20:	bf02      	ittt	eq
 800bd22:	68e5      	ldreq	r5, [r4, #12]
 800bd24:	6833      	ldreq	r3, [r6, #0]
 800bd26:	1aed      	subeq	r5, r5, r3
 800bd28:	68a3      	ldr	r3, [r4, #8]
 800bd2a:	bf0c      	ite	eq
 800bd2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd30:	2500      	movne	r5, #0
 800bd32:	4293      	cmp	r3, r2
 800bd34:	bfc4      	itt	gt
 800bd36:	1a9b      	subgt	r3, r3, r2
 800bd38:	18ed      	addgt	r5, r5, r3
 800bd3a:	2600      	movs	r6, #0
 800bd3c:	341a      	adds	r4, #26
 800bd3e:	42b5      	cmp	r5, r6
 800bd40:	d11a      	bne.n	800bd78 <_printf_common+0xc8>
 800bd42:	2000      	movs	r0, #0
 800bd44:	e008      	b.n	800bd58 <_printf_common+0xa8>
 800bd46:	2301      	movs	r3, #1
 800bd48:	4652      	mov	r2, sl
 800bd4a:	4641      	mov	r1, r8
 800bd4c:	4638      	mov	r0, r7
 800bd4e:	47c8      	blx	r9
 800bd50:	3001      	adds	r0, #1
 800bd52:	d103      	bne.n	800bd5c <_printf_common+0xac>
 800bd54:	f04f 30ff 	mov.w	r0, #4294967295
 800bd58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd5c:	3501      	adds	r5, #1
 800bd5e:	e7c6      	b.n	800bcee <_printf_common+0x3e>
 800bd60:	18e1      	adds	r1, r4, r3
 800bd62:	1c5a      	adds	r2, r3, #1
 800bd64:	2030      	movs	r0, #48	@ 0x30
 800bd66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bd6a:	4422      	add	r2, r4
 800bd6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bd70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bd74:	3302      	adds	r3, #2
 800bd76:	e7c7      	b.n	800bd08 <_printf_common+0x58>
 800bd78:	2301      	movs	r3, #1
 800bd7a:	4622      	mov	r2, r4
 800bd7c:	4641      	mov	r1, r8
 800bd7e:	4638      	mov	r0, r7
 800bd80:	47c8      	blx	r9
 800bd82:	3001      	adds	r0, #1
 800bd84:	d0e6      	beq.n	800bd54 <_printf_common+0xa4>
 800bd86:	3601      	adds	r6, #1
 800bd88:	e7d9      	b.n	800bd3e <_printf_common+0x8e>
	...

0800bd8c <_printf_i>:
 800bd8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd90:	7e0f      	ldrb	r7, [r1, #24]
 800bd92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd94:	2f78      	cmp	r7, #120	@ 0x78
 800bd96:	4691      	mov	r9, r2
 800bd98:	4680      	mov	r8, r0
 800bd9a:	460c      	mov	r4, r1
 800bd9c:	469a      	mov	sl, r3
 800bd9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bda2:	d807      	bhi.n	800bdb4 <_printf_i+0x28>
 800bda4:	2f62      	cmp	r7, #98	@ 0x62
 800bda6:	d80a      	bhi.n	800bdbe <_printf_i+0x32>
 800bda8:	2f00      	cmp	r7, #0
 800bdaa:	f000 80d2 	beq.w	800bf52 <_printf_i+0x1c6>
 800bdae:	2f58      	cmp	r7, #88	@ 0x58
 800bdb0:	f000 80b9 	beq.w	800bf26 <_printf_i+0x19a>
 800bdb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bdb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bdbc:	e03a      	b.n	800be34 <_printf_i+0xa8>
 800bdbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bdc2:	2b15      	cmp	r3, #21
 800bdc4:	d8f6      	bhi.n	800bdb4 <_printf_i+0x28>
 800bdc6:	a101      	add	r1, pc, #4	@ (adr r1, 800bdcc <_printf_i+0x40>)
 800bdc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bdcc:	0800be25 	.word	0x0800be25
 800bdd0:	0800be39 	.word	0x0800be39
 800bdd4:	0800bdb5 	.word	0x0800bdb5
 800bdd8:	0800bdb5 	.word	0x0800bdb5
 800bddc:	0800bdb5 	.word	0x0800bdb5
 800bde0:	0800bdb5 	.word	0x0800bdb5
 800bde4:	0800be39 	.word	0x0800be39
 800bde8:	0800bdb5 	.word	0x0800bdb5
 800bdec:	0800bdb5 	.word	0x0800bdb5
 800bdf0:	0800bdb5 	.word	0x0800bdb5
 800bdf4:	0800bdb5 	.word	0x0800bdb5
 800bdf8:	0800bf39 	.word	0x0800bf39
 800bdfc:	0800be63 	.word	0x0800be63
 800be00:	0800bef3 	.word	0x0800bef3
 800be04:	0800bdb5 	.word	0x0800bdb5
 800be08:	0800bdb5 	.word	0x0800bdb5
 800be0c:	0800bf5b 	.word	0x0800bf5b
 800be10:	0800bdb5 	.word	0x0800bdb5
 800be14:	0800be63 	.word	0x0800be63
 800be18:	0800bdb5 	.word	0x0800bdb5
 800be1c:	0800bdb5 	.word	0x0800bdb5
 800be20:	0800befb 	.word	0x0800befb
 800be24:	6833      	ldr	r3, [r6, #0]
 800be26:	1d1a      	adds	r2, r3, #4
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	6032      	str	r2, [r6, #0]
 800be2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800be34:	2301      	movs	r3, #1
 800be36:	e09d      	b.n	800bf74 <_printf_i+0x1e8>
 800be38:	6833      	ldr	r3, [r6, #0]
 800be3a:	6820      	ldr	r0, [r4, #0]
 800be3c:	1d19      	adds	r1, r3, #4
 800be3e:	6031      	str	r1, [r6, #0]
 800be40:	0606      	lsls	r6, r0, #24
 800be42:	d501      	bpl.n	800be48 <_printf_i+0xbc>
 800be44:	681d      	ldr	r5, [r3, #0]
 800be46:	e003      	b.n	800be50 <_printf_i+0xc4>
 800be48:	0645      	lsls	r5, r0, #25
 800be4a:	d5fb      	bpl.n	800be44 <_printf_i+0xb8>
 800be4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800be50:	2d00      	cmp	r5, #0
 800be52:	da03      	bge.n	800be5c <_printf_i+0xd0>
 800be54:	232d      	movs	r3, #45	@ 0x2d
 800be56:	426d      	negs	r5, r5
 800be58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be5c:	4859      	ldr	r0, [pc, #356]	@ (800bfc4 <_printf_i+0x238>)
 800be5e:	230a      	movs	r3, #10
 800be60:	e011      	b.n	800be86 <_printf_i+0xfa>
 800be62:	6821      	ldr	r1, [r4, #0]
 800be64:	6833      	ldr	r3, [r6, #0]
 800be66:	0608      	lsls	r0, r1, #24
 800be68:	f853 5b04 	ldr.w	r5, [r3], #4
 800be6c:	d402      	bmi.n	800be74 <_printf_i+0xe8>
 800be6e:	0649      	lsls	r1, r1, #25
 800be70:	bf48      	it	mi
 800be72:	b2ad      	uxthmi	r5, r5
 800be74:	2f6f      	cmp	r7, #111	@ 0x6f
 800be76:	4853      	ldr	r0, [pc, #332]	@ (800bfc4 <_printf_i+0x238>)
 800be78:	6033      	str	r3, [r6, #0]
 800be7a:	bf14      	ite	ne
 800be7c:	230a      	movne	r3, #10
 800be7e:	2308      	moveq	r3, #8
 800be80:	2100      	movs	r1, #0
 800be82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800be86:	6866      	ldr	r6, [r4, #4]
 800be88:	60a6      	str	r6, [r4, #8]
 800be8a:	2e00      	cmp	r6, #0
 800be8c:	bfa2      	ittt	ge
 800be8e:	6821      	ldrge	r1, [r4, #0]
 800be90:	f021 0104 	bicge.w	r1, r1, #4
 800be94:	6021      	strge	r1, [r4, #0]
 800be96:	b90d      	cbnz	r5, 800be9c <_printf_i+0x110>
 800be98:	2e00      	cmp	r6, #0
 800be9a:	d04b      	beq.n	800bf34 <_printf_i+0x1a8>
 800be9c:	4616      	mov	r6, r2
 800be9e:	fbb5 f1f3 	udiv	r1, r5, r3
 800bea2:	fb03 5711 	mls	r7, r3, r1, r5
 800bea6:	5dc7      	ldrb	r7, [r0, r7]
 800bea8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800beac:	462f      	mov	r7, r5
 800beae:	42bb      	cmp	r3, r7
 800beb0:	460d      	mov	r5, r1
 800beb2:	d9f4      	bls.n	800be9e <_printf_i+0x112>
 800beb4:	2b08      	cmp	r3, #8
 800beb6:	d10b      	bne.n	800bed0 <_printf_i+0x144>
 800beb8:	6823      	ldr	r3, [r4, #0]
 800beba:	07df      	lsls	r7, r3, #31
 800bebc:	d508      	bpl.n	800bed0 <_printf_i+0x144>
 800bebe:	6923      	ldr	r3, [r4, #16]
 800bec0:	6861      	ldr	r1, [r4, #4]
 800bec2:	4299      	cmp	r1, r3
 800bec4:	bfde      	ittt	le
 800bec6:	2330      	movle	r3, #48	@ 0x30
 800bec8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800becc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bed0:	1b92      	subs	r2, r2, r6
 800bed2:	6122      	str	r2, [r4, #16]
 800bed4:	f8cd a000 	str.w	sl, [sp]
 800bed8:	464b      	mov	r3, r9
 800beda:	aa03      	add	r2, sp, #12
 800bedc:	4621      	mov	r1, r4
 800bede:	4640      	mov	r0, r8
 800bee0:	f7ff fee6 	bl	800bcb0 <_printf_common>
 800bee4:	3001      	adds	r0, #1
 800bee6:	d14a      	bne.n	800bf7e <_printf_i+0x1f2>
 800bee8:	f04f 30ff 	mov.w	r0, #4294967295
 800beec:	b004      	add	sp, #16
 800beee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bef2:	6823      	ldr	r3, [r4, #0]
 800bef4:	f043 0320 	orr.w	r3, r3, #32
 800bef8:	6023      	str	r3, [r4, #0]
 800befa:	4833      	ldr	r0, [pc, #204]	@ (800bfc8 <_printf_i+0x23c>)
 800befc:	2778      	movs	r7, #120	@ 0x78
 800befe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bf02:	6823      	ldr	r3, [r4, #0]
 800bf04:	6831      	ldr	r1, [r6, #0]
 800bf06:	061f      	lsls	r7, r3, #24
 800bf08:	f851 5b04 	ldr.w	r5, [r1], #4
 800bf0c:	d402      	bmi.n	800bf14 <_printf_i+0x188>
 800bf0e:	065f      	lsls	r7, r3, #25
 800bf10:	bf48      	it	mi
 800bf12:	b2ad      	uxthmi	r5, r5
 800bf14:	6031      	str	r1, [r6, #0]
 800bf16:	07d9      	lsls	r1, r3, #31
 800bf18:	bf44      	itt	mi
 800bf1a:	f043 0320 	orrmi.w	r3, r3, #32
 800bf1e:	6023      	strmi	r3, [r4, #0]
 800bf20:	b11d      	cbz	r5, 800bf2a <_printf_i+0x19e>
 800bf22:	2310      	movs	r3, #16
 800bf24:	e7ac      	b.n	800be80 <_printf_i+0xf4>
 800bf26:	4827      	ldr	r0, [pc, #156]	@ (800bfc4 <_printf_i+0x238>)
 800bf28:	e7e9      	b.n	800befe <_printf_i+0x172>
 800bf2a:	6823      	ldr	r3, [r4, #0]
 800bf2c:	f023 0320 	bic.w	r3, r3, #32
 800bf30:	6023      	str	r3, [r4, #0]
 800bf32:	e7f6      	b.n	800bf22 <_printf_i+0x196>
 800bf34:	4616      	mov	r6, r2
 800bf36:	e7bd      	b.n	800beb4 <_printf_i+0x128>
 800bf38:	6833      	ldr	r3, [r6, #0]
 800bf3a:	6825      	ldr	r5, [r4, #0]
 800bf3c:	6961      	ldr	r1, [r4, #20]
 800bf3e:	1d18      	adds	r0, r3, #4
 800bf40:	6030      	str	r0, [r6, #0]
 800bf42:	062e      	lsls	r6, r5, #24
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	d501      	bpl.n	800bf4c <_printf_i+0x1c0>
 800bf48:	6019      	str	r1, [r3, #0]
 800bf4a:	e002      	b.n	800bf52 <_printf_i+0x1c6>
 800bf4c:	0668      	lsls	r0, r5, #25
 800bf4e:	d5fb      	bpl.n	800bf48 <_printf_i+0x1bc>
 800bf50:	8019      	strh	r1, [r3, #0]
 800bf52:	2300      	movs	r3, #0
 800bf54:	6123      	str	r3, [r4, #16]
 800bf56:	4616      	mov	r6, r2
 800bf58:	e7bc      	b.n	800bed4 <_printf_i+0x148>
 800bf5a:	6833      	ldr	r3, [r6, #0]
 800bf5c:	1d1a      	adds	r2, r3, #4
 800bf5e:	6032      	str	r2, [r6, #0]
 800bf60:	681e      	ldr	r6, [r3, #0]
 800bf62:	6862      	ldr	r2, [r4, #4]
 800bf64:	2100      	movs	r1, #0
 800bf66:	4630      	mov	r0, r6
 800bf68:	f7f4 f962 	bl	8000230 <memchr>
 800bf6c:	b108      	cbz	r0, 800bf72 <_printf_i+0x1e6>
 800bf6e:	1b80      	subs	r0, r0, r6
 800bf70:	6060      	str	r0, [r4, #4]
 800bf72:	6863      	ldr	r3, [r4, #4]
 800bf74:	6123      	str	r3, [r4, #16]
 800bf76:	2300      	movs	r3, #0
 800bf78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf7c:	e7aa      	b.n	800bed4 <_printf_i+0x148>
 800bf7e:	6923      	ldr	r3, [r4, #16]
 800bf80:	4632      	mov	r2, r6
 800bf82:	4649      	mov	r1, r9
 800bf84:	4640      	mov	r0, r8
 800bf86:	47d0      	blx	sl
 800bf88:	3001      	adds	r0, #1
 800bf8a:	d0ad      	beq.n	800bee8 <_printf_i+0x15c>
 800bf8c:	6823      	ldr	r3, [r4, #0]
 800bf8e:	079b      	lsls	r3, r3, #30
 800bf90:	d413      	bmi.n	800bfba <_printf_i+0x22e>
 800bf92:	68e0      	ldr	r0, [r4, #12]
 800bf94:	9b03      	ldr	r3, [sp, #12]
 800bf96:	4298      	cmp	r0, r3
 800bf98:	bfb8      	it	lt
 800bf9a:	4618      	movlt	r0, r3
 800bf9c:	e7a6      	b.n	800beec <_printf_i+0x160>
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	4632      	mov	r2, r6
 800bfa2:	4649      	mov	r1, r9
 800bfa4:	4640      	mov	r0, r8
 800bfa6:	47d0      	blx	sl
 800bfa8:	3001      	adds	r0, #1
 800bfaa:	d09d      	beq.n	800bee8 <_printf_i+0x15c>
 800bfac:	3501      	adds	r5, #1
 800bfae:	68e3      	ldr	r3, [r4, #12]
 800bfb0:	9903      	ldr	r1, [sp, #12]
 800bfb2:	1a5b      	subs	r3, r3, r1
 800bfb4:	42ab      	cmp	r3, r5
 800bfb6:	dcf2      	bgt.n	800bf9e <_printf_i+0x212>
 800bfb8:	e7eb      	b.n	800bf92 <_printf_i+0x206>
 800bfba:	2500      	movs	r5, #0
 800bfbc:	f104 0619 	add.w	r6, r4, #25
 800bfc0:	e7f5      	b.n	800bfae <_printf_i+0x222>
 800bfc2:	bf00      	nop
 800bfc4:	0800c909 	.word	0x0800c909
 800bfc8:	0800c91a 	.word	0x0800c91a

0800bfcc <memmove>:
 800bfcc:	4288      	cmp	r0, r1
 800bfce:	b510      	push	{r4, lr}
 800bfd0:	eb01 0402 	add.w	r4, r1, r2
 800bfd4:	d902      	bls.n	800bfdc <memmove+0x10>
 800bfd6:	4284      	cmp	r4, r0
 800bfd8:	4623      	mov	r3, r4
 800bfda:	d807      	bhi.n	800bfec <memmove+0x20>
 800bfdc:	1e43      	subs	r3, r0, #1
 800bfde:	42a1      	cmp	r1, r4
 800bfe0:	d008      	beq.n	800bff4 <memmove+0x28>
 800bfe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bfea:	e7f8      	b.n	800bfde <memmove+0x12>
 800bfec:	4402      	add	r2, r0
 800bfee:	4601      	mov	r1, r0
 800bff0:	428a      	cmp	r2, r1
 800bff2:	d100      	bne.n	800bff6 <memmove+0x2a>
 800bff4:	bd10      	pop	{r4, pc}
 800bff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bffa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bffe:	e7f7      	b.n	800bff0 <memmove+0x24>

0800c000 <_sbrk_r>:
 800c000:	b538      	push	{r3, r4, r5, lr}
 800c002:	4d06      	ldr	r5, [pc, #24]	@ (800c01c <_sbrk_r+0x1c>)
 800c004:	2300      	movs	r3, #0
 800c006:	4604      	mov	r4, r0
 800c008:	4608      	mov	r0, r1
 800c00a:	602b      	str	r3, [r5, #0]
 800c00c:	f7f7 f8ba 	bl	8003184 <_sbrk>
 800c010:	1c43      	adds	r3, r0, #1
 800c012:	d102      	bne.n	800c01a <_sbrk_r+0x1a>
 800c014:	682b      	ldr	r3, [r5, #0]
 800c016:	b103      	cbz	r3, 800c01a <_sbrk_r+0x1a>
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	bd38      	pop	{r3, r4, r5, pc}
 800c01c:	200010ec 	.word	0x200010ec

0800c020 <memcpy>:
 800c020:	440a      	add	r2, r1
 800c022:	4291      	cmp	r1, r2
 800c024:	f100 33ff 	add.w	r3, r0, #4294967295
 800c028:	d100      	bne.n	800c02c <memcpy+0xc>
 800c02a:	4770      	bx	lr
 800c02c:	b510      	push	{r4, lr}
 800c02e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c032:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c036:	4291      	cmp	r1, r2
 800c038:	d1f9      	bne.n	800c02e <memcpy+0xe>
 800c03a:	bd10      	pop	{r4, pc}

0800c03c <_realloc_r>:
 800c03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c040:	4680      	mov	r8, r0
 800c042:	4615      	mov	r5, r2
 800c044:	460c      	mov	r4, r1
 800c046:	b921      	cbnz	r1, 800c052 <_realloc_r+0x16>
 800c048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c04c:	4611      	mov	r1, r2
 800c04e:	f7ff bc4b 	b.w	800b8e8 <_malloc_r>
 800c052:	b92a      	cbnz	r2, 800c060 <_realloc_r+0x24>
 800c054:	f7ff fbdc 	bl	800b810 <_free_r>
 800c058:	2400      	movs	r4, #0
 800c05a:	4620      	mov	r0, r4
 800c05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c060:	f000 f81a 	bl	800c098 <_malloc_usable_size_r>
 800c064:	4285      	cmp	r5, r0
 800c066:	4606      	mov	r6, r0
 800c068:	d802      	bhi.n	800c070 <_realloc_r+0x34>
 800c06a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c06e:	d8f4      	bhi.n	800c05a <_realloc_r+0x1e>
 800c070:	4629      	mov	r1, r5
 800c072:	4640      	mov	r0, r8
 800c074:	f7ff fc38 	bl	800b8e8 <_malloc_r>
 800c078:	4607      	mov	r7, r0
 800c07a:	2800      	cmp	r0, #0
 800c07c:	d0ec      	beq.n	800c058 <_realloc_r+0x1c>
 800c07e:	42b5      	cmp	r5, r6
 800c080:	462a      	mov	r2, r5
 800c082:	4621      	mov	r1, r4
 800c084:	bf28      	it	cs
 800c086:	4632      	movcs	r2, r6
 800c088:	f7ff ffca 	bl	800c020 <memcpy>
 800c08c:	4621      	mov	r1, r4
 800c08e:	4640      	mov	r0, r8
 800c090:	f7ff fbbe 	bl	800b810 <_free_r>
 800c094:	463c      	mov	r4, r7
 800c096:	e7e0      	b.n	800c05a <_realloc_r+0x1e>

0800c098 <_malloc_usable_size_r>:
 800c098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c09c:	1f18      	subs	r0, r3, #4
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	bfbc      	itt	lt
 800c0a2:	580b      	ldrlt	r3, [r1, r0]
 800c0a4:	18c0      	addlt	r0, r0, r3
 800c0a6:	4770      	bx	lr

0800c0a8 <_init>:
 800c0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0aa:	bf00      	nop
 800c0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ae:	bc08      	pop	{r3}
 800c0b0:	469e      	mov	lr, r3
 800c0b2:	4770      	bx	lr

0800c0b4 <_fini>:
 800c0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b6:	bf00      	nop
 800c0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ba:	bc08      	pop	{r3}
 800c0bc:	469e      	mov	lr, r3
 800c0be:	4770      	bx	lr
